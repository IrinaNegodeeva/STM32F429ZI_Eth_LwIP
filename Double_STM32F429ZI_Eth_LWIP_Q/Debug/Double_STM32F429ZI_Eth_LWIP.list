
Double_STM32F429ZI_Eth_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014050  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df4  08014200  08014200  00024200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ff4  08016ff4  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08016ff4  08016ff4  00026ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ffc  08016ffc  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ffc  08016ffc  00026ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017000  08017000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08017004  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          0000ca24  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cab8  2000cab8  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ced3  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007143  00000000  00000000  0005cf97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  000640e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ea0  00000000  00000000  00066100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000348f0  00000000  00000000  00067fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000313c6  00000000  00000000  0009c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001092fa  00000000  00000000  000cdc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d6f50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c98  00000000  00000000  001d6fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080141e8 	.word	0x080141e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080141e8 	.word	0x080141e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000b0 	.word	0x200000b0
 80005c4:	20000164 	.word	0x20000164

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fe05 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f81f 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8ff 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005da:	f000 f8dd 	bl	8000798 <MX_DMA_Init>
  MX_ADC1_Init();
 80005de:	f000 f889 	bl	80006f4 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x44>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fa59 	bl	8005ab0 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <main+0x48>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f005 fa3d 	bl	8005a82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x40>
 800060a:	bf00      	nop
 800060c:	0801420c 	.word	0x0801420c
 8000610:	2000040c 	.word	0x2000040c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f012 fe17 	bl	8013256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <SystemClock_Config+0xd8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <SystemClock_Config+0xd8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xd8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xdc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <SystemClock_Config+0xdc>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xdc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000688:	23b4      	movs	r3, #180	; 0xb4
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fc53 	bl	8003f44 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f9dd 	bl	8000a62 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f003 fbfc 	bl	8003ea4 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006b2:	f000 f9d6 	bl	8000a62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2105      	movs	r1, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fead 	bl	8004434 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e0:	f000 f9bf 	bl	8000a62 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC1_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC1_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC1_Init+0x98>)
 8000756:	f000 fda7 	bl	80012a8 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f97f 	bl	8000a62 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0x98>)
 8000776:	f000 ff59 	bl	800162c <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 f96f 	bl	8000a62 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000364 	.word	0x20000364
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	2038      	movs	r0, #56	; 0x38
 80007c0:	f001 fa9c 	bl	8001cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007c4:	2038      	movs	r0, #56	; 0x38
 80007c6:	f001 fab5 	bl	8001d34 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2181      	movs	r1, #129	; 0x81
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0xd4>)
 8000880:	f003 faf6 	bl	8003e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000884:	2381      	movs	r3, #129	; 0x81
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0xd4>)
 800089c:	f003 f93c 	bl	8003b18 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400

080008b0 <HAL_ADC_ConvCpltCallback>:
		return 1;

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	 HAL_ADC_Stop_DMA(hadc);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 fe49 	bl	8001550 <HAL_ADC_Stop_DMA>

	 switch (adc_state) {
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d002      	beq.n	80008cc <HAL_ADC_ConvCpltCallback+0x1c>
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d009      	beq.n	80008de <HAL_ADC_ConvCpltCallback+0x2e>
	 	 case ADC_CONV_SECOND_HALF:
	 		adc_state = ADC_SECOND_HALF_FULL;
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
	 		break;
	 	 default:
	 		 break;
 80008ca:	e011      	b.n	80008f0 <HAL_ADC_ConvCpltCallback+0x40>
	 		adc_state = ADC_FIRST_HALF_FULL;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	601a      	str	r2, [r3, #0]
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2101      	movs	r1, #1
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80008d8:	f003 faca 	bl	8003e70 <HAL_GPIO_WritePin>
	 		break;
 80008dc:	e008      	b.n	80008f0 <HAL_ADC_ConvCpltCallback+0x40>
	 		adc_state = ADC_SECOND_HALF_FULL;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80008e0:	2205      	movs	r2, #5
 80008e2:	601a      	str	r2, [r3, #0]
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80008ea:	f003 fac1 	bl	8003e70 <HAL_GPIO_WritePin>
	 		break;
 80008ee:	bf00      	nop
	 }

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000814 	.word	0x20000814
 80008fc:	40020400 	.word	0x40020400

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f004 fa80 	bl	8004e0c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  adc_state = ADC_IDLE;
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <StartDefaultTask+0x120>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]

    osDelay(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f005 f917 	bl	8005b48 <osDelay>

    ip_addr_t PC_IPADDR;
    IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 800091a:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <StartDefaultTask+0x124>)
 800091c:	60bb      	str	r3, [r7, #8]

    struct udp_pcb* my_udp = udp_new();
 800091e:	f00f ff3b 	bl	8010798 <udp_new>
 8000922:	6178      	str	r0, [r7, #20]
    udp_connect(my_udp, &PC_IPADDR, 55151);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800092c:	4619      	mov	r1, r3
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f00f fec4 	bl	80106bc <udp_connect>
    struct pbuf* udp_buffer = NULL;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]

    uint32_t* padc_buff;

    GPIO_TypeDef* LED_PORT = GPIOB;
 8000938:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <StartDefaultTask+0x128>)
 800093a:	60fb      	str	r3, [r7, #12]
    uint16_t LED_PIN;

    HAL_DMA_RegisterCallback (&hdma_adc1,HAL_DMA_XFER_CPLT_CB_ID,HAL_ADC_ConvCpltCallback );
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <StartDefaultTask+0x12c>)
 800093e:	2100      	movs	r1, #0
 8000940:	483b      	ldr	r0, [pc, #236]	; (8000a30 <StartDefaultTask+0x130>)
 8000942:	f001 fd05 	bl	8002350 <HAL_DMA_RegisterCallback>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(50);
 8000946:	2032      	movs	r0, #50	; 0x32
 8000948:	f005 f8fe 	bl	8005b48 <osDelay>
	  switch (stm32_state) {
 800094c:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <StartDefaultTask+0x134>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8000954:	d05f      	beq.n	8000a16 <StartDefaultTask+0x116>
 8000956:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800095a:	d85e      	bhi.n	8000a1a <StartDefaultTask+0x11a>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <StartDefaultTask+0x66>
 8000960:	2b01      	cmp	r3, #1
 8000962:	d00d      	beq.n	8000980 <StartDefaultTask+0x80>
	  		 HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
	  		 break;
	  	  case STM32_ERR:
	  		  break;
	  	  default:
	  		  break;
 8000964:	e059      	b.n	8000a1a <StartDefaultTask+0x11a>
	  		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUFF_LEN/2);
 8000966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096a:	4933      	ldr	r1, [pc, #204]	; (8000a38 <StartDefaultTask+0x138>)
 800096c:	4833      	ldr	r0, [pc, #204]	; (8000a3c <StartDefaultTask+0x13c>)
 800096e:	f000 fcdf 	bl	8001330 <HAL_ADC_Start_DMA>
	  		  adc_state = ADC_CONV_FIRST_HALF;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <StartDefaultTask+0x120>)
 8000974:	2202      	movs	r2, #2
 8000976:	601a      	str	r2, [r3, #0]
	  		  stm32_state = STM32_IDLE;
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <StartDefaultTask+0x134>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
	  		  break;
 800097e:	e04d      	b.n	8000a1c <StartDefaultTask+0x11c>
	  		 switch (adc_state) {
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <StartDefaultTask+0x120>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d002      	beq.n	800098e <StartDefaultTask+0x8e>
 8000988:	2b05      	cmp	r3, #5
 800098a:	d00f      	beq.n	80009ac <StartDefaultTask+0xac>
	  			 		 continue;
 800098c:	e046      	b.n	8000a1c <StartDefaultTask+0x11c>
	  			 		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf+ADC_BUFF_LEN/2, ADC_BUFF_LEN/2);
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <StartDefaultTask+0x140>)
 8000990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000994:	4619      	mov	r1, r3
 8000996:	4829      	ldr	r0, [pc, #164]	; (8000a3c <StartDefaultTask+0x13c>)
 8000998:	f000 fcca 	bl	8001330 <HAL_ADC_Start_DMA>
	  			 		adc_state = ADC_CONV_SECOND_HALF;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <StartDefaultTask+0x120>)
 800099e:	2204      	movs	r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
	  			 		padc_buff = (uint32_t*)adc_buf;
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <StartDefaultTask+0x138>)
 80009a4:	61fb      	str	r3, [r7, #28]
	  			 		LED_PIN = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	837b      	strh	r3, [r7, #26]
	  			 		break;
 80009aa:	e00d      	b.n	80009c8 <StartDefaultTask+0xc8>
	  			 		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUFF_LEN/2);
 80009ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b0:	4921      	ldr	r1, [pc, #132]	; (8000a38 <StartDefaultTask+0x138>)
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <StartDefaultTask+0x13c>)
 80009b4:	f000 fcbc 	bl	8001330 <HAL_ADC_Start_DMA>
	  			 		adc_state = ADC_CONV_FIRST_HALF;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <StartDefaultTask+0x120>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	601a      	str	r2, [r3, #0]
	  			 		padc_buff = (uint32_t*)adc_buf+ADC_BUFF_LEN/2;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <StartDefaultTask+0x140>)
 80009c0:	61fb      	str	r3, [r7, #28]
	  			 		LED_PIN = GPIO_PIN_7;
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	837b      	strh	r3, [r7, #26]
	  			 		break;
 80009c6:	bf00      	nop
	  		 stm32_state = STM32_TRNSMT;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <StartDefaultTask+0x134>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	601a      	str	r2, [r3, #0]
	  		udp_buffer = pbuf_alloc(PBUF_TRANSPORT, (ADC_BUFF_LEN_B/2), PBUF_RAM);
 80009ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80009d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	f009 f9d8 	bl	8009d8c <pbuf_alloc>
 80009dc:	6138      	str	r0, [r7, #16]
	  			if (udp_buffer != NULL) {
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <StartDefaultTask+0x102>
	  				memcpy(udp_buffer->payload, padc_buff, 512);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	69f9      	ldr	r1, [r7, #28]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f012 fc23 	bl	801323a <memcpy>
	  				udp_send(my_udp, udp_buffer);
 80009f4:	6939      	ldr	r1, [r7, #16]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f00f fbee 	bl	80101d8 <udp_send>
	  				pbuf_free(udp_buffer);
 80009fc:	6938      	ldr	r0, [r7, #16]
 80009fe:	f009 fca9 	bl	800a354 <pbuf_free>
	  		 stm32_state = STM32_IDLE;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <StartDefaultTask+0x134>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
	  		 HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000a08:	8b7b      	ldrh	r3, [r7, #26]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f003 fa2e 	bl	8003e70 <HAL_GPIO_WritePin>
	  		 break;
 8000a14:	e002      	b.n	8000a1c <StartDefaultTask+0x11c>
	  		  break;
 8000a16:	bf00      	nop
 8000a18:	e795      	b.n	8000946 <StartDefaultTask+0x46>
	  		  break;
 8000a1a:	bf00      	nop
	  osDelay(50);
 8000a1c:	e793      	b.n	8000946 <StartDefaultTask+0x46>
 8000a1e:	bf00      	nop
 8000a20:	20000814 	.word	0x20000814
 8000a24:	0101a8c0 	.word	0x0101a8c0
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	080008b1 	.word	0x080008b1
 8000a30:	200003ac 	.word	0x200003ac
 8000a34:	20000810 	.word	0x20000810
 8000a38:	20000410 	.word	0x20000410
 8000a3c:	20000364 	.word	0x20000364
 8000a40:	20000810 	.word	0x20000810

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a56:	f000 fbe3 	bl	8001220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a66:	b672      	cpsid	i
}
 8000a68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f001 f923 	bl	8001cfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d156      	bne.n	8000b94 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b32:	f002 fff1 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_ADC_MspInit+0xe8>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	f001 f8e9 	bl	8001d50 <HAL_DMA_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000b84:	f7ff ff6d 	bl	8000a62 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	200003ac 	.word	0x200003ac
 8000bac:	40026410 	.word	0x40026410

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <HAL_InitTick+0xe8>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_InitTick+0xe8>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_InitTick+0xe8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fe30 	bl	800484c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf6:	f003 fe15 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bfe:	f003 fe11 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <HAL_InitTick+0xec>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	3b01      	subs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c40:	f003 fe36 	bl	80048b0 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c54:	f003 fe86 	bl	8004964 <HAL_TIM_Base_Start_IT>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d111      	bne.n	8000c8a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c66:	201c      	movs	r0, #28
 8000c68:	f001 f864 	bl	8001d34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d808      	bhi.n	8000c84 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	201c      	movs	r0, #28
 8000c78:	f001 f840 	bl	8001cfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_InitTick+0xf4>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e002      	b.n	8000c8a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3738      	adds	r7, #56	; 0x38
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	20000818 	.word	0x20000818
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM2_IRQHandler+0x10>)
 8000cda:	f003 feb3 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000818 	.word	0x20000818

08000ce8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA2_Stream0_IRQHandler+0x10>)
 8000cee:	f001 f9a5 	bl	800203c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200003ac 	.word	0x200003ac

08000cfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <ETH_IRQHandler+0x10>)
 8000d02:	f002 f833 	bl	8002d6c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20005388 	.word	0x20005388

08000d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	return 1;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_kill>:

int _kill(int pid, int sig)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_kill+0x20>)
 8000d2c:	2216      	movs	r2, #22
 8000d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	2000cab4 	.word	0x2000cab4

08000d44 <_exit>:

void _exit (int status)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ffe5 	bl	8000d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d56:	e7fe      	b.n	8000d56 <_exit+0x12>

08000d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e00a      	b.n	8000d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d6a:	f3af 8000 	nop.w
 8000d6e:	4601      	mov	r1, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf0      	blt.n	8000d6a <_read+0x12>
	}

return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e009      	b.n	8000db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf1      	blt.n	8000da4 <_write+0x12>
	}
	return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_close>:

int _close(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df2:	605a      	str	r2, [r3, #4]
	return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d205      	bcs.n	8000e70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <_sbrk+0x6c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	20030000 	.word	0x20030000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	20000860 	.word	0x20000860
 8000e9c:	2000cab8 	.word	0x2000cab8
 8000ea0:	2000cab4 	.word	0x2000cab4

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f012 f969 	bl	80131cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb65 	bl	80005c8 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000f0c:	08017004 	.word	0x08017004
  ldr r2, =_sbss
 8000f10:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000f14:	2000cab8 	.word	0x2000cab8

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>

08000f1a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <LAN8742_RegisterBusIO+0x28>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <LAN8742_RegisterBusIO+0x28>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <LAN8742_RegisterBusIO+0x28>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e014      	b.n	8000f72 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d17c      	bne.n	8001098 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e01c      	b.n	8000ff2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f107 0208 	add.w	r2, r7, #8
 8000fc0:	2112      	movs	r1, #18
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	4798      	blx	r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da03      	bge.n	8000fd4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000fcc:	f06f 0304 	mvn.w	r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000fd2:	e00b      	b.n	8000fec <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d105      	bne.n	8000fec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
         break;
 8000fea:	e005      	b.n	8000ff8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b1f      	cmp	r3, #31
 8000ff6:	d9df      	bls.n	8000fb8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b1f      	cmp	r3, #31
 8000ffe:	d902      	bls.n	8001006 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001000:	f06f 0302 	mvn.w	r3, #2
 8001004:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d145      	bne.n	8001098 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6810      	ldr	r0, [r2, #0]
 8001014:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001018:	2100      	movs	r1, #0
 800101a:	4798      	blx	r3
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	db37      	blt.n	8001092 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6810      	ldr	r0, [r2, #0]
 800102a:	f107 0208 	add.w	r2, r7, #8
 800102e:	2100      	movs	r1, #0
 8001030:	4798      	blx	r3
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	db28      	blt.n	800108a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4798      	blx	r3
 800103e:	4603      	mov	r3, r0
 8001040:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001042:	e01c      	b.n	800107e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4798      	blx	r3
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001056:	d80e      	bhi.n	8001076 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6810      	ldr	r0, [r2, #0]
 8001060:	f107 0208 	add.w	r2, r7, #8
 8001064:	2100      	movs	r1, #0
 8001066:	4798      	blx	r3
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	da07      	bge.n	800107e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800106e:	f06f 0304 	mvn.w	r3, #4
 8001072:	613b      	str	r3, [r7, #16]
                 break;
 8001074:	e010      	b.n	8001098 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001076:	f06f 0301 	mvn.w	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
               break;
 800107c:	e00c      	b.n	8001098 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1dd      	bne.n	8001044 <LAN8742_Init+0xc6>
 8001088:	e006      	b.n	8001098 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800108a:	f06f 0304 	mvn.w	r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	e002      	b.n	8001098 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001092:	f06f 0303 	mvn.w	r3, #3
 8001096:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d112      	bne.n	80010c4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4798      	blx	r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80010a8:	bf00      	nop
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010bc:	d9f5      	bls.n	80010aa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80010c4:	693b      	ldr	r3, [r7, #16]
 }
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6810      	ldr	r0, [r2, #0]
 80010e2:	f107 020c 	add.w	r2, r7, #12
 80010e6:	2101      	movs	r1, #1
 80010e8:	4798      	blx	r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da02      	bge.n	80010f6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010f0:	f06f 0304 	mvn.w	r3, #4
 80010f4:	e06e      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6810      	ldr	r0, [r2, #0]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	2101      	movs	r1, #1
 8001104:	4798      	blx	r3
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	da02      	bge.n	8001112 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800110c:	f06f 0304 	mvn.w	r3, #4
 8001110:	e060      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800111c:	2301      	movs	r3, #1
 800111e:	e059      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6810      	ldr	r0, [r2, #0]
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	2100      	movs	r1, #0
 800112e:	4798      	blx	r3
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	da02      	bge.n	800113c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001136:	f06f 0304 	mvn.w	r3, #4
 800113a:	e04b      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d11b      	bne.n	800117e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <LAN8742_GetLinkState+0x90>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800115a:	2302      	movs	r3, #2
 800115c:	e03a      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001168:	2303      	movs	r3, #3
 800116a:	e033      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001176:	2304      	movs	r3, #4
 8001178:	e02c      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800117a:	2305      	movs	r3, #5
 800117c:	e02a      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6810      	ldr	r0, [r2, #0]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	211f      	movs	r1, #31
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	da02      	bge.n	800119a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001194:	f06f 0304 	mvn.w	r3, #4
 8001198:	e01c      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011a4:	2306      	movs	r3, #6
 80011a6:	e015      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 031c 	and.w	r3, r3, #28
 80011ae:	2b18      	cmp	r3, #24
 80011b0:	d101      	bne.n	80011b6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011b2:	2302      	movs	r3, #2
 80011b4:	e00e      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f003 031c 	and.w	r3, r3, #28
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d101      	bne.n	80011c4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e007      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 031c 	and.w	r3, r3, #28
 80011ca:	2b14      	cmp	r3, #20
 80011cc:	d101      	bne.n	80011d2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011ce:	2304      	movs	r3, #4
 80011d0:	e000      	b.n	80011d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011d2:	2305      	movs	r3, #5
    }				
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 fd6e 	bl	8001ce6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f7ff fcd0 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fc2c 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000864 	.word	0x20000864

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000864 	.word	0x20000864

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e033      	b.n	8001326 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fbfc 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	f043 0202 	orr.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fac8 	bl	8001890 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f023 0303 	bic.w	r3, r3, #3
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	e001      	b.n	800131c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Start_DMA+0x1e>
 800134a:	2302      	movs	r3, #2
 800134c:	e0e9      	b.n	8001522 <HAL_ADC_Start_DMA+0x1f2>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d018      	beq.n	8001396 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001374:	4b6d      	ldr	r3, [pc, #436]	; (800152c <HAL_ADC_Start_DMA+0x1fc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_ADC_Start_DMA+0x200>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9a      	lsrs	r2, r3, #18
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	3b01      	subs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a4:	d107      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 80a1 	bne.w	8001508 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001404:	d106      	bne.n	8001414 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f023 0206 	bic.w	r2, r3, #6
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
 8001412:	e002      	b.n	800141a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_ADC_Start_DMA+0x204>)
 8001424:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	4a43      	ldr	r2, [pc, #268]	; (8001538 <HAL_ADC_Start_DMA+0x208>)
 800142c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	4a42      	ldr	r2, [pc, #264]	; (800153c <HAL_ADC_Start_DMA+0x20c>)
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <HAL_ADC_Start_DMA+0x210>)
 800143c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001446:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001456:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001466:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	334c      	adds	r3, #76	; 0x4c
 8001472:	4619      	mov	r1, r3
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f000 fd18 	bl	8001eac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2b00      	cmp	r3, #0
 8001486:	d12a      	bne.n	80014de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_ADC_Start_DMA+0x214>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d015      	beq.n	80014be <HAL_ADC_Start_DMA+0x18e>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <HAL_ADC_Start_DMA+0x218>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_Start_DMA+0x178>
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_ADC_Start_DMA+0x204>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00a      	beq.n	80014be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_ADC_Start_DMA+0x21c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d136      	bne.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_ADC_Start_DMA+0x204>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d130      	bne.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d129      	bne.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e020      	b.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <HAL_ADC_Start_DMA+0x214>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d11b      	bne.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d114      	bne.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e00b      	b.n	8001520 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f043 0210 	orr.w	r2, r3, #16
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000
 8001530:	431bde83 	.word	0x431bde83
 8001534:	40012300 	.word	0x40012300
 8001538:	08001a89 	.word	0x08001a89
 800153c:	08001b43 	.word	0x08001b43
 8001540:	08001b5f 	.word	0x08001b5f
 8001544:	40012000 	.word	0x40012000
 8001548:	40012100 	.word	0x40012100
 800154c:	40012200 	.word	0x40012200

08001550 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ADC_Stop_DMA+0x1a>
 8001566:	2302      	movs	r3, #2
 8001568:	e048      	b.n	80015fc <HAL_ADC_Stop_DMA+0xac>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d130      	bne.n	80015f2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800159e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d10f      	bne.n	80015ce <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fcd2 	bl	8001f5c <HAL_DMA_Abort>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80015dc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1c>
 8001644:	2302      	movs	r3, #2
 8001646:	e113      	b.n	8001870 <HAL_ADC_ConfigChannel+0x244>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d925      	bls.n	80016a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	3b1e      	subs	r3, #30
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	3b1e      	subs	r3, #30
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e022      	b.n	80016ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	2207      	movs	r2, #7
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4403      	add	r3, r0
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d824      	bhi.n	800173c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b05      	subs	r3, #5
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
 800173a:	e04c      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b23      	subs	r3, #35	; 0x23
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	; 0x23
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
 800178c:	e023      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b41      	subs	r3, #65	; 0x41
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b41      	subs	r3, #65	; 0x41
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_ADC_ConfigChannel+0x250>)
 80017d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <HAL_ADC_ConfigChannel+0x254>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d10f      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1d8>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d10b      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_ADC_ConfigChannel+0x254>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_ADC_ConfigChannel+0x258>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d003      	beq.n	8001820 <HAL_ADC_ConfigChannel+0x1f4>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b11      	cmp	r3, #17
 800181e:	d122      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_ADC_ConfigChannel+0x258>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d111      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_ADC_ConfigChannel+0x25c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_ConfigChannel+0x260>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9a      	lsrs	r2, r3, #18
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001858:	e002      	b.n	8001860 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3b01      	subs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40012300 	.word	0x40012300
 8001880:	40012000 	.word	0x40012000
 8001884:	10000012 	.word	0x10000012
 8001888:	20000000 	.word	0x20000000
 800188c:	431bde83 	.word	0x431bde83

08001890 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001898:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <ADC_Init+0x1f0>)
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	021a      	lsls	r2, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6899      	ldr	r1, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <ADC_Init+0x1f4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001936:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e00f      	b.n	800198e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800197c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0202 	bic.w	r2, r2, #2
 800199c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6899      	ldr	r1, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e1b      	ldrb	r3, [r3, #24]
 80019a8:	005a      	lsls	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	3b01      	subs	r3, #1
 80019e8:	035a      	lsls	r2, r3, #13
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e007      	b.n	8001a04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	051a      	lsls	r2, r3, #20
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a46:	025a      	lsls	r2, r3, #9
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	029a      	lsls	r2, r3, #10
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40012300 	.word	0x40012300
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d13c      	bne.n	8001b1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12b      	bne.n	8001b14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d127      	bne.n	8001b14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d119      	bne.n	8001b14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0220 	bic.w	r2, r2, #32
 8001aee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fecb 	bl	80008b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b1a:	e00e      	b.n	8001b3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fd75 	bl	8001618 <HAL_ADC_ErrorCallback>
}
 8001b2e:	e004      	b.n	8001b3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7ff fd57 	bl	8001604 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f043 0204 	orr.w	r2, r3, #4
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fd4a 	bl	8001618 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff4c 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0e:	f7ff ff61 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f7ff ffb1 	bl	8001c80 <NVIC_EncodePriority>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff80 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff54 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff fa74 	bl	8001248 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e099      	b.n	8001ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8c:	e00f      	b.n	8001dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8e:	f7ff fa5b 	bl	8001248 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d908      	bls.n	8001dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e078      	b.n	8001ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e8      	bne.n	8001d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_DMA_Init+0x158>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	4313      	orrs	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d117      	bne.n	8001e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb33 	bl	80024c0 <DMA_CheckFifoParam>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e016      	b.n	8001ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 faea 	bl	8002454 <DMA_CalcBaseAndBitshift>
 8001e80:	4603      	mov	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	223f      	movs	r2, #63	; 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	f010803f 	.word	0xf010803f

08001eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x26>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e040      	b.n	8001f54 <HAL_DMA_Start_IT+0xa8>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d12f      	bne.n	8001f46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fa7c 	bl	80023f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	223f      	movs	r2, #63	; 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0216 	orr.w	r2, r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff f96d 	bl	8001248 <HAL_GetTick>
 8001f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e052      	b.n	8002034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_Abort+0x62>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	e013      	b.n	8002008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe0:	f7ff f932 	bl	8001248 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d90c      	bls.n	8002008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e015      	b.n	8002034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	223f      	movs	r2, #63	; 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002048:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <HAL_DMA_IRQHandler+0x248>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a8e      	ldr	r2, [pc, #568]	; (8002288 <HAL_DMA_IRQHandler+0x24c>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2208      	movs	r2, #8
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2208      	movs	r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d012      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2204      	movs	r2, #4
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2210      	movs	r2, #16
 800211a:	409a      	lsls	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d043      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03c      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	2210      	movs	r2, #16
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d018      	beq.n	800217e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
 800216a:	e01f      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e016      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2220      	movs	r2, #32
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 808f 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8087 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2220      	movs	r2, #32
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d136      	bne.n	8002254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_IRQHandler+0x1da>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	223f      	movs	r2, #63	; 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07e      	beq.n	8002348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
        }
        return;
 8002252:	e079      	b.n	8002348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	2b00      	cmp	r3, #0
 8002276:	d031      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e02c      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000
 8002288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d023      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e01e      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0210 	bic.w	r2, r2, #16
 80022ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d032      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2205      	movs	r2, #5
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d307      	bcc.n	8002324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f2      	bne.n	8002308 <HAL_DMA_IRQHandler+0x2cc>
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
 8002346:	e000      	b.n	800234a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002348:	bf00      	nop
    }
  }
}
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	460b      	mov	r3, r1
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_DMA_RegisterCallback+0x20>
 800236c:	2302      	movs	r3, #2
 800236e:	e03d      	b.n	80023ec <HAL_DMA_RegisterCallback+0x9c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d12c      	bne.n	80023de <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d826      	bhi.n	80023d8 <HAL_DMA_RegisterCallback+0x88>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_DMA_RegisterCallback+0x40>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a9 	.word	0x080023a9
 8002394:	080023b1 	.word	0x080023b1
 8002398:	080023b9 	.word	0x080023b9
 800239c:	080023c1 	.word	0x080023c1
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	080023d1 	.word	0x080023d1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80023ae:	e018      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80023b6:	e014      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80023be:	e010      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80023d6:	e004      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	75fb      	strb	r3, [r7, #23]
      break;
 80023dc:	e001      	b.n	80023e2 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002414:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d108      	bne.n	8002438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002436:	e007      	b.n	8002448 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3b10      	subs	r3, #16
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <DMA_CalcBaseAndBitshift+0x68>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d909      	bls.n	8002496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	1d1a      	adds	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	e007      	b.n	80024a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	aaaaaaab 	.word	0xaaaaaaab
 80024bc:	08016d6c 	.word	0x08016d6c

080024c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11f      	bne.n	800251a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d856      	bhi.n	800258e <DMA_CheckFifoParam+0xce>
 80024e0:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <DMA_CheckFifoParam+0x28>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	0800250b 	.word	0x0800250b
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	0800258f 	.word	0x0800258f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d046      	beq.n	8002592 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e043      	b.n	8002592 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002512:	d140      	bne.n	8002596 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002518:	e03d      	b.n	8002596 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d121      	bne.n	8002568 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d837      	bhi.n	800259a <DMA_CheckFifoParam+0xda>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x70>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	08002541 	.word	0x08002541
 8002534:	08002547 	.word	0x08002547
 8002538:	08002541 	.word	0x08002541
 800253c:	08002559 	.word	0x08002559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e030      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d025      	beq.n	800259e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002556:	e022      	b.n	800259e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002566:	e01c      	b.n	80025a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d903      	bls.n	8002576 <DMA_CheckFifoParam+0xb6>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d003      	beq.n	800257c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002574:	e018      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      break;
 800257a:	e015      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e00b      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 800258e:	bf00      	nop
 8002590:	e00a      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e008      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e006      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e004      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
    }
  } 
  
  return status; 
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06c      	b.n	80026a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2223      	movs	r2, #35	; 0x23
 80025d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f003 f801 	bl	80055e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_ETH_Init+0xf4>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_ETH_Init+0xf4>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_ETH_Init+0xf4>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_ETH_Init+0xf8>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <HAL_ETH_Init+0xf8>)
 8002604:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002608:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_ETH_Init+0xf8>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4927      	ldr	r1, [pc, #156]	; (80026b0 <HAL_ETH_Init+0xf8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_ETH_Init+0xf8>)
 800261a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002634:	f7fe fe08 	bl	8001248 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800263a:	e011      	b.n	8002660 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800263c:	f7fe fe04 	bl	8001248 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800264a:	d909      	bls.n	8002660 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2204      	movs	r2, #4
 8002650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	22e0      	movs	r2, #224	; 0xe0
 8002658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e021      	b.n	80026a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e4      	bne.n	800263c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 ffaa 	bl	80035cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f001 f851 	bl	8003720 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f001 f8a7 	bl	80037d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 f80f 	bl	80036b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2210      	movs	r2, #16
 800269e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40013800 	.word	0x40013800

080026b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d150      	bne.n	8002768 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2223      	movs	r2, #35	; 0x23
 80026ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fa79 	bl	8002bcc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0208 	orr.w	r2, r2, #8
 80026e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe fdb4 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0204 	orr.w	r2, r2, #4
 800270e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002718:	2001      	movs	r0, #1
 800271a:	f7fe fda1 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fdf1 	bl	800330e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800273e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002742:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	f043 0302 	orr.w	r3, r3, #2
 8002756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800275a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2223      	movs	r2, #35	; 0x23
 8002760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	2b10      	cmp	r3, #16
 8002782:	d17f      	bne.n	8002884 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2223      	movs	r2, #35	; 0x23
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80027a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027b6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80027ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2204      	movs	r2, #4
 80027d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f9f9 	bl	8002bcc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0208 	orr.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe fd34 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0204 	orr.w	r2, r2, #4
 800280e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002818:	2001      	movs	r0, #1
 800281a:	f7fe fd21 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fd71 	bl	800330e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800283e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002842:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800285a:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800286e:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8002872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002876:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2223      	movs	r2, #35	; 0x23
 800287c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289c:	2b23      	cmp	r3, #35	; 0x23
 800289e:	d170      	bne.n	8002982 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2223      	movs	r2, #35	; 0x23
 80028a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80028ba:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80028be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c2:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028da:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	f023 0302 	bic.w	r3, r3, #2
 80028ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028f2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0204 	bic.w	r2, r2, #4
 8002902:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800290c:	2001      	movs	r0, #1
 800290e:	f7fe fca7 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fcf7 	bl	800330e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0208 	bic.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002938:	2001      	movs	r0, #1
 800293a:	f7fe fc91 	bl	8001260 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e00e      	b.n	800296a <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	3212      	adds	r2, #18
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d9ed      	bls.n	800294c <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2210      	movs	r2, #16
 800297a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e045      	b.n	8002a3c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	2b23      	cmp	r3, #35	; 0x23
 80029b8:	d13f      	bne.n	8002a3a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029c2:	2201      	movs	r2, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 ff70 	bl	80038ac <ETH_Prepare_Tx_Descriptors>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e02a      	b.n	8002a3c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029e6:	f3bf 8f4f 	dsb	sy
}
 80029ea:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d904      	bls.n	8002a08 <HAL_ETH_Transmit_IT+0x7c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	1f1a      	subs	r2, r3, #4
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a22:	461a      	mov	r2, r3
 8002a24:	2304      	movs	r3, #4
 8002a26:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0a8      	b.n	8002bc2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a76:	2b23      	cmp	r3, #35	; 0x23
 8002a78:	d001      	beq.n	8002a7e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0a1      	b.n	8002bc2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	3212      	adds	r2, #18
 8002a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a94:	f1c3 0304 	rsb	r3, r3, #4
 8002a98:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a9a:	e06a      	b.n	8002b72 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_ETH_ReadData+0x88>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d040      	beq.n	8002b4e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b00:	3b04      	subs	r3, #4
 8002b02:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b28:	461a      	mov	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f002 ff33 	bl	8005998 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d902      	bls.n	8002b60 <HAL_ETH_ReadData+0x11c>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	3212      	adds	r2, #18
 8002b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db06      	blt.n	8002b88 <HAL_ETH_ReadData+0x144>
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d202      	bcs.n	8002b88 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d089      	beq.n	8002a9c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f815 	bl	8002bcc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	3212      	adds	r2, #18
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002bf4:	e040      	b.n	8002c78 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d112      	bne.n	8002c24 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fe98 	bl	8005938 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	74fb      	strb	r3, [r7, #19]
 8002c12:	e007      	b.n	8002c24 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	461a      	mov	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d026      	beq.n	8002c78 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <ETH_UpdateDescriptor+0xe4>)
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	e003      	b.n	8002c42 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002c40:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c42:	f3bf 8f5f 	dmb	sy
}
 8002c46:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	3301      	adds	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d902      	bls.n	8002c66 <ETH_UpdateDescriptor+0x9a>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3b04      	subs	r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	3212      	adds	r2, #18
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <ETH_UpdateDescriptor+0xb8>
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1b8      	bne.n	8002bf6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d00c      	beq.n	8002ca8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c96:	461a      	mov	r2, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	800045f8 	.word	0x800045f8

08002cb4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3318      	adds	r3, #24
 8002cc0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002cd2:	e03f      	b.n	8002d54 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002cfc:	7bbb      	ldrb	r3, [r7, #14]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68d9      	ldr	r1, [r3, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db1b      	blt.n	8002d50 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fe77 	bl	8005a18 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d4e:	e001      	b.n	8002d54 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_ETH_ReleaseTxPacket+0xac>
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1b9      	bne.n	8002cd4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d112      	bne.n	8002dac <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d109      	bne.n	8002dac <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_ETH_IRQHandler+0x178>)
 8002da4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f002 f980 	bl	80050ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d113      	bne.n	8002de6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10a      	bne.n	8002de6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002dde:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f002 f973 	bl	80050cc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df8:	d14c      	bne.n	8002e94 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0c:	d142      	bne.n	8002e94 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f043 0208 	orr.w	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e30:	d11a      	bne.n	8002e68 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_ETH_IRQHandler+0x17c>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e5c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	22e0      	movs	r2, #224	; 0xe0
 8002e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002e66:	e012      	b.n	8002e8e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	f248 6380 	movw	r3, #34432	; 0x8680
 8002e76:	4013      	ands	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e86:	461a      	mov	r2, r3
 8002e88:	f248 6380 	movw	r3, #34432	; 0x8680
 8002e8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f002 f92c 	bl	80050ec <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f81c 	bl	8002ef0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_ETH_IRQHandler+0x180>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_ETH_IRQHandler+0x180>)
 8002ece:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ed2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f815 	bl	8002f04 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	00010040 	.word	0x00010040
 8002ee8:	007e2000 	.word	0x007e2000
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 031c 	and.w	r3, r3, #28
 8002f34:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	02db      	lsls	r3, r3, #11
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0302 	bic.w	r3, r3, #2
 8002f56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f68:	f7fe f96e 	bl	8001248 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f6e:	e00d      	b.n	8002f8c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f70:	f7fe f96a 	bl	8001248 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d301      	bcc.n	8002f84 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e010      	b.n	8002fa6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ec      	bne.n	8002f70 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 031c 	and.w	r3, r3, #28
 8002fca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	02db      	lsls	r3, r3, #11
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003008:	f7fe f91e 	bl	8001248 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800300e:	e00d      	b.n	800302c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003010:	f7fe f91a 	bl	8001248 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d301      	bcc.n	8003024 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e009      	b.n	8003038 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ec      	bne.n	8003010 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d9      	b.n	8003208 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00b      	b.n	8003240 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322e:	2b10      	cmp	r3, #16
 8003230:	d105      	bne.n	800323e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003232:	6839      	ldr	r1, [r7, #0]
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f88f 	bl	8003358 <ETH_SetMACConfig>

    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 031c 	bic.w	r3, r3, #28
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003260:	f001 fad4 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8003264:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d908      	bls.n	8003280 <HAL_ETH_SetMDIOClockRange+0x38>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d804      	bhi.n	8003280 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e027      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d908      	bls.n	800329a <HAL_ETH_SetMDIOClockRange+0x52>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d204      	bcs.n	800329a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f043 030c 	orr.w	r3, r3, #12
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e01a      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d303      	bcc.n	80032aa <HAL_ETH_SetMDIOClockRange+0x62>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4a11      	ldr	r2, [pc, #68]	; (80032ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d911      	bls.n	80032ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d908      	bls.n	80032c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d804      	bhi.n	80032c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e005      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e000      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80032ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	611a      	str	r2, [r3, #16]
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	01312cff 	.word	0x01312cff
 80032e4:	02160ebf 	.word	0x02160ebf
 80032e8:	03938700 	.word	0x03938700
 80032ec:	05f5e0ff 	.word	0x05f5e0ff
 80032f0:	08f0d17f 	.word	0x08f0d17f

080032f4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003330:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800333e:	2001      	movs	r0, #1
 8003340:	f7fd ff8e 	bl	8001260 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800334e:	6193      	str	r3, [r2, #24]
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <ETH_SetMACConfig+0x15c>)
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	7c1b      	ldrb	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <ETH_SetMACConfig+0x28>
 800337a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800337e:	e000      	b.n	8003382 <ETH_SetMACConfig+0x2a>
 8003380:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7c5b      	ldrb	r3, [r3, #17]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <ETH_SetMACConfig+0x38>
 800338a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338e:	e000      	b.n	8003392 <ETH_SetMACConfig+0x3a>
 8003390:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003392:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003398:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	7fdb      	ldrb	r3, [r3, #31]
 800339e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	7f92      	ldrb	r2, [r2, #30]
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d102      	bne.n	80033b6 <ETH_SetMACConfig+0x5e>
 80033b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033b4:	e000      	b.n	80033b8 <ETH_SetMACConfig+0x60>
 80033b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80033b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	7f1b      	ldrb	r3, [r3, #28]
 80033be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	791b      	ldrb	r3, [r3, #4]
 80033cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80033ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d102      	bne.n	80033e0 <ETH_SetMACConfig+0x88>
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	e000      	b.n	80033e2 <ETH_SetMACConfig+0x8a>
 80033e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7bdb      	ldrb	r3, [r3, #15]
 80033e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033fa:	4313      	orrs	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003412:	2001      	movs	r0, #1
 8003414:	f7fd ff24 	bl	8001260 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800342e:	4013      	ands	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003436:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800343e:	2a00      	cmp	r2, #0
 8003440:	d101      	bne.n	8003446 <ETH_SetMACConfig+0xee>
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	e000      	b.n	8003448 <ETH_SetMACConfig+0xf0>
 8003446:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003448:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800344e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003456:	2a01      	cmp	r2, #1
 8003458:	d101      	bne.n	800345e <ETH_SetMACConfig+0x106>
 800345a:	2208      	movs	r2, #8
 800345c:	e000      	b.n	8003460 <ETH_SetMACConfig+0x108>
 800345e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003460:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003468:	2a01      	cmp	r2, #1
 800346a:	d101      	bne.n	8003470 <ETH_SetMACConfig+0x118>
 800346c:	2204      	movs	r2, #4
 800346e:	e000      	b.n	8003472 <ETH_SetMACConfig+0x11a>
 8003470:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003472:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800347a:	2a01      	cmp	r2, #1
 800347c:	d101      	bne.n	8003482 <ETH_SetMACConfig+0x12a>
 800347e:	2202      	movs	r2, #2
 8003480:	e000      	b.n	8003484 <ETH_SetMACConfig+0x12c>
 8003482:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003484:	4313      	orrs	r3, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800349c:	2001      	movs	r0, #1
 800349e:	f7fd fedf 	bl	8001260 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	ff20810f 	.word	0xff20810f

080034b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <ETH_SetDMAConfig+0x110>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7b1b      	ldrb	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <ETH_SetDMAConfig+0x2c>
 80034de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034e2:	e000      	b.n	80034e6 <ETH_SetDMAConfig+0x2e>
 80034e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	7b5b      	ldrb	r3, [r3, #13]
 80034ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	7f52      	ldrb	r2, [r2, #29]
 80034f2:	2a00      	cmp	r2, #0
 80034f4:	d102      	bne.n	80034fc <ETH_SetDMAConfig+0x44>
 80034f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034fa:	e000      	b.n	80034fe <ETH_SetDMAConfig+0x46>
 80034fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	7b9b      	ldrb	r3, [r3, #14]
 8003504:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003506:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800350c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	7f1b      	ldrb	r3, [r3, #28]
 8003512:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003514:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	7f9b      	ldrb	r3, [r3, #30]
 800351a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800351c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003522:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800352a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800352c:	4313      	orrs	r3, r2
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353c:	461a      	mov	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800354e:	2001      	movs	r0, #1
 8003550:	f7fd fe86 	bl	8001260 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	791b      	ldrb	r3, [r3, #4]
 8003566:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800356c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003572:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003578:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003580:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003582:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800358a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003590:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800359a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800359e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fd fe57 	bl	8001260 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	f8de3f23 	.word	0xf8de3f23

080035cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0a6      	sub	sp, #152	; 0x98
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80035e0:	2300      	movs	r3, #0
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003608:	2300      	movs	r3, #0
 800360a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003612:	2300      	movs	r3, #0
 8003614:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800362e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003638:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fe86 	bl	8003358 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800364c:	2301      	movs	r3, #1
 800364e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003650:	2301      	movs	r3, #1
 8003652:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800365a:	2301      	movs	r3, #1
 800365c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800366e:	2300      	movs	r3, #0
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003678:	2301      	movs	r3, #1
 800367a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800367c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003680:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003686:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800368c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff08 	bl	80034b8 <ETH_SetDMAConfig>
}
 80036a8:	bf00      	nop
 80036aa:	3798      	adds	r7, #152	; 0x98
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3305      	adds	r3, #5
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	3204      	adds	r2, #4
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <ETH_MACAddressConfig+0x68>)
 80036d2:	4413      	add	r3, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3303      	adds	r3, #3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	061a      	lsls	r2, r3, #24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3302      	adds	r3, #2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	4313      	orrs	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <ETH_MACAddressConfig+0x6c>)
 8003702:	4413      	add	r3, r2
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6013      	str	r3, [r2, #0]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40028040 	.word	0x40028040
 800371c:	40028044 	.word	0x40028044

08003720 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e03e      	b.n	80037ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68d9      	ldr	r1, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	3206      	adds	r2, #6
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d80c      	bhi.n	8003790 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e004      	b.n	800379a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	461a      	mov	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d9bd      	bls.n	800372e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c4:	611a      	str	r2, [r3, #16]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e046      	b.n	800386e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6919      	ldr	r1, [r3, #16]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800381c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003824:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	3212      	adds	r2, #18
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d80c      	bhi.n	800385e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6919      	ldr	r1, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e004      	b.n	8003868 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	461a      	mov	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d9b5      	bls.n	80037e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	60da      	str	r2, [r3, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b08d      	sub	sp, #52	; 0x34
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3318      	adds	r3, #24
 80038bc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ee:	d007      	beq.n	8003900 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	3304      	adds	r3, #4
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	e103      	b.n	8003b0c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	3301      	adds	r3, #1
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800391c:	f023 031f 	bic.w	r3, r3, #31
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	6852      	ldr	r2, [r2, #4]
 8003924:	431a      	orrs	r2, r3
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	431a      	orrs	r2, r3
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800398a:	f3bf 8f5f 	dmb	sy
}
 800398e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800399c:	e084      	b.n	8003aa8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	3301      	adds	r3, #1
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d902      	bls.n	80039dc <ETH_Prepare_Tx_Descriptors+0x130>
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	3b04      	subs	r3, #4
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fe:	d007      	beq.n	8003a10 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	3304      	adds	r3, #4
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d029      	beq.n	8003a64 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a22:	e019      	b.n	8003a58 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003a24:	f3bf 8f5f 	dmb	sy
}
 8003a28:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	3301      	adds	r3, #1
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d902      	bls.n	8003a48 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	3b04      	subs	r3, #4
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	3301      	adds	r3, #1
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3e1      	bcc.n	8003a24 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a60:	2302      	movs	r3, #2
 8003a62:	e053      	b.n	8003b0c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	3301      	adds	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003a82:	f023 031f 	bic.w	r3, r3, #31
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	6852      	ldr	r2, [r2, #4]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003a96:	f3bf 8f5f 	dmb	sy
}
 8003a9a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af76 	bne.w	800399e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e005      	b.n	8003ad2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
}
 8003af6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4413      	add	r3, r2
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003b06:	b662      	cpsie	i
}
 8003b08:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3734      	adds	r7, #52	; 0x34
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e177      	b.n	8003e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 8166 	bne.w	8003e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d130      	bne.n	8003bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 0201 	and.w	r2, r3, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d017      	beq.n	8003c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d123      	bne.n	8003c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80c0 	beq.w	8003e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b66      	ldr	r3, [pc, #408]	; (8003e3c <HAL_GPIO_Init+0x324>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_GPIO_Init+0x324>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_GPIO_Init+0x324>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cba:	4a61      	ldr	r2, [pc, #388]	; (8003e40 <HAL_GPIO_Init+0x328>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_GPIO_Init+0x32c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d037      	beq.n	8003d56 <HAL_GPIO_Init+0x23e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <HAL_GPIO_Init+0x330>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_GPIO_Init+0x23a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d02b      	beq.n	8003d4e <HAL_GPIO_Init+0x236>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a55      	ldr	r2, [pc, #340]	; (8003e50 <HAL_GPIO_Init+0x338>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d025      	beq.n	8003d4a <HAL_GPIO_Init+0x232>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_GPIO_Init+0x33c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x22e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a53      	ldr	r2, [pc, #332]	; (8003e58 <HAL_GPIO_Init+0x340>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x22a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a52      	ldr	r2, [pc, #328]	; (8003e5c <HAL_GPIO_Init+0x344>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x226>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <HAL_GPIO_Init+0x348>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_GPIO_Init+0x34c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x21e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_GPIO_Init+0x350>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x21a>
 8003d2e:	2309      	movs	r3, #9
 8003d30:	e012      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d32:	230a      	movs	r3, #10
 8003d34:	e010      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d36:	2308      	movs	r3, #8
 8003d38:	e00e      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e00c      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d3e:	2306      	movs	r3, #6
 8003d40:	e00a      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d42:	2305      	movs	r3, #5
 8003d44:	e008      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d46:	2304      	movs	r3, #4
 8003d48:	e006      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e004      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e002      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_GPIO_Init+0x240>
 8003d56:	2300      	movs	r3, #0
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f002 0203 	and.w	r2, r2, #3
 8003d5e:	0092      	lsls	r2, r2, #2
 8003d60:	4093      	lsls	r3, r2
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d68:	4935      	ldr	r1, [pc, #212]	; (8003e40 <HAL_GPIO_Init+0x328>)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	3302      	adds	r3, #2
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d9a:	4a34      	ldr	r2, [pc, #208]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <HAL_GPIO_Init+0x354>)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	f67f ae84 	bls.w	8003b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40020000 	.word	0x40020000
 8003e48:	40020400 	.word	0x40020400
 8003e4c:	40020800 	.word	0x40020800
 8003e50:	40020c00 	.word	0x40020c00
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40021400 	.word	0x40021400
 8003e5c:	40021800 	.word	0x40021800
 8003e60:	40021c00 	.word	0x40021c00
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40022400 	.word	0x40022400
 8003e6c:	40013c00 	.word	0x40013c00

08003e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e80:	787b      	ldrb	r3, [r7, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e8c:	e003      	b.n	8003e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	619a      	str	r2, [r3, #24]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed0:	f7fd f9ba 	bl	8001248 <HAL_GetTick>
 8003ed4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed6:	e009      	b.n	8003eec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ed8:	f7fd f9b6 	bl	8001248 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee6:	d901      	bls.n	8003eec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e01f      	b.n	8003f2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f00:	f7fd f9a2 	bl	8001248 <HAL_GetTick>
 8003f04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f06:	e009      	b.n	8003f1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f08:	f7fd f99e 	bl	8001248 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f16:	d901      	bls.n	8003f1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e007      	b.n	8003f2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f28:	d1ee      	bne.n	8003f08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800
 8003f38:	420e0040 	.word	0x420e0040
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	420e0044 	.word	0x420e0044

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e267      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d075      	beq.n	800404e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d112      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b82      	ldr	r3, [pc, #520]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	4b7e      	ldr	r3, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05b      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d157      	bne.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e242      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x74>
 8003faa:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a75      	ldr	r2, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x98>
 8003fc2:	4b70      	ldr	r3, [pc, #448]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6f      	ldr	r2, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6c      	ldr	r2, [pc, #432]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	4b69      	ldr	r3, [pc, #420]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a68      	ldr	r2, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f924 	bl	8001248 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fd f920 	bl	8001248 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e207      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8004022:	e014      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd f910 	bl	8001248 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fd f90c 	bl	8001248 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1f3      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	4b51      	ldr	r3, [pc, #324]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d063      	beq.n	8004122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	2b08      	cmp	r3, #8
 8004070:	d11c      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d116      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1c7      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4937      	ldr	r1, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	e03a      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x244>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd f8c5 	bl	8001248 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd f8c1 	bl	8001248 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1a8      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4925      	ldr	r1, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	e015      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_RCC_OscConfig+0x244>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd f8a4 	bl	8001248 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004104:	f7fd f8a0 	bl	8001248 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e187      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d036      	beq.n	800419c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_RCC_OscConfig+0x248>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd f884 	bl	8001248 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004144:	f7fd f880 	bl	8001248 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e167      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x200>
 8004162:	e01b      	b.n	800419c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_OscConfig+0x248>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7fd f86d 	bl	8001248 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	e00e      	b.n	8004190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004172:	f7fd f869 	bl	8001248 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d907      	bls.n	8004190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e150      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 8004184:	40023800 	.word	0x40023800
 8004188:	42470000 	.word	0x42470000
 800418c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ea      	bne.n	8004172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8097 	beq.w	80042d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ae:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b7d      	ldr	r3, [pc, #500]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a7c      	ldr	r2, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b7a      	ldr	r3, [pc, #488]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b77      	ldr	r3, [pc, #476]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d118      	bne.n	8004218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e6:	4b74      	ldr	r3, [pc, #464]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fd f829 	bl	8001248 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fd f825 	bl	8001248 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e10c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x2ea>
 8004220:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a63      	ldr	r2, [pc, #396]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	e01c      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x30c>
 8004236:	4b5f      	ldr	r3, [pc, #380]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	4b5c      	ldr	r3, [pc, #368]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a5b      	ldr	r2, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a57      	ldr	r2, [pc, #348]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	4b55      	ldr	r3, [pc, #340]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a54      	ldr	r2, [pc, #336]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fc ffea 	bl	8001248 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fc ffe6 	bl	8001248 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0cb      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ee      	beq.n	8004278 <HAL_RCC_OscConfig+0x334>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fc ffd4 	bl	8001248 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fc ffd0 	bl	8001248 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b5      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ee      	bne.n	80042a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a1 	beq.w	8004424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e2:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d05c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d141      	bne.n	800437a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fc ffa4 	bl	8001248 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fc ffa0 	bl	8001248 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e087      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	3b01      	subs	r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	491b      	ldr	r1, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fc ff79 	bl	8001248 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7fc ff75 	bl	8001248 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e05c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x416>
 8004378:	e054      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fc ff62 	bl	8001248 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004388:	f7fc ff5e 	bl	8001248 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e045      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x444>
 80043a6:	e03d      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e038      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40007000 	.word	0x40007000
 80043bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x4ec>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d028      	beq.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d121      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11a      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f0:	4013      	ands	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	3b01      	subs	r3, #1
 800440a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d107      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0cc      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90c      	bls.n	8004470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d044      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e067      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4934      	ldr	r1, [pc, #208]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fc fe90 	bl	8001248 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fc fe8c 	bl	8001248 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f821 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fae8 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08016d54 	.word	0x08016d54
 80045f8:	20000000 	.word	0x20000000
 80045fc:	20000004 	.word	0x20000004

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b094      	sub	sp, #80	; 0x50
 8004606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	2300      	movs	r3, #0
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d00d      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x40>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f200 80e1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x34>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x3a>
 8004632:	e0db      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004638:	e0db      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463a:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCC_GetSysClockFreq+0x208>)
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463e:	e0d8      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	2200      	movs	r2, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4621      	mov	r1, r4
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	6139      	str	r1, [r7, #16]
 8004690:	4629      	mov	r1, r5
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ae:	4651      	mov	r1, sl
 80046b0:	018a      	lsls	r2, r1, #6
 80046b2:	4651      	mov	r1, sl
 80046b4:	ebb2 0801 	subs.w	r8, r2, r1
 80046b8:	4659      	mov	r1, fp
 80046ba:	eb63 0901 	sbc.w	r9, r3, r1
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d2:	4690      	mov	r8, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	eb18 0303 	adds.w	r3, r8, r3
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	462b      	mov	r3, r5
 80046e0:	eb49 0303 	adc.w	r3, r9, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f2:	4629      	mov	r1, r5
 80046f4:	024b      	lsls	r3, r1, #9
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046fc:	4621      	mov	r1, r4
 80046fe:	024a      	lsls	r2, r1, #9
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004710:	f7fb fdbe 	bl	8000290 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	e058      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	4618      	mov	r0, r3
 8004728:	4611      	mov	r1, r2
 800472a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	0159      	lsls	r1, r3, #5
 8004746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474a:	0150      	lsls	r0, r2, #5
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4641      	mov	r1, r8
 8004752:	ebb2 0a01 	subs.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb63 0b01 	sbc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800476c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004770:	ebb2 040a 	subs.w	r4, r2, sl
 8004774:	eb63 050b 	sbc.w	r5, r3, fp
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	00eb      	lsls	r3, r5, #3
 8004782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004786:	00e2      	lsls	r2, r4, #3
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	4643      	mov	r3, r8
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	464b      	mov	r3, r9
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	f7fb fd64 	bl	8000290 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3750      	adds	r7, #80	; 0x50
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000000 	.word	0x20000000

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	08016d64 	.word	0x08016d64

0800484c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	220f      	movs	r2, #15
 800485a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0203 	and.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <HAL_RCC_GetClockConfig+0x5c>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCC_GetClockConfig+0x60>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40023c00 	.word	0x40023c00

080048b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e041      	b.n	8004946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f839 	bl	800494e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f000 f9d8 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e04e      	b.n	8004a1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a23      	ldr	r2, [pc, #140]	; (8004a28 <HAL_TIM_Base_Start_IT+0xc4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d01d      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <HAL_TIM_Base_Start_IT+0xcc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_TIM_Base_Start_IT+0xd0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d111      	bne.n	8004a08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d010      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	e007      	b.n	8004a18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40001800 	.word	0x40001800

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8ee 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8e0 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8f1 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8c4 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8b6 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8c7 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f89a 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f88c 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f89d 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f870 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f862 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f873 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fb ff3e 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f902 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f838 	bl	8004c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8cc 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a40      	ldr	r2, [pc, #256]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3d      	ldr	r2, [pc, #244]	; (8004dbc <TIM_Base_SetConfig+0x118>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3c      	ldr	r2, [pc, #240]	; (8004dc0 <TIM_Base_SetConfig+0x11c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3b      	ldr	r2, [pc, #236]	; (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d027      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <TIM_Base_SetConfig+0x118>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d023      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <TIM_Base_SetConfig+0x11c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a29      	ldr	r2, [pc, #164]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <TIM_Base_SetConfig+0x128>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <TIM_Base_SetConfig+0x134>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <TIM_Base_SetConfig+0x138>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0xf8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800
 8004dd8:	40001800 	.word	0x40001800
 8004ddc:	40001c00 	.word	0x40001c00
 8004de0:	40002000 	.word	0x40002000

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004e12:	4b96      	ldr	r3, [pc, #600]	; (800506c <MX_LWIP_Init+0x260>)
 8004e14:	22c0      	movs	r2, #192	; 0xc0
 8004e16:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004e18:	4b94      	ldr	r3, [pc, #592]	; (800506c <MX_LWIP_Init+0x260>)
 8004e1a:	22a8      	movs	r2, #168	; 0xa8
 8004e1c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004e1e:	4b93      	ldr	r3, [pc, #588]	; (800506c <MX_LWIP_Init+0x260>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8004e24:	4b91      	ldr	r3, [pc, #580]	; (800506c <MX_LWIP_Init+0x260>)
 8004e26:	2202      	movs	r2, #2
 8004e28:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <MX_LWIP_Init+0x264>)
 8004e2c:	22ff      	movs	r2, #255	; 0xff
 8004e2e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e30:	4b8f      	ldr	r3, [pc, #572]	; (8005070 <MX_LWIP_Init+0x264>)
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004e36:	4b8e      	ldr	r3, [pc, #568]	; (8005070 <MX_LWIP_Init+0x264>)
 8004e38:	22ff      	movs	r2, #255	; 0xff
 8004e3a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e3c:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <MX_LWIP_Init+0x264>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004e42:	4b8c      	ldr	r3, [pc, #560]	; (8005074 <MX_LWIP_Init+0x268>)
 8004e44:	22c0      	movs	r2, #192	; 0xc0
 8004e46:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004e48:	4b8a      	ldr	r3, [pc, #552]	; (8005074 <MX_LWIP_Init+0x268>)
 8004e4a:	22a8      	movs	r2, #168	; 0xa8
 8004e4c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004e4e:	4b89      	ldr	r3, [pc, #548]	; (8005074 <MX_LWIP_Init+0x268>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004e54:	4b87      	ldr	r3, [pc, #540]	; (8005074 <MX_LWIP_Init+0x268>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f003 fe3d 	bl	8008adc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e62:	4b82      	ldr	r3, [pc, #520]	; (800506c <MX_LWIP_Init+0x260>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	061a      	lsls	r2, r3, #24
 8004e68:	4b80      	ldr	r3, [pc, #512]	; (800506c <MX_LWIP_Init+0x260>)
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	4b7e      	ldr	r3, [pc, #504]	; (800506c <MX_LWIP_Init+0x260>)
 8004e72:	789b      	ldrb	r3, [r3, #2]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	4313      	orrs	r3, r2
 8004e78:	4a7c      	ldr	r2, [pc, #496]	; (800506c <MX_LWIP_Init+0x260>)
 8004e7a:	78d2      	ldrb	r2, [r2, #3]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	061a      	lsls	r2, r3, #24
 8004e80:	4b7a      	ldr	r3, [pc, #488]	; (800506c <MX_LWIP_Init+0x260>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	0619      	lsls	r1, r3, #24
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <MX_LWIP_Init+0x260>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	4319      	orrs	r1, r3
 8004e8e:	4b77      	ldr	r3, [pc, #476]	; (800506c <MX_LWIP_Init+0x260>)
 8004e90:	789b      	ldrb	r3, [r3, #2]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	430b      	orrs	r3, r1
 8004e96:	4975      	ldr	r1, [pc, #468]	; (800506c <MX_LWIP_Init+0x260>)
 8004e98:	78c9      	ldrb	r1, [r1, #3]
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	4b71      	ldr	r3, [pc, #452]	; (800506c <MX_LWIP_Init+0x260>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	0619      	lsls	r1, r3, #24
 8004eaa:	4b70      	ldr	r3, [pc, #448]	; (800506c <MX_LWIP_Init+0x260>)
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	4319      	orrs	r1, r3
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <MX_LWIP_Init+0x260>)
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	496c      	ldr	r1, [pc, #432]	; (800506c <MX_LWIP_Init+0x260>)
 8004ebc:	78c9      	ldrb	r1, [r1, #3]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	4b68      	ldr	r3, [pc, #416]	; (800506c <MX_LWIP_Init+0x260>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	0619      	lsls	r1, r3, #24
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <MX_LWIP_Init+0x260>)
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	4319      	orrs	r1, r3
 8004ed6:	4b65      	ldr	r3, [pc, #404]	; (800506c <MX_LWIP_Init+0x260>)
 8004ed8:	789b      	ldrb	r3, [r3, #2]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	430b      	orrs	r3, r1
 8004ede:	4963      	ldr	r1, [pc, #396]	; (800506c <MX_LWIP_Init+0x260>)
 8004ee0:	78c9      	ldrb	r1, [r1, #3]
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	4a63      	ldr	r2, [pc, #396]	; (8005078 <MX_LWIP_Init+0x26c>)
 8004eea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <MX_LWIP_Init+0x264>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	061a      	lsls	r2, r3, #24
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <MX_LWIP_Init+0x264>)
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <MX_LWIP_Init+0x264>)
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	4313      	orrs	r3, r2
 8004f02:	4a5b      	ldr	r2, [pc, #364]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f04:	78d2      	ldrb	r2, [r2, #3]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	061a      	lsls	r2, r3, #24
 8004f0a:	4b59      	ldr	r3, [pc, #356]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	0619      	lsls	r1, r3, #24
 8004f10:	4b57      	ldr	r3, [pc, #348]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4319      	orrs	r1, r3
 8004f18:	4b55      	ldr	r3, [pc, #340]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f1a:	789b      	ldrb	r3, [r3, #2]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	4953      	ldr	r1, [pc, #332]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f22:	78c9      	ldrb	r1, [r1, #3]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	4b50      	ldr	r3, [pc, #320]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	0619      	lsls	r1, r3, #24
 8004f34:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	4319      	orrs	r1, r3
 8004f3c:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f3e:	789b      	ldrb	r3, [r3, #2]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	430b      	orrs	r3, r1
 8004f44:	494a      	ldr	r1, [pc, #296]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f46:	78c9      	ldrb	r1, [r1, #3]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f50:	431a      	orrs	r2, r3
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	0619      	lsls	r1, r3, #24
 8004f58:	4b45      	ldr	r3, [pc, #276]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	4319      	orrs	r1, r3
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f62:	789b      	ldrb	r3, [r3, #2]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	430b      	orrs	r3, r1
 8004f68:	4941      	ldr	r1, [pc, #260]	; (8005070 <MX_LWIP_Init+0x264>)
 8004f6a:	78c9      	ldrb	r1, [r1, #3]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	0e1b      	lsrs	r3, r3, #24
 8004f70:	4313      	orrs	r3, r2
 8004f72:	4a42      	ldr	r2, [pc, #264]	; (800507c <MX_LWIP_Init+0x270>)
 8004f74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	061a      	lsls	r2, r3, #24
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f86:	789b      	ldrb	r3, [r3, #2]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	4a39      	ldr	r2, [pc, #228]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f8e:	78d2      	ldrb	r2, [r2, #3]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	061a      	lsls	r2, r3, #24
 8004f94:	4b37      	ldr	r3, [pc, #220]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	0619      	lsls	r1, r3, #24
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <MX_LWIP_Init+0x268>)
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	4319      	orrs	r1, r3
 8004fa2:	4b34      	ldr	r3, [pc, #208]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	4932      	ldr	r1, [pc, #200]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fac:	78c9      	ldrb	r1, [r1, #3]
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	0619      	lsls	r1, r3, #24
 8004fbe:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	4319      	orrs	r1, r3
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fc8:	789b      	ldrb	r3, [r3, #2]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	4929      	ldr	r1, [pc, #164]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fd0:	78c9      	ldrb	r1, [r1, #3]
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	0619      	lsls	r1, r3, #24
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	4319      	orrs	r1, r3
 8004fea:	4b22      	ldr	r3, [pc, #136]	; (8005074 <MX_LWIP_Init+0x268>)
 8004fec:	789b      	ldrb	r3, [r3, #2]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	4920      	ldr	r1, [pc, #128]	; (8005074 <MX_LWIP_Init+0x268>)
 8004ff4:	78c9      	ldrb	r1, [r1, #3]
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	0e1b      	lsrs	r3, r3, #24
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <MX_LWIP_Init+0x274>)
 8004ffe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <MX_LWIP_Init+0x278>)
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <MX_LWIP_Init+0x27c>)
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <MX_LWIP_Init+0x274>)
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <MX_LWIP_Init+0x270>)
 8005010:	4919      	ldr	r1, [pc, #100]	; (8005078 <MX_LWIP_Init+0x26c>)
 8005012:	481e      	ldr	r0, [pc, #120]	; (800508c <MX_LWIP_Init+0x280>)
 8005014:	f004 fb2c 	bl	8009670 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005018:	481c      	ldr	r0, [pc, #112]	; (800508c <MX_LWIP_Init+0x280>)
 800501a:	f004 fcdb 	bl	80099d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800501e:	4b1b      	ldr	r3, [pc, #108]	; (800508c <MX_LWIP_Init+0x280>)
 8005020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005024:	089b      	lsrs	r3, r3, #2
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005030:	4816      	ldr	r0, [pc, #88]	; (800508c <MX_LWIP_Init+0x280>)
 8005032:	f004 fcdf 	bl	80099f4 <netif_set_up>
 8005036:	e002      	b.n	800503e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005038:	4814      	ldr	r0, [pc, #80]	; (800508c <MX_LWIP_Init+0x280>)
 800503a:	f004 fd47 	bl	8009acc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800503e:	4914      	ldr	r1, [pc, #80]	; (8005090 <MX_LWIP_Init+0x284>)
 8005040:	4812      	ldr	r0, [pc, #72]	; (800508c <MX_LWIP_Init+0x280>)
 8005042:	f004 fdd9 	bl	8009bf8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <MX_LWIP_Init+0x288>)
 8005048:	1d3c      	adds	r4, r7, #4
 800504a:	461d      	mov	r5, r3
 800504c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	490c      	ldr	r1, [pc, #48]	; (800508c <MX_LWIP_Init+0x280>)
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fd27 	bl	8005ab0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005062:	bf00      	nop
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bdb0      	pop	{r4, r5, r7, pc}
 800506a:	bf00      	nop
 800506c:	200008a8 	.word	0x200008a8
 8005070:	200008ac 	.word	0x200008ac
 8005074:	200008b0 	.word	0x200008b0
 8005078:	2000089c 	.word	0x2000089c
 800507c:	200008a0 	.word	0x200008a0
 8005080:	200008a4 	.word	0x200008a4
 8005084:	08008a19 	.word	0x08008a19
 8005088:	08005539 	.word	0x08005539
 800508c:	20000868 	.word	0x20000868
 8005090:	08005099 	.word	0x08005099
 8005094:	08014230 	.word	0x08014230

08005098 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fe43 	bl	8005d44 <osSemaphoreRelease>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20005380 	.word	0x20005380

080050cc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <HAL_ETH_TxCpltCallback+0x1c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fe33 	bl	8005d44 <osSemaphoreRelease>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20005384 	.word	0x20005384

080050ec <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fe f8fd 	bl	80032f4 <HAL_ETH_GetDMAError>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b80      	cmp	r3, #128	; 0x80
 8005102:	d104      	bne.n	800510e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_ETH_ErrorCallback+0x2c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fe1b 	bl	8005d44 <osSemaphoreRelease>
  }
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20005380 	.word	0x20005380

0800511c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800511c:	b5b0      	push	{r4, r5, r7, lr}
 800511e:	b0a8      	sub	sp, #160	; 0xa0
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800513a:	2264      	movs	r2, #100	; 0x64
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f00e f889 	bl	8013256 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005144:	4b85      	ldr	r3, [pc, #532]	; (800535c <low_level_init+0x240>)
 8005146:	4a86      	ldr	r2, [pc, #536]	; (8005360 <low_level_init+0x244>)
 8005148:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800514a:	2300      	movs	r3, #0
 800514c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005156:	23e1      	movs	r3, #225	; 0xe1
 8005158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800516e:	4a7b      	ldr	r2, [pc, #492]	; (800535c <low_level_init+0x240>)
 8005170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005174:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005176:	4b79      	ldr	r3, [pc, #484]	; (800535c <low_level_init+0x240>)
 8005178:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800517c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800517e:	4b77      	ldr	r3, [pc, #476]	; (800535c <low_level_init+0x240>)
 8005180:	4a78      	ldr	r2, [pc, #480]	; (8005364 <low_level_init+0x248>)
 8005182:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005184:	4b75      	ldr	r3, [pc, #468]	; (800535c <low_level_init+0x240>)
 8005186:	4a78      	ldr	r2, [pc, #480]	; (8005368 <low_level_init+0x24c>)
 8005188:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <low_level_init+0x240>)
 800518c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005190:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005192:	4872      	ldr	r0, [pc, #456]	; (800535c <low_level_init+0x240>)
 8005194:	f7fd fa10 	bl	80025b8 <HAL_ETH_Init>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800519e:	2238      	movs	r2, #56	; 0x38
 80051a0:	2100      	movs	r1, #0
 80051a2:	4872      	ldr	r0, [pc, #456]	; (800536c <low_level_init+0x250>)
 80051a4:	f00e f857 	bl	8013256 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80051a8:	4b70      	ldr	r3, [pc, #448]	; (800536c <low_level_init+0x250>)
 80051aa:	2221      	movs	r2, #33	; 0x21
 80051ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80051ae:	4b6f      	ldr	r3, [pc, #444]	; (800536c <low_level_init+0x250>)
 80051b0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80051b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <low_level_init+0x250>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80051bc:	486c      	ldr	r0, [pc, #432]	; (8005370 <low_level_init+0x254>)
 80051be:	f004 f911 	bl	80093e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2206      	movs	r2, #6
 80051c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80051ca:	4b64      	ldr	r3, [pc, #400]	; (800535c <low_level_init+0x240>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80051d6:	4b61      	ldr	r3, [pc, #388]	; (800535c <low_level_init+0x240>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	785a      	ldrb	r2, [r3, #1]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051e2:	4b5e      	ldr	r3, [pc, #376]	; (800535c <low_level_init+0x240>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	789a      	ldrb	r2, [r3, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051ee:	4b5b      	ldr	r3, [pc, #364]	; (800535c <low_level_init+0x240>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	78da      	ldrb	r2, [r3, #3]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051fa:	4b58      	ldr	r3, [pc, #352]	; (800535c <low_level_init+0x240>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	791a      	ldrb	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005206:	4b55      	ldr	r3, [pc, #340]	; (800535c <low_level_init+0x240>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	795a      	ldrb	r2, [r3, #5]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005218:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005220:	f043 030a 	orr.w	r3, r3, #10
 8005224:	b2da      	uxtb	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800522c:	2203      	movs	r2, #3
 800522e:	2100      	movs	r1, #0
 8005230:	2001      	movs	r0, #1
 8005232:	f001 f82d 	bl	8006290 <xQueueGenericCreate>
 8005236:	4603      	mov	r3, r0
 8005238:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <low_level_init+0x258>)
 800523a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800523c:	2203      	movs	r2, #3
 800523e:	2100      	movs	r1, #0
 8005240:	2001      	movs	r0, #1
 8005242:	f001 f825 	bl	8006290 <xQueueGenericCreate>
 8005246:	4603      	mov	r3, r0
 8005248:	4a4b      	ldr	r2, [pc, #300]	; (8005378 <low_level_init+0x25c>)
 800524a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800524c:	4b4b      	ldr	r3, [pc, #300]	; (800537c <low_level_init+0x260>)
 800524e:	f107 0408 	add.w	r4, r7, #8
 8005252:	461d      	mov	r5, r3
 8005254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800525c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fc22 	bl	8005ab0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800526c:	4944      	ldr	r1, [pc, #272]	; (8005380 <low_level_init+0x264>)
 800526e:	4845      	ldr	r0, [pc, #276]	; (8005384 <low_level_init+0x268>)
 8005270:	f7fb fe53 	bl	8000f1a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005274:	4843      	ldr	r0, [pc, #268]	; (8005384 <low_level_init+0x268>)
 8005276:	f7fb fe82 	bl	8000f7e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800527a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800527e:	2b00      	cmp	r3, #0
 8005280:	d165      	bne.n	800534e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005282:	4840      	ldr	r0, [pc, #256]	; (8005384 <low_level_init+0x268>)
 8005284:	f7fb ff23 	bl	80010ce <LAN8742_GetLinkState>
 8005288:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800528c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005290:	2b01      	cmp	r3, #1
 8005292:	dc06      	bgt.n	80052a2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f004 fc7f 	bl	8009b98 <netif_set_link_down>
      netif_set_down(netif);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f004 fc16 	bl	8009acc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80052a0:	e057      	b.n	8005352 <low_level_init+0x236>
      switch (PHYLinkState)
 80052a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052a6:	3b02      	subs	r3, #2
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d82b      	bhi.n	8005304 <low_level_init+0x1e8>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <low_level_init+0x198>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052d7 	.word	0x080052d7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
        duplex = ETH_FULLDUPLEX_MODE;
 80052c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80052cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80052d4:	e01f      	b.n	8005316 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80052dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80052e4:	e017      	b.n	8005316 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80052e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80052f4:	e00f      	b.n	8005316 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005302:	e008      	b.n	8005316 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800530c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005314:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800531a:	4619      	mov	r1, r3
 800531c:	480f      	ldr	r0, [pc, #60]	; (800535c <low_level_init+0x240>)
 800531e:	f7fd fe8f 	bl	8003040 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005326:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800532e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005332:	4619      	mov	r1, r3
 8005334:	4809      	ldr	r0, [pc, #36]	; (800535c <low_level_init+0x240>)
 8005336:	f7fd ff6d 	bl	8003214 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800533a:	4808      	ldr	r0, [pc, #32]	; (800535c <low_level_init+0x240>)
 800533c:	f7fd fa19 	bl	8002772 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f004 fb57 	bl	80099f4 <netif_set_up>
    netif_set_link_up(netif);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f004 fbf2 	bl	8009b30 <netif_set_link_up>
}
 800534c:	e001      	b.n	8005352 <low_level_init+0x236>
    Error_Handler();
 800534e:	f7fb fb88 	bl	8000a62 <Error_Handler>
}
 8005352:	bf00      	nop
 8005354:	37a0      	adds	r7, #160	; 0xa0
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	20005388 	.word	0x20005388
 8005360:	40028000 	.word	0x40028000
 8005364:	200052e0 	.word	0x200052e0
 8005368:	20005240 	.word	0x20005240
 800536c:	20005438 	.word	0x20005438
 8005370:	08016d74 	.word	0x08016d74
 8005374:	20005380 	.word	0x20005380
 8005378:	20005384 	.word	0x20005384
 800537c:	08014254 	.word	0x08014254
 8005380:	2000000c 	.word	0x2000000c
 8005384:	20005470 	.word	0x20005470

08005388 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b092      	sub	sp, #72	; 0x48
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80053a0:	f107 030c 	add.w	r3, r7, #12
 80053a4:	2230      	movs	r2, #48	; 0x30
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f00d ff54 	bl	8013256 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	2230      	movs	r2, #48	; 0x30
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f00d ff4d 	bl	8013256 <memset>

  for(q = p; q != NULL; q = q->next)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	643b      	str	r3, [r7, #64]	; 0x40
 80053c0:	e045      	b.n	800544e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80053c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d902      	bls.n	80053ce <low_level_output+0x46>
      return ERR_IF;
 80053c8:	f06f 030b 	mvn.w	r3, #11
 80053cc:	e065      	b.n	800549a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80053ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	3348      	adds	r3, #72	; 0x48
 80053de:	443b      	add	r3, r7
 80053e0:	3b3c      	subs	r3, #60	; 0x3c
 80053e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80053e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e6:	895b      	ldrh	r3, [r3, #10]
 80053e8:	4619      	mov	r1, r3
 80053ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	3348      	adds	r3, #72	; 0x48
 80053f6:	443b      	add	r3, r7
 80053f8:	3b38      	subs	r3, #56	; 0x38
 80053fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	1e5a      	subs	r2, r3, #1
 8005406:	f107 000c 	add.w	r0, r7, #12
 800540a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800540c:	460b      	mov	r3, r1
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	440b      	add	r3, r1
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	18c1      	adds	r1, r0, r3
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	3348      	adds	r3, #72	; 0x48
 8005420:	443b      	add	r3, r7
 8005422:	3b34      	subs	r3, #52	; 0x34
 8005424:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800542e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005430:	4613      	mov	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	3348      	adds	r3, #72	; 0x48
 800543a:	443b      	add	r3, r7
 800543c:	3b34      	subs	r3, #52	; 0x34
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005444:	3301      	adds	r3, #1
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
 800544e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1b6      	bne.n	80053c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	891b      	ldrh	r3, [r3, #8]
 8005458:	461a      	mov	r2, r3
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <low_level_output+0x11c>)
 800545c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800545e:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <low_level_output+0x11c>)
 8005460:	f107 030c 	add.w	r3, r7, #12
 8005464:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005466:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <low_level_output+0x11c>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800546c:	6838      	ldr	r0, [r7, #0]
 800546e:	f005 f817 	bl	800a4a0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005472:	490c      	ldr	r1, [pc, #48]	; (80054a4 <low_level_output+0x11c>)
 8005474:	480c      	ldr	r0, [pc, #48]	; (80054a8 <low_level_output+0x120>)
 8005476:	f7fd fa89 	bl	800298c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800547a:	bf00      	nop
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <low_level_output+0x124>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f04f 31ff 	mov.w	r1, #4294967295
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fc0f 	bl	8005ca8 <osSemaphoreWait>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f5      	bne.n	800547c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005490:	4805      	ldr	r0, [pc, #20]	; (80054a8 <low_level_output+0x120>)
 8005492:	f7fd fc0f 	bl	8002cb4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005496:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800549a:	4618      	mov	r0, r3
 800549c:	3748      	adds	r7, #72	; 0x48
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20005438 	.word	0x20005438
 80054a8:	20005388 	.word	0x20005388
 80054ac:	20005384 	.word	0x20005384

080054b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <low_level_input+0x2c>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	4619      	mov	r1, r3
 80054ca:	4805      	ldr	r0, [pc, #20]	; (80054e0 <low_level_input+0x30>)
 80054cc:	f7fd faba 	bl	8002a44 <HAL_ETH_ReadData>
  }

  return p;
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000523c 	.word	0x2000523c
 80054e0:	20005388 	.word	0x20005388

080054e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <ethernetif_input+0x50>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f04f 31ff 	mov.w	r1, #4294967295
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fbd3 	bl	8005ca8 <osSemaphoreWait>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f5      	bne.n	80054f4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005508:	68b8      	ldr	r0, [r7, #8]
 800550a:	f7ff ffd1 	bl	80054b0 <low_level_input>
 800550e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	4798      	blx	r3
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f004 ff14 	bl	800a354 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ea      	bne.n	8005508 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005532:	e7df      	b.n	80054f4 <ethernetif_input+0x10>
 8005534:	20005380 	.word	0x20005380

08005538 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <ethernetif_init+0x1c>
 8005546:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <ethernetif_init+0x48>)
 8005548:	f240 12df 	movw	r2, #479	; 0x1df
 800554c:	490d      	ldr	r1, [pc, #52]	; (8005584 <ethernetif_init+0x4c>)
 800554e:	480e      	ldr	r0, [pc, #56]	; (8005588 <ethernetif_init+0x50>)
 8005550:	f00d ff1e 	bl	8013390 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2273      	movs	r2, #115	; 0x73
 8005558:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2274      	movs	r2, #116	; 0x74
 8005560:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <ethernetif_init+0x54>)
 8005568:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <ethernetif_init+0x58>)
 800556e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fdd3 	bl	800511c <low_level_init>

  return ERR_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	08014270 	.word	0x08014270
 8005584:	0801428c 	.word	0x0801428c
 8005588:	0801429c 	.word	0x0801429c
 800558c:	080110c1 	.word	0x080110c1
 8005590:	08005389 	.word	0x08005389

08005594 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	4809      	ldr	r0, [pc, #36]	; (80055c8 <pbuf_free_custom+0x34>)
 80055a4:	f004 f80e 	bl	80095c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <pbuf_free_custom+0x38>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <pbuf_free_custom+0x38>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <pbuf_free_custom+0x3c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fbc2 	bl	8005d44 <osSemaphoreRelease>
  }
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	08016d74 	.word	0x08016d74
 80055cc:	2000523c 	.word	0x2000523c
 80055d0:	20005380 	.word	0x20005380

080055d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80055d8:	f7fb fe36 	bl	8001248 <HAL_GetTick>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08e      	sub	sp, #56	; 0x38
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a59      	ldr	r2, [pc, #356]	; (8005768 <HAL_ETH_MspInit+0x184>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f040 80ac 	bne.w	8005760 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005608:	2300      	movs	r3, #0
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	4b57      	ldr	r3, [pc, #348]	; (800576c <HAL_ETH_MspInit+0x188>)
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	4a56      	ldr	r2, [pc, #344]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005616:	6313      	str	r3, [r2, #48]	; 0x30
 8005618:	4b54      	ldr	r3, [pc, #336]	; (800576c <HAL_ETH_MspInit+0x188>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_ETH_MspInit+0x188>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4a4f      	ldr	r2, [pc, #316]	; (800576c <HAL_ETH_MspInit+0x188>)
 800562e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005632:	6313      	str	r3, [r2, #48]	; 0x30
 8005634:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	4b49      	ldr	r3, [pc, #292]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	4a48      	ldr	r2, [pc, #288]	; (800576c <HAL_ETH_MspInit+0x188>)
 800564a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800564e:	6313      	str	r3, [r2, #48]	; 0x30
 8005650:	4b46      	ldr	r3, [pc, #280]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	4b42      	ldr	r3, [pc, #264]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	4a41      	ldr	r2, [pc, #260]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6313      	str	r3, [r2, #48]	; 0x30
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_ETH_MspInit+0x188>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	4b3b      	ldr	r3, [pc, #236]	; (800576c <HAL_ETH_MspInit+0x188>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4a3a      	ldr	r2, [pc, #232]	; (800576c <HAL_ETH_MspInit+0x188>)
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	6313      	str	r3, [r2, #48]	; 0x30
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <HAL_ETH_MspInit+0x188>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_ETH_MspInit+0x188>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	4a33      	ldr	r2, [pc, #204]	; (800576c <HAL_ETH_MspInit+0x188>)
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	6313      	str	r3, [r2, #48]	; 0x30
 80056a4:	4b31      	ldr	r3, [pc, #196]	; (800576c <HAL_ETH_MspInit+0x188>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	4b2d      	ldr	r3, [pc, #180]	; (800576c <HAL_ETH_MspInit+0x188>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	4a2c      	ldr	r2, [pc, #176]	; (800576c <HAL_ETH_MspInit+0x188>)
 80056ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056be:	6313      	str	r3, [r2, #48]	; 0x30
 80056c0:	4b2a      	ldr	r3, [pc, #168]	; (800576c <HAL_ETH_MspInit+0x188>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80056cc:	2332      	movs	r3, #50	; 0x32
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d0:	2302      	movs	r3, #2
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d8:	2303      	movs	r3, #3
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056dc:	230b      	movs	r3, #11
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e4:	4619      	mov	r1, r3
 80056e6:	4822      	ldr	r0, [pc, #136]	; (8005770 <HAL_ETH_MspInit+0x18c>)
 80056e8:	f7fe fa16 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80056ec:	2386      	movs	r3, #134	; 0x86
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f0:	2302      	movs	r3, #2
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f8:	2303      	movs	r3, #3
 80056fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056fc:	230b      	movs	r3, #11
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005704:	4619      	mov	r1, r3
 8005706:	481b      	ldr	r0, [pc, #108]	; (8005774 <HAL_ETH_MspInit+0x190>)
 8005708:	f7fe fa06 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800570c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005712:	2302      	movs	r3, #2
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005716:	2300      	movs	r3, #0
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800571a:	2303      	movs	r3, #3
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800571e:	230b      	movs	r3, #11
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005726:	4619      	mov	r1, r3
 8005728:	4813      	ldr	r0, [pc, #76]	; (8005778 <HAL_ETH_MspInit+0x194>)
 800572a:	f7fe f9f5 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800572e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005734:	2302      	movs	r3, #2
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800573c:	2303      	movs	r3, #3
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005740:	230b      	movs	r3, #11
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005748:	4619      	mov	r1, r3
 800574a:	480c      	ldr	r0, [pc, #48]	; (800577c <HAL_ETH_MspInit+0x198>)
 800574c:	f7fe f9e4 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005750:	2200      	movs	r2, #0
 8005752:	2105      	movs	r1, #5
 8005754:	203d      	movs	r0, #61	; 0x3d
 8005756:	f7fc fad1 	bl	8001cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800575a:	203d      	movs	r0, #61	; 0x3d
 800575c:	f7fc faea 	bl	8001d34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005760:	bf00      	nop
 8005762:	3738      	adds	r7, #56	; 0x38
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40028000 	.word	0x40028000
 800576c:	40023800 	.word	0x40023800
 8005770:	40020800 	.word	0x40020800
 8005774:	40020000 	.word	0x40020000
 8005778:	40020400 	.word	0x40020400
 800577c:	40021800 	.word	0x40021800

08005780 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <ETH_PHY_IO_Init+0x10>)
 8005786:	f7fd fd5f 	bl	8003248 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20005388 	.word	0x20005388

08005794 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return 0;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	68f9      	ldr	r1, [r7, #12]
 80057b6:	4807      	ldr	r0, [pc, #28]	; (80057d4 <ETH_PHY_IO_ReadReg+0x30>)
 80057b8:	f7fd fbae 	bl	8002f18 <HAL_ETH_ReadPHYRegister>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	e000      	b.n	80057ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20005388 	.word	0x20005388

080057d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	68f9      	ldr	r1, [r7, #12]
 80057ea:	4807      	ldr	r0, [pc, #28]	; (8005808 <ETH_PHY_IO_WriteReg+0x30>)
 80057ec:	f7fd fbdf 	bl	8002fae <HAL_ETH_WritePHYRegister>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	e000      	b.n	80057fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20005388 	.word	0x20005388

0800580c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005810:	f7fb fd1a 	bl	8001248 <HAL_GetTick>
 8005814:	4603      	mov	r3, r0
}
 8005816:	4618      	mov	r0, r3
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b0a0      	sub	sp, #128	; 0x80
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005824:	f107 0308 	add.w	r3, r7, #8
 8005828:	2264      	movs	r2, #100	; 0x64
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f00d fd12 	bl	8013256 <memset>
  int32_t PHYLinkState = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800583a:	2300      	movs	r3, #0
 800583c:	67bb      	str	r3, [r7, #120]	; 0x78
 800583e:	2300      	movs	r3, #0
 8005840:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005846:	483a      	ldr	r0, [pc, #232]	; (8005930 <ethernet_link_thread+0x114>)
 8005848:	f7fb fc41 	bl	80010ce <LAN8742_GetLinkState>
 800584c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <ethernet_link_thread+0x5e>
 8005860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005862:	2b01      	cmp	r3, #1
 8005864:	dc09      	bgt.n	800587a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005866:	4833      	ldr	r0, [pc, #204]	; (8005934 <ethernet_link_thread+0x118>)
 8005868:	f7fd f811 	bl	800288e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800586c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800586e:	f004 f92d 	bl	8009acc <netif_set_down>
    netif_set_link_down(netif);
 8005872:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005874:	f004 f990 	bl	8009b98 <netif_set_link_down>
 8005878:	e055      	b.n	8005926 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d14e      	bne.n	8005926 <ethernet_link_thread+0x10a>
 8005888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800588a:	2b01      	cmp	r3, #1
 800588c:	dd4b      	ble.n	8005926 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800588e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005890:	3b02      	subs	r3, #2
 8005892:	2b03      	cmp	r3, #3
 8005894:	d82a      	bhi.n	80058ec <ethernet_link_thread+0xd0>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <ethernet_link_thread+0x80>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058bf 	.word	0x080058bf
 80058a4:	080058cf 	.word	0x080058cf
 80058a8:	080058df 	.word	0x080058df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80058ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80058b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80058b8:	2301      	movs	r3, #1
 80058ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80058bc:	e017      	b.n	80058ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80058be:	2300      	movs	r3, #0
 80058c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80058c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80058cc:	e00f      	b.n	80058ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80058ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80058d4:	2300      	movs	r3, #0
 80058d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80058d8:	2301      	movs	r3, #1
 80058da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80058dc:	e007      	b.n	80058ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80058de:	2300      	movs	r3, #0
 80058e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80058e2:	2300      	movs	r3, #0
 80058e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80058ea:	e000      	b.n	80058ee <ethernet_link_thread+0xd2>
    default:
      break;
 80058ec:	bf00      	nop
    }

    if(linkchanged)
 80058ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d018      	beq.n	8005926 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	480e      	ldr	r0, [pc, #56]	; (8005934 <ethernet_link_thread+0x118>)
 80058fc:	f7fd fba0 	bl	8003040 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005902:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005906:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	4619      	mov	r1, r3
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <ethernet_link_thread+0x118>)
 8005910:	f7fd fc80 	bl	8003214 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005914:	4807      	ldr	r0, [pc, #28]	; (8005934 <ethernet_link_thread+0x118>)
 8005916:	f7fc fecd 	bl	80026b4 <HAL_ETH_Start>
      netif_set_up(netif);
 800591a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800591c:	f004 f86a 	bl	80099f4 <netif_set_up>
      netif_set_link_up(netif);
 8005920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005922:	f004 f905 	bl	8009b30 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005926:	2064      	movs	r0, #100	; 0x64
 8005928:	f000 f90e 	bl	8005b48 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800592c:	e78b      	b.n	8005846 <ethernet_link_thread+0x2a>
 800592e:	bf00      	nop
 8005930:	20005470 	.word	0x20005470
 8005934:	20005388 	.word	0x20005388

08005938 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005940:	4812      	ldr	r0, [pc, #72]	; (800598c <HAL_ETH_RxAllocateCallback+0x54>)
 8005942:	f003 fdcb 	bl	80094dc <memp_malloc_pool>
 8005946:	60f8      	str	r0, [r7, #12]
  if (p)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d014      	beq.n	8005978 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f103 0220 	add.w	r2, r3, #32
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a0d      	ldr	r2, [pc, #52]	; (8005990 <HAL_ETH_RxAllocateCallback+0x58>)
 800595c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2241      	movs	r2, #65	; 0x41
 800596e:	2100      	movs	r1, #0
 8005970:	2000      	movs	r0, #0
 8005972:	f004 fb35 	bl	8009fe0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005976:	e005      	b.n	8005984 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_ETH_RxAllocateCallback+0x5c>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	08016d74 	.word	0x08016d74
 8005990:	08005595 	.word	0x08005595
 8005994:	2000523c 	.word	0x2000523c

08005998 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3b20      	subs	r3, #32
 80059b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2200      	movs	r2, #0
 80059c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e003      	b.n	80059e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e009      	b.n	8005a04 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	891a      	ldrh	r2, [r3, #8]
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	4413      	add	r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f2      	bne.n	80059f0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	3724      	adds	r7, #36	; 0x24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f004 fc97 	bl	800a354 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	4603      	mov	r3, r0
 8005a36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a40:	2b84      	cmp	r3, #132	; 0x84
 8005a42:	d005      	beq.n	8005a50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3303      	adds	r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a64:	f3ef 8305 	mrs	r3, IPSR
 8005a68:	607b      	str	r3, [r7, #4]
  return(result);
 8005a6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a86:	f001 fc41 	bl	800730c <vTaskStartScheduler>
  
  return osOK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005a94:	f7ff ffe3 	bl	8005a5e <inHandlerMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005a9e:	f001 fd59 	bl	8007554 <xTaskGetTickCountFromISR>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e002      	b.n	8005aac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005aa6:	f001 fd45 	bl	8007534 <xTaskGetTickCount>
 8005aaa:	4603      	mov	r3, r0
  }
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af04      	add	r7, sp, #16
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d020      	beq.n	8005b04 <osThreadCreate+0x54>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01c      	beq.n	8005b04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685c      	ldr	r4, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691e      	ldr	r6, [r3, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ffa6 	bl	8005a2e <makeFreeRtosPriority>
 8005ae2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aec:	9202      	str	r2, [sp, #8]
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	9100      	str	r1, [sp, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	4632      	mov	r2, r6
 8005af6:	4629      	mov	r1, r5
 8005af8:	4620      	mov	r0, r4
 8005afa:	f001 fa29 	bl	8006f50 <xTaskCreateStatic>
 8005afe:	4603      	mov	r3, r0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e01c      	b.n	8005b3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685c      	ldr	r4, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b10:	b29e      	uxth	r6, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ff88 	bl	8005a2e <makeFreeRtosPriority>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	9200      	str	r2, [sp, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f001 fa6b 	bl	800700a <xTaskCreate>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d001      	beq.n	8005b3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e000      	b.n	8005b40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <osDelay+0x16>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e000      	b.n	8005b60 <osDelay+0x18>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fb9f 	bl	80072a4 <vTaskDelay>
  
  return osOK;
 8005b66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4619      	mov	r1, r3
 8005b86:	2001      	movs	r0, #1
 8005b88:	f000 fc0d 	bl	80063a6 <xQueueCreateMutexStatic>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	e003      	b.n	8005b98 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b90:	2001      	movs	r0, #1
 8005b92:	f000 fbf0 	bl	8006376 <xQueueCreateMutex>
 8005b96:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <osMutexWait+0x18>
    return osErrorParameter;
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	e03a      	b.n	8005c2e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d103      	bne.n	8005bcc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e009      	b.n	8005be0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <osMutexWait+0x40>
      ticks = 1;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005be0:	f7ff ff3d 	bl	8005a5e <inHandlerMode>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f804 	bl	8006c00 <xQueueReceiveFromISR>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d001      	beq.n	8005c02 <osMutexWait+0x62>
      return osErrorOS;
 8005bfe:	23ff      	movs	r3, #255	; 0xff
 8005c00:	e015      	b.n	8005c2e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d011      	beq.n	8005c2c <osMutexWait+0x8c>
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <osMutexWait+0x98>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	e008      	b.n	8005c2c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fee3 	bl	80069e8 <xQueueSemaphoreTake>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d001      	beq.n	8005c2c <osMutexWait+0x8c>
    return osErrorOS;
 8005c28:	23ff      	movs	r3, #255	; 0xff
 8005c2a:	e000      	b.n	8005c2e <osMutexWait+0x8e>
  }
  
  return osOK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005c4c:	f7ff ff07 	bl	8005a5e <inHandlerMode>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fd56 	bl	800670e <xQueueGiveFromISR>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <osMutexRelease+0x30>
      return osErrorOS;
 8005c68:	23ff      	movs	r3, #255	; 0xff
 8005c6a:	e017      	b.n	8005c9c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d013      	beq.n	8005c9a <osMutexRelease+0x5e>
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <osMutexRelease+0x68>)
 8005c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	e00a      	b.n	8005c9a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fba6 	bl	80063dc <xQueueGenericSend>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d001      	beq.n	8005c9a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005c96:	23ff      	movs	r3, #255	; 0xff
 8005c98:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	e03a      	b.n	8005d36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d103      	bne.n	8005cd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e009      	b.n	8005ce8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <osSemaphoreWait+0x40>
      ticks = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ce8:	f7ff feb9 	bl	8005a5e <inHandlerMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d017      	beq.n	8005d22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 ff80 	bl	8006c00 <xQueueReceiveFromISR>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005d06:	23ff      	movs	r3, #255	; 0xff
 8005d08:	e015      	b.n	8005d36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d011      	beq.n	8005d34 <osSemaphoreWait+0x8c>
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <osSemaphoreWait+0x98>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	e008      	b.n	8005d34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fe5f 	bl	80069e8 <xQueueSemaphoreTake>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d001      	beq.n	8005d34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005d30:	23ff      	movs	r3, #255	; 0xff
 8005d32:	e000      	b.n	8005d36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005d54:	f7ff fe83 	bl	8005a5e <inHandlerMode>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fcd2 	bl	800670e <xQueueGiveFromISR>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d001      	beq.n	8005d74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005d70:	23ff      	movs	r3, #255	; 0xff
 8005d72:	e017      	b.n	8005da4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <osSemaphoreRelease+0x5e>
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <osSemaphoreRelease+0x68>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	e00a      	b.n	8005da2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fb22 	bl	80063dc <xQueueGenericSend>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d001      	beq.n	8005da2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005d9e:	23ff      	movs	r3, #255	; 0xff
 8005da0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d011      	beq.n	8005de6 <osMessageCreate+0x36>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6859      	ldr	r1, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2400      	movs	r4, #0
 8005ddc:	9400      	str	r4, [sp, #0]
 8005dde:	f000 f9df 	bl	80061a0 <xQueueGenericCreateStatic>
 8005de2:	4603      	mov	r3, r0
 8005de4:	e008      	b.n	8005df8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	4619      	mov	r1, r3
 8005df2:	f000 fa4d 	bl	8006290 <xQueueGenericCreate>
 8005df6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd90      	pop	{r4, r7, pc}

08005e00 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <osMessagePut+0x1e>
    ticks = 1;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e1e:	f7ff fe1e 	bl	8005a5e <inHandlerMode>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e28:	f107 0210 	add.w	r2, r7, #16
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	2300      	movs	r3, #0
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fbd0 	bl	80065d8 <xQueueGenericSendFromISR>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d001      	beq.n	8005e42 <osMessagePut+0x42>
      return osErrorOS;
 8005e3e:	23ff      	movs	r3, #255	; 0xff
 8005e40:	e018      	b.n	8005e74 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d014      	beq.n	8005e72 <osMessagePut+0x72>
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <osMessagePut+0x7c>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	e00b      	b.n	8005e72 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005e5a:	f107 0108 	add.w	r1, r7, #8
 8005e5e:	2300      	movs	r3, #0
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 faba 	bl	80063dc <xQueueGenericSend>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d001      	beq.n	8005e72 <osMessagePut+0x72>
      return osErrorOS;
 8005e6e:	23ff      	movs	r3, #255	; 0xff
 8005e70:	e000      	b.n	8005e74 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b08b      	sub	sp, #44	; 0x2c
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	617b      	str	r3, [r7, #20]
    return event;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	461c      	mov	r4, r3
 8005ea2:	f107 0314 	add.w	r3, r7, #20
 8005ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eae:	e054      	b.n	8005f5a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d103      	bne.n	8005ec8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec6:	e009      	b.n	8005edc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d006      	beq.n	8005edc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <osMessageGet+0x5c>
      ticks = 1;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005edc:	f7ff fdbf 	bl	8005a5e <inHandlerMode>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01c      	beq.n	8005f20 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ee6:	f107 0220 	add.w	r2, r7, #32
 8005eea:	f107 0314 	add.w	r3, r7, #20
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68b8      	ldr	r0, [r7, #8]
 8005ef4:	f000 fe84 	bl	8006c00 <xQueueReceiveFromISR>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d102      	bne.n	8005f04 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005efe:	2310      	movs	r3, #16
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01d      	beq.n	8005f4a <osMessageGet+0xca>
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <osMessageGet+0xe4>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	e014      	b.n	8005f4a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f20:	f107 0314 	add.w	r3, r7, #20
 8005f24:	3304      	adds	r3, #4
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68b8      	ldr	r0, [r7, #8]
 8005f2c:	f000 fc7c 	bl	8006828 <xQueueReceive>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d102      	bne.n	8005f3c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f36:	2310      	movs	r3, #16
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e006      	b.n	8005f4a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <osMessageGet+0xc6>
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <osMessageGet+0xc8>
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	461c      	mov	r4, r3
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	372c      	adds	r7, #44	; 0x2c
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0208 	add.w	r2, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f103 0208 	add.w	r2, r3, #8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f103 0208 	add.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d103      	bne.n	800602a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e00c      	b.n	8006044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3308      	adds	r3, #8
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e002      	b.n	8006038 <vListInsert+0x2e>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d2f6      	bcs.n	8006032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6852      	ldr	r2, [r2, #4]
 800609c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d103      	bne.n	80060b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1e5a      	subs	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060fa:	f002 f88b 	bl	8008214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	3b01      	subs	r3, #1
 800612c:	68f9      	ldr	r1, [r7, #12]
 800612e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d114      	bne.n	800617a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3310      	adds	r3, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f001 fb49 	bl	80077f4 <xTaskRemoveFromEventList>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <xQueueGenericReset+0xcc>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	e009      	b.n	800618e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3310      	adds	r3, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fef2 	bl	8005f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff feed 	bl	8005f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f002 f871 	bl	8008274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006192:	2301      	movs	r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <xQueueGenericCreateStatic+0x52>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xQueueGenericCreateStatic+0x56>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueGenericCreateStatic+0x58>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <xQueueGenericCreateStatic+0x7e>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <xQueueGenericCreateStatic+0x82>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <xQueueGenericCreateStatic+0x84>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61fb      	str	r3, [r7, #28]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623e:	2348      	movs	r3, #72	; 0x48
 8006240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b48      	cmp	r3, #72	; 0x48
 8006246:	d00a      	beq.n	800625e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800625e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f83f 	bl	8006304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3730      	adds	r7, #48	; 0x30
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	613b      	str	r3, [r7, #16]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3348      	adds	r3, #72	; 0x48
 80062c8:	4618      	mov	r0, r3
 80062ca:	f002 f8c5 	bl	8008458 <pvPortMalloc>
 80062ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	3348      	adds	r3, #72	; 0x48
 80062de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062e8:	79fa      	ldrb	r2, [r7, #7]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f805 	bl	8006304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062fa:	69bb      	ldr	r3, [r7, #24]
	}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e002      	b.n	8006326 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006332:	2101      	movs	r1, #1
 8006334:	69b8      	ldr	r0, [r7, #24]
 8006336:	f7ff fecb 	bl	80060d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f837 	bl	80063dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	4603      	mov	r3, r0
 800637e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	461a      	mov	r2, r3
 800638c:	6939      	ldr	r1, [r7, #16]
 800638e:	6978      	ldr	r0, [r7, #20]
 8006390:	f7ff ff7e 	bl	8006290 <xQueueGenericCreate>
 8006394:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ffd3 	bl	8006342 <prvInitialiseMutex>

		return xNewQueue;
 800639c:	68fb      	ldr	r3, [r7, #12]
	}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b088      	sub	sp, #32
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	4603      	mov	r3, r0
 80063ae:	6039      	str	r1, [r7, #0]
 80063b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063b2:	2301      	movs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	6939      	ldr	r1, [r7, #16]
 80063c4:	6978      	ldr	r0, [r7, #20]
 80063c6:	f7ff feeb 	bl	80061a0 <xQueueGenericCreateStatic>
 80063ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ffb8 	bl	8006342 <prvInitialiseMutex>

		return xNewQueue;
 80063d2:	68fb      	ldr	r3, [r7, #12]
	}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ea:	2300      	movs	r3, #0
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xQueueGenericSend+0x32>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <xQueueGenericSend+0x40>
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <xQueueGenericSend+0x44>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <xQueueGenericSend+0x46>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <xQueueGenericSend+0x60>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x6e>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0x72>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0x74>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueGenericSend+0x8e>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646a:	f001 fb83 	bl	8007b74 <xTaskGetSchedulerState>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xQueueGenericSend+0x9e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueGenericSend+0xa2>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueGenericSend+0xa4>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueGenericSend+0xbe>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fb      	str	r3, [r7, #28]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800649a:	f001 febb 	bl	8008214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d302      	bcc.n	80064b0 <xQueueGenericSend+0xd4>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d129      	bne.n	8006504 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b6:	f000 fc3b 	bl	8006d30 <prvCopyDataToQueue>
 80064ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 f993 	bl	80077f4 <xTaskRemoveFromEventList>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064d4:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <xQueueGenericSend+0x1f8>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	e00a      	b.n	80064fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064ec:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <xQueueGenericSend+0x1f8>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064fc:	f001 feba 	bl	8008274 <vPortExitCritical>
				return pdPASS;
 8006500:	2301      	movs	r3, #1
 8006502:	e063      	b.n	80065cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800650a:	f001 feb3 	bl	8008274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800650e:	2300      	movs	r3, #0
 8006510:	e05c      	b.n	80065cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006518:	f107 0314 	add.w	r3, r7, #20
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f9cb 	bl	80078b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006526:	f001 fea5 	bl	8008274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800652a:	f000 ff59 	bl	80073e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800652e:	f001 fe71 	bl	8008214 <vPortEnterCritical>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006538:	b25b      	sxtb	r3, r3
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d103      	bne.n	8006548 <xQueueGenericSend+0x16c>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800654e:	b25b      	sxtb	r3, r3
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d103      	bne.n	800655e <xQueueGenericSend+0x182>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800655e:	f001 fe89 	bl	8008274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006562:	1d3a      	adds	r2, r7, #4
 8006564:	f107 0314 	add.w	r3, r7, #20
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f9ba 	bl	80078e4 <xTaskCheckForTimeOut>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d124      	bne.n	80065c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006578:	f000 fcd2 	bl	8006f20 <prvIsQueueFull>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	3310      	adds	r3, #16
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4611      	mov	r1, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f001 f90e 	bl	80077ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006592:	f000 fc5d 	bl	8006e50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006596:	f000 ff31 	bl	80073fc <xTaskResumeAll>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	f47f af7c 	bne.w	800649a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <xQueueGenericSend+0x1f8>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	e772      	b.n	800649a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b6:	f000 fc4b 	bl	8006e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ba:	f000 ff1f 	bl	80073fc <xTaskResumeAll>
 80065be:	e76c      	b.n	800649a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c2:	f000 fc45 	bl	8006e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c6:	f000 ff19 	bl	80073fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3738      	adds	r7, #56	; 0x38
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b090      	sub	sp, #64	; 0x40
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d103      	bne.n	8006614 <xQueueGenericSendFromISR+0x3c>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <xQueueGenericSendFromISR+0x40>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <xQueueGenericSendFromISR+0x42>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d103      	bne.n	8006642 <xQueueGenericSendFromISR+0x6a>
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <xQueueGenericSendFromISR+0x6e>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <xQueueGenericSendFromISR+0x70>
 8006646:	2300      	movs	r3, #0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	623b      	str	r3, [r7, #32]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006662:	f001 feb9 	bl	80083d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006666:	f3ef 8211 	mrs	r2, BASEPRI
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	61fa      	str	r2, [r7, #28]
 800667c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800667e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <xQueueGenericSendFromISR+0xbc>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d12f      	bne.n	80066f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066aa:	f000 fb41 	bl	8006d30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d112      	bne.n	80066de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	3324      	adds	r3, #36	; 0x24
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f895 	bl	80077f4 <xTaskRemoveFromEventList>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e007      	b.n	80066ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066e2:	3301      	adds	r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	b25a      	sxtb	r2, r3
 80066e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066ee:	2301      	movs	r3, #1
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80066f2:	e001      	b.n	80066f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006702:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006706:	4618      	mov	r0, r3
 8006708:	3740      	adds	r7, #64	; 0x40
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08e      	sub	sp, #56	; 0x38
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	623b      	str	r3, [r7, #32]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61fb      	str	r3, [r7, #28]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueGiveFromISR+0x58>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueGiveFromISR+0x5c>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGiveFromISR+0x5e>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	61bb      	str	r3, [r7, #24]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006786:	f001 fe27 	bl	80083d8 <vPortValidateInterruptPriority>
	__asm volatile
 800678a:	f3ef 8211 	mrs	r2, BASEPRI
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617a      	str	r2, [r7, #20]
 80067a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80067a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d22b      	bcs.n	800680e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d112      	bne.n	80067f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f808 	bl	80077f4 <xTaskRemoveFromEventList>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e007      	b.n	8006808 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067fc:	3301      	adds	r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	b25a      	sxtb	r2, r3
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006808:	2301      	movs	r3, #1
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
 800680c:	e001      	b.n	8006812 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f383 8811 	msr	BASEPRI, r3
}
 800681c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006820:	4618      	mov	r0, r3
 8006822:	3738      	adds	r7, #56	; 0x38
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08c      	sub	sp, #48	; 0x30
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <xQueueReceive+0x30>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	623b      	str	r3, [r7, #32]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <xQueueReceive+0x3e>
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <xQueueReceive+0x42>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <xQueueReceive+0x44>
 800686a:	2300      	movs	r3, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <xQueueReceive+0x5e>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006886:	f001 f975 	bl	8007b74 <xTaskGetSchedulerState>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <xQueueReceive+0x6e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <xQueueReceive+0x72>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <xQueueReceive+0x74>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueReceive+0x8e>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	61bb      	str	r3, [r7, #24]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068b6:	f001 fcad 	bl	8008214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01f      	beq.n	8006906 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ca:	f000 fa9b 	bl	8006e04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	1e5a      	subs	r2, r3, #1
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00f      	beq.n	80068fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	3310      	adds	r3, #16
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 ff86 	bl	80077f4 <xTaskRemoveFromEventList>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068ee:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <xQueueReceive+0x1bc>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068fe:	f001 fcb9 	bl	8008274 <vPortExitCritical>
				return pdPASS;
 8006902:	2301      	movs	r3, #1
 8006904:	e069      	b.n	80069da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800690c:	f001 fcb2 	bl	8008274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006910:	2300      	movs	r3, #0
 8006912:	e062      	b.n	80069da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800691a:	f107 0310 	add.w	r3, r7, #16
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ffca 	bl	80078b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006928:	f001 fca4 	bl	8008274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800692c:	f000 fd58 	bl	80073e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006930:	f001 fc70 	bl	8008214 <vPortEnterCritical>
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800693a:	b25b      	sxtb	r3, r3
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d103      	bne.n	800694a <xQueueReceive+0x122>
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006950:	b25b      	sxtb	r3, r3
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d103      	bne.n	8006960 <xQueueReceive+0x138>
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006960:	f001 fc88 	bl	8008274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006964:	1d3a      	adds	r2, r7, #4
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f000 ffb9 	bl	80078e4 <xTaskCheckForTimeOut>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d123      	bne.n	80069c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697a:	f000 fabb 	bl	8006ef4 <prvIsQueueEmpty>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d017      	beq.n	80069b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	3324      	adds	r3, #36	; 0x24
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4611      	mov	r1, r2
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ff0d 	bl	80077ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006994:	f000 fa5c 	bl	8006e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006998:	f000 fd30 	bl	80073fc <xTaskResumeAll>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d189      	bne.n	80068b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069a2:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <xQueueReceive+0x1bc>)
 80069a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	e780      	b.n	80068b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b6:	f000 fa4b 	bl	8006e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ba:	f000 fd1f 	bl	80073fc <xTaskResumeAll>
 80069be:	e77a      	b.n	80068b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c2:	f000 fa45 	bl	8006e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069c6:	f000 fd19 	bl	80073fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	f000 fa92 	bl	8006ef4 <prvIsQueueEmpty>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f43f af6f 	beq.w	80068b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3730      	adds	r7, #48	; 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08e      	sub	sp, #56	; 0x38
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069f2:	2300      	movs	r3, #0
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	623b      	str	r3, [r7, #32]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61fb      	str	r3, [r7, #28]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a38:	f001 f89c 	bl	8007b74 <xTaskGetSchedulerState>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <xQueueSemaphoreTake+0x60>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <xQueueSemaphoreTake+0x64>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <xQueueSemaphoreTake+0x66>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61bb      	str	r3, [r7, #24]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a68:	f001 fbd4 	bl	8008214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d024      	beq.n	8006ac2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	1e5a      	subs	r2, r3, #1
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a88:	f001 fa1c 	bl	8007ec4 <pvTaskIncrementMutexHeldCount>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00f      	beq.n	8006aba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fea8 	bl	80077f4 <xTaskRemoveFromEventList>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aaa:	4b54      	ldr	r3, [pc, #336]	; (8006bfc <xQueueSemaphoreTake+0x214>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006aba:	f001 fbdb 	bl	8008274 <vPortExitCritical>
				return pdPASS;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e097      	b.n	8006bf2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d111      	bne.n	8006aec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	617b      	str	r3, [r7, #20]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ae4:	f001 fbc6 	bl	8008274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e082      	b.n	8006bf2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fede 	bl	80078b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b00:	f001 fbb8 	bl	8008274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b04:	f000 fc6c 	bl	80073e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b08:	f001 fb84 	bl	8008214 <vPortEnterCritical>
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d103      	bne.n	8006b22 <xQueueSemaphoreTake+0x13a>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b28:	b25b      	sxtb	r3, r3
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d103      	bne.n	8006b38 <xQueueSemaphoreTake+0x150>
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b38:	f001 fb9c 	bl	8008274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b3c:	463a      	mov	r2, r7
 8006b3e:	f107 030c 	add.w	r3, r7, #12
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fecd 	bl	80078e4 <xTaskCheckForTimeOut>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d132      	bne.n	8006bb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b52:	f000 f9cf 	bl	8006ef4 <prvIsQueueEmpty>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d026      	beq.n	8006baa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006b64:	f001 fb56 	bl	8008214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f81f 	bl	8007bb0 <xTaskPriorityInherit>
 8006b72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b74:	f001 fb7e 	bl	8008274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fe13 	bl	80077ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b88:	f000 f962 	bl	8006e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b8c:	f000 fc36 	bl	80073fc <xTaskResumeAll>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f af68 	bne.w	8006a68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b98:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <xQueueSemaphoreTake+0x214>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	e75e      	b.n	8006a68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bac:	f000 f950 	bl	8006e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bb0:	f000 fc24 	bl	80073fc <xTaskResumeAll>
 8006bb4:	e758      	b.n	8006a68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bb8:	f000 f94a 	bl	8006e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bbc:	f000 fc1e 	bl	80073fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bc2:	f000 f997 	bl	8006ef4 <prvIsQueueEmpty>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f43f af4d 	beq.w	8006a68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006bd4:	f001 fb1e 	bl	8008214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bda:	f000 f891 	bl	8006d00 <prvGetDisinheritPriorityAfterTimeout>
 8006bde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f8de 	bl	8007da8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bec:	f001 fb42 	bl	8008274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3738      	adds	r7, #56	; 0x38
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	e000ed04 	.word	0xe000ed04

08006c00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	; 0x38
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	623b      	str	r3, [r7, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <xQueueReceiveFromISR+0x3a>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <xQueueReceiveFromISR+0x3e>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <xQueueReceiveFromISR+0x40>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	61fb      	str	r3, [r7, #28]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c5a:	f001 fbbd 	bl	80083d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	61ba      	str	r2, [r7, #24]
 8006c74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02f      	beq.n	8006ce6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c94:	f000 f8b6 	bl	8006e04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	1e5a      	subs	r2, r3, #1
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d112      	bne.n	8006cd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d016      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fd9c 	bl	80077f4 <xTaskRemoveFromEventList>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e007      	b.n	8006ce0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	b25a      	sxtb	r2, r3
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	e001      	b.n	8006cea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f383 8811 	msr	BASEPRI, r3
}
 8006cf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3738      	adds	r7, #56	; 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1c3 0307 	rsb	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e001      	b.n	8006d22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d22:	68fb      	ldr	r3, [r7, #12]
	}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10d      	bne.n	8006d6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d14d      	bne.n	8006df2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 ff9e 	bl	8007c9c <xTaskPriorityDisinherit>
 8006d60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	e043      	b.n	8006df2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d119      	bne.n	8006da4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6858      	ldr	r0, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	f00c fa5d 	bl	801323a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	441a      	add	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d32b      	bcc.n	8006df2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	e026      	b.n	8006df2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68d8      	ldr	r0, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	461a      	mov	r2, r3
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	f00c fa43 	bl	801323a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	441a      	add	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d207      	bcs.n	8006de0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	425b      	negs	r3, r3
 8006dda:	441a      	add	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d105      	bne.n	8006df2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d018      	beq.n	8006e48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	441a      	add	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d303      	bcc.n	8006e38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68d9      	ldr	r1, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	461a      	mov	r2, r3
 8006e42:	6838      	ldr	r0, [r7, #0]
 8006e44:	f00c f9f9 	bl	801323a <memcpy>
	}
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e58:	f001 f9dc 	bl	8008214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e64:	e011      	b.n	8006e8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fcbe 	bl	80077f4 <xTaskRemoveFromEventList>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e7e:	f000 fd93 	bl	80079a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dce9      	bgt.n	8006e66 <prvUnlockQueue+0x16>
 8006e92:	e000      	b.n	8006e96 <prvUnlockQueue+0x46>
					break;
 8006e94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e9e:	f001 f9e9 	bl	8008274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ea2:	f001 f9b7 	bl	8008214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eae:	e011      	b.n	8006ed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d012      	beq.n	8006ede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3310      	adds	r3, #16
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fc99 	bl	80077f4 <xTaskRemoveFromEventList>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ec8:	f000 fd6e 	bl	80079a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dce9      	bgt.n	8006eb0 <prvUnlockQueue+0x60>
 8006edc:	e000      	b.n	8006ee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	22ff      	movs	r2, #255	; 0xff
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ee8:	f001 f9c4 	bl	8008274 <vPortExitCritical>
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006efc:	f001 f98a 	bl	8008214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e001      	b.n	8006f12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f12:	f001 f9af 	bl	8008274 <vPortExitCritical>

	return xReturn;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f28:	f001 f974 	bl	8008214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d102      	bne.n	8006f3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e001      	b.n	8006f42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f42:	f001 f997 	bl	8008274 <vPortExitCritical>

	return xReturn;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08e      	sub	sp, #56	; 0x38
 8006f54:	af04      	add	r7, sp, #16
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	623b      	str	r3, [r7, #32]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	61fb      	str	r3, [r7, #28]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f96:	23b4      	movs	r3, #180	; 0xb4
 8006f98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2bb4      	cmp	r3, #180	; 0xb4
 8006f9e:	d00a      	beq.n	8006fb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	61bb      	str	r3, [r7, #24]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01e      	beq.n	8006ffc <xTaskCreateStatic+0xac>
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01b      	beq.n	8006ffc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9303      	str	r3, [sp, #12]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	9302      	str	r3, [sp, #8]
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f850 	bl	8007094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ff6:	f000 f8eb 	bl	80071d0 <prvAddNewTaskToReadyList>
 8006ffa:	e001      	b.n	8007000 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007000:	697b      	ldr	r3, [r7, #20]
	}
 8007002:	4618      	mov	r0, r3
 8007004:	3728      	adds	r7, #40	; 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800700a:	b580      	push	{r7, lr}
 800700c:	b08c      	sub	sp, #48	; 0x30
 800700e:	af04      	add	r7, sp, #16
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fa1a 	bl	8008458 <pvPortMalloc>
 8007024:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800702c:	20b4      	movs	r0, #180	; 0xb4
 800702e:	f001 fa13 	bl	8008458 <pvPortMalloc>
 8007032:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
 8007040:	e005      	b.n	800704e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f001 fad4 	bl	80085f0 <vPortFree>
 8007048:	e001      	b.n	800704e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d017      	beq.n	8007084 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	2300      	movs	r3, #0
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f80e 	bl	8007094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007078:	69f8      	ldr	r0, [r7, #28]
 800707a:	f000 f8a9 	bl	80071d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800707e:	2301      	movs	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e002      	b.n	800708a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007084:	f04f 33ff 	mov.w	r3, #4294967295
 8007088:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800708a:	69bb      	ldr	r3, [r7, #24]
	}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070ac:	3b01      	subs	r3, #1
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	617b      	str	r3, [r7, #20]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01f      	beq.n	8007122 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e012      	b.n	800710e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	7819      	ldrb	r1, [r3, #0]
 80070f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	3334      	adds	r3, #52	; 0x34
 80070f8:	460a      	mov	r2, r1
 80070fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d9e9      	bls.n	80070e8 <prvInitialiseNewTask+0x54>
 8007114:	e000      	b.n	8007118 <prvInitialiseNewTask+0x84>
			{
				break;
 8007116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007120:	e003      	b.n	800712a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	2b06      	cmp	r3, #6
 800712e:	d901      	bls.n	8007134 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007130:	2306      	movs	r3, #6
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	2200      	movs	r2, #0
 8007144:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe ff2c 	bl	8005fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	3318      	adds	r3, #24
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe ff27 	bl	8005fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f1c3 0207 	rsb	r2, r3, #7
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	334c      	adds	r3, #76	; 0x4c
 8007184:	2260      	movs	r2, #96	; 0x60
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f00c f864 	bl	8013256 <memset>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <prvInitialiseNewTask+0x130>)
 8007192:	651a      	str	r2, [r3, #80]	; 0x50
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	4a0c      	ldr	r2, [pc, #48]	; (80071c8 <prvInitialiseNewTask+0x134>)
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <prvInitialiseNewTask+0x138>)
 800719e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	69b8      	ldr	r0, [r7, #24]
 80071a6:	f000 ff07 	bl	8007fb8 <pxPortInitialiseStack>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071bc:	bf00      	nop
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	08016ecc 	.word	0x08016ecc
 80071c8:	08016eec 	.word	0x08016eec
 80071cc:	08016eac 	.word	0x08016eac

080071d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071d8:	f001 f81c 	bl	8008214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071dc:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <prvAddNewTaskToReadyList+0xb8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a29      	ldr	r2, [pc, #164]	; (8007288 <prvAddNewTaskToReadyList+0xb8>)
 80071e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <prvAddNewTaskToReadyList+0xbc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <prvAddNewTaskToReadyList+0xbc>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <prvAddNewTaskToReadyList+0xb8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d110      	bne.n	800721e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071fc:	f000 fbf8 	bl	80079f0 <prvInitialiseTaskLists>
 8007200:	e00d      	b.n	800721e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <prvAddNewTaskToReadyList+0xc0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <prvAddNewTaskToReadyList+0xbc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	429a      	cmp	r2, r3
 8007216:	d802      	bhi.n	800721e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <prvAddNewTaskToReadyList+0xbc>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800721e:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <prvAddNewTaskToReadyList+0xc4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a1b      	ldr	r2, [pc, #108]	; (8007294 <prvAddNewTaskToReadyList+0xc4>)
 8007226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	409a      	lsls	r2, r3
 8007230:	4b19      	ldr	r3, [pc, #100]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4313      	orrs	r3, r2
 8007236:	4a18      	ldr	r2, [pc, #96]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <prvAddNewTaskToReadyList+0xcc>)
 8007248:	441a      	add	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe feb6 	bl	8005fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007256:	f001 f80d 	bl	8008274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <prvAddNewTaskToReadyList+0xc0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007262:	4b0a      	ldr	r3, [pc, #40]	; (800728c <prvAddNewTaskToReadyList+0xbc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	429a      	cmp	r2, r3
 800726e:	d207      	bcs.n	8007280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <prvAddNewTaskToReadyList+0xd0>)
 8007272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20005590 	.word	0x20005590
 800728c:	20005490 	.word	0x20005490
 8007290:	2000559c 	.word	0x2000559c
 8007294:	200055ac 	.word	0x200055ac
 8007298:	20005598 	.word	0x20005598
 800729c:	20005494 	.word	0x20005494
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d017      	beq.n	80072e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <vTaskDelay+0x60>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <vTaskDelay+0x30>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60bb      	str	r3, [r7, #8]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072d4:	f000 f884 	bl	80073e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fe06 	bl	8007eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072e0:	f000 f88c 	bl	80073fc <xTaskResumeAll>
 80072e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d107      	bne.n	80072fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <vTaskDelay+0x64>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200055b8 	.word	0x200055b8
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800731a:	463a      	mov	r2, r7
 800731c:	1d39      	adds	r1, r7, #4
 800731e:	f107 0308 	add.w	r3, r7, #8
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 f936 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	9202      	str	r2, [sp, #8]
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	460a      	mov	r2, r1
 800733a:	4921      	ldr	r1, [pc, #132]	; (80073c0 <vTaskStartScheduler+0xb4>)
 800733c:	4821      	ldr	r0, [pc, #132]	; (80073c4 <vTaskStartScheduler+0xb8>)
 800733e:	f7ff fe07 	bl	8006f50 <xTaskCreateStatic>
 8007342:	4603      	mov	r3, r0
 8007344:	4a20      	ldr	r2, [pc, #128]	; (80073c8 <vTaskStartScheduler+0xbc>)
 8007346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007348:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <vTaskStartScheduler+0xbc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e001      	b.n	800735a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d11b      	bne.n	8007398 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	613b      	str	r3, [r7, #16]
}
 8007372:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <vTaskStartScheduler+0xc0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	334c      	adds	r3, #76	; 0x4c
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <vTaskStartScheduler+0xc4>)
 800737c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <vTaskStartScheduler+0xc8>)
 8007380:	f04f 32ff 	mov.w	r2, #4294967295
 8007384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <vTaskStartScheduler+0xcc>)
 8007388:	2201      	movs	r2, #1
 800738a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800738c:	4b13      	ldr	r3, [pc, #76]	; (80073dc <vTaskStartScheduler+0xd0>)
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007392:	f000 fe9d 	bl	80080d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007396:	e00e      	b.n	80073b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d10a      	bne.n	80073b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <vTaskStartScheduler+0xa8>
}
 80073b6:	bf00      	nop
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	080142c4 	.word	0x080142c4
 80073c4:	080079c1 	.word	0x080079c1
 80073c8:	200055b4 	.word	0x200055b4
 80073cc:	20005490 	.word	0x20005490
 80073d0:	20000030 	.word	0x20000030
 80073d4:	200055b0 	.word	0x200055b0
 80073d8:	2000559c 	.word	0x2000559c
 80073dc:	20005594 	.word	0x20005594

080073e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <vTaskSuspendAll+0x18>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	4a03      	ldr	r2, [pc, #12]	; (80073f8 <vTaskSuspendAll+0x18>)
 80073ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200055b8 	.word	0x200055b8

080073fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800740a:	4b41      	ldr	r3, [pc, #260]	; (8007510 <xTaskResumeAll+0x114>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xTaskResumeAll+0x2c>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	603b      	str	r3, [r7, #0]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007428:	f000 fef4 	bl	8008214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800742c:	4b38      	ldr	r3, [pc, #224]	; (8007510 <xTaskResumeAll+0x114>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	4a37      	ldr	r2, [pc, #220]	; (8007510 <xTaskResumeAll+0x114>)
 8007434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <xTaskResumeAll+0x114>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d161      	bne.n	8007502 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800743e:	4b35      	ldr	r3, [pc, #212]	; (8007514 <xTaskResumeAll+0x118>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d05d      	beq.n	8007502 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007446:	e02e      	b.n	80074a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007448:	4b33      	ldr	r3, [pc, #204]	; (8007518 <xTaskResumeAll+0x11c>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3318      	adds	r3, #24
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fe11 	bl	800607c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fe0c 	bl	800607c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	2201      	movs	r2, #1
 800746a:	409a      	lsls	r2, r3
 800746c:	4b2b      	ldr	r3, [pc, #172]	; (800751c <xTaskResumeAll+0x120>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4313      	orrs	r3, r2
 8007472:	4a2a      	ldr	r2, [pc, #168]	; (800751c <xTaskResumeAll+0x120>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4a27      	ldr	r2, [pc, #156]	; (8007520 <xTaskResumeAll+0x124>)
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3304      	adds	r3, #4
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7fe fd98 	bl	8005fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	4b23      	ldr	r3, [pc, #140]	; (8007524 <xTaskResumeAll+0x128>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80074a0:	4b21      	ldr	r3, [pc, #132]	; (8007528 <xTaskResumeAll+0x12c>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074a6:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <xTaskResumeAll+0x11c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1cc      	bne.n	8007448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074b4:	f000 fb3e 	bl	8007b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074b8:	4b1c      	ldr	r3, [pc, #112]	; (800752c <xTaskResumeAll+0x130>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d010      	beq.n	80074e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074c4:	f000 f858 	bl	8007578 <xTaskIncrementTick>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <xTaskResumeAll+0x12c>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f1      	bne.n	80074c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80074e0:	4b12      	ldr	r3, [pc, #72]	; (800752c <xTaskResumeAll+0x130>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <xTaskResumeAll+0x12c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d009      	beq.n	8007502 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <xTaskResumeAll+0x134>)
 80074f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007502:	f000 feb7 	bl	8008274 <vPortExitCritical>

	return xAlreadyYielded;
 8007506:	68bb      	ldr	r3, [r7, #8]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200055b8 	.word	0x200055b8
 8007514:	20005590 	.word	0x20005590
 8007518:	20005550 	.word	0x20005550
 800751c:	20005598 	.word	0x20005598
 8007520:	20005494 	.word	0x20005494
 8007524:	20005490 	.word	0x20005490
 8007528:	200055a4 	.word	0x200055a4
 800752c:	200055a0 	.word	0x200055a0
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <xTaskGetTickCount+0x1c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007540:	687b      	ldr	r3, [r7, #4]
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20005594 	.word	0x20005594

08007554 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800755a:	f000 ff3d 	bl	80083d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <xTaskGetTickCountFromISR+0x20>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007568:	683b      	ldr	r3, [r7, #0]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20005594 	.word	0x20005594

08007578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007582:	4b4e      	ldr	r3, [pc, #312]	; (80076bc <xTaskIncrementTick+0x144>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 808e 	bne.w	80076a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800758c:	4b4c      	ldr	r3, [pc, #304]	; (80076c0 <xTaskIncrementTick+0x148>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007594:	4a4a      	ldr	r2, [pc, #296]	; (80076c0 <xTaskIncrementTick+0x148>)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d120      	bne.n	80075e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075a0:	4b48      	ldr	r3, [pc, #288]	; (80076c4 <xTaskIncrementTick+0x14c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	603b      	str	r3, [r7, #0]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <xTaskIncrementTick+0x46>
 80075c0:	4b40      	ldr	r3, [pc, #256]	; (80076c4 <xTaskIncrementTick+0x14c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	4b40      	ldr	r3, [pc, #256]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3e      	ldr	r2, [pc, #248]	; (80076c4 <xTaskIncrementTick+0x14c>)
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4a3e      	ldr	r2, [pc, #248]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	4b3d      	ldr	r3, [pc, #244]	; (80076cc <xTaskIncrementTick+0x154>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	4a3c      	ldr	r2, [pc, #240]	; (80076cc <xTaskIncrementTick+0x154>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	f000 faa9 	bl	8007b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075e2:	4b3b      	ldr	r3, [pc, #236]	; (80076d0 <xTaskIncrementTick+0x158>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d348      	bcc.n	800767e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ec:	4b35      	ldr	r3, [pc, #212]	; (80076c4 <xTaskIncrementTick+0x14c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f6:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <xTaskIncrementTick+0x158>)
 80075f8:	f04f 32ff 	mov.w	r2, #4294967295
 80075fc:	601a      	str	r2, [r3, #0]
					break;
 80075fe:	e03e      	b.n	800767e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	4b30      	ldr	r3, [pc, #192]	; (80076c4 <xTaskIncrementTick+0x14c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d203      	bcs.n	8007620 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007618:	4a2d      	ldr	r2, [pc, #180]	; (80076d0 <xTaskIncrementTick+0x158>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800761e:	e02e      	b.n	800767e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3304      	adds	r3, #4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fd29 	bl	800607c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3318      	adds	r3, #24
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fd20 	bl	800607c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	2201      	movs	r2, #1
 8007642:	409a      	lsls	r2, r3
 8007644:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <xTaskIncrementTick+0x15c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4313      	orrs	r3, r2
 800764a:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <xTaskIncrementTick+0x15c>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <xTaskIncrementTick+0x160>)
 800765c:	441a      	add	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7fe fcac 	bl	8005fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <xTaskIncrementTick+0x164>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d3b9      	bcc.n	80075ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767c:	e7b6      	b.n	80075ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800767e:	4b17      	ldr	r3, [pc, #92]	; (80076dc <xTaskIncrementTick+0x164>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4914      	ldr	r1, [pc, #80]	; (80076d8 <xTaskIncrementTick+0x160>)
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d901      	bls.n	800769a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800769a:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <xTaskIncrementTick+0x168>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e004      	b.n	80076b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076a8:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <xTaskIncrementTick+0x16c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	4a0d      	ldr	r2, [pc, #52]	; (80076e4 <xTaskIncrementTick+0x16c>)
 80076b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076b2:	697b      	ldr	r3, [r7, #20]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	200055b8 	.word	0x200055b8
 80076c0:	20005594 	.word	0x20005594
 80076c4:	20005548 	.word	0x20005548
 80076c8:	2000554c 	.word	0x2000554c
 80076cc:	200055a8 	.word	0x200055a8
 80076d0:	200055b0 	.word	0x200055b0
 80076d4:	20005598 	.word	0x20005598
 80076d8:	20005494 	.word	0x20005494
 80076dc:	20005490 	.word	0x20005490
 80076e0:	200055a4 	.word	0x200055a4
 80076e4:	200055a0 	.word	0x200055a0

080076e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <vTaskSwitchContext+0xac>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076f6:	4b28      	ldr	r3, [pc, #160]	; (8007798 <vTaskSwitchContext+0xb0>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076fc:	e044      	b.n	8007788 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80076fe:	4b26      	ldr	r3, [pc, #152]	; (8007798 <vTaskSwitchContext+0xb0>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007704:	4b25      	ldr	r3, [pc, #148]	; (800779c <vTaskSwitchContext+0xb4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	fab3 f383 	clz	r3, r3
 8007710:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	f1c3 031f 	rsb	r3, r3, #31
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	4921      	ldr	r1, [pc, #132]	; (80077a0 <vTaskSwitchContext+0xb8>)
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <vTaskSwitchContext+0x5c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vTaskSwitchContext+0x5a>
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <vTaskSwitchContext+0xb8>)
 8007750:	4413      	add	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	3308      	adds	r3, #8
 8007766:	429a      	cmp	r2, r3
 8007768:	d104      	bne.n	8007774 <vTaskSwitchContext+0x8c>
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	4a0a      	ldr	r2, [pc, #40]	; (80077a4 <vTaskSwitchContext+0xbc>)
 800777c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <vTaskSwitchContext+0xbc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	334c      	adds	r3, #76	; 0x4c
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <vTaskSwitchContext+0xc0>)
 8007786:	6013      	str	r3, [r2, #0]
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	200055b8 	.word	0x200055b8
 8007798:	200055a4 	.word	0x200055a4
 800779c:	20005598 	.word	0x20005598
 80077a0:	20005494 	.word	0x20005494
 80077a4:	20005490 	.word	0x20005490
 80077a8:	20000030 	.word	0x20000030

080077ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vTaskPlaceOnEventList+0x44>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3318      	adds	r3, #24
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe fc15 	bl	800600a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e0:	2101      	movs	r1, #1
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	f000 fb82 	bl	8007eec <prvAddCurrentTaskToDelayedList>
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20005490 	.word	0x20005490

080077f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	3318      	adds	r3, #24
 8007824:	4618      	mov	r0, r3
 8007826:	f7fe fc29 	bl	800607c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800782a:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <xTaskRemoveFromEventList+0xac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11c      	bne.n	800786c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fc20 	bl	800607c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	2201      	movs	r2, #1
 8007842:	409a      	lsls	r2, r3
 8007844:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <xTaskRemoveFromEventList+0xb0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4313      	orrs	r3, r2
 800784a:	4a16      	ldr	r2, [pc, #88]	; (80078a4 <xTaskRemoveFromEventList+0xb0>)
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <xTaskRemoveFromEventList+0xb4>)
 800785c:	441a      	add	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3304      	adds	r3, #4
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fe fbac 	bl	8005fc2 <vListInsertEnd>
 800786a:	e005      	b.n	8007878 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3318      	adds	r3, #24
 8007870:	4619      	mov	r1, r3
 8007872:	480e      	ldr	r0, [pc, #56]	; (80078ac <xTaskRemoveFromEventList+0xb8>)
 8007874:	f7fe fba5 	bl	8005fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <xTaskRemoveFromEventList+0xbc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	429a      	cmp	r2, r3
 8007884:	d905      	bls.n	8007892 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800788a:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <xTaskRemoveFromEventList+0xc0>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e001      	b.n	8007896 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007896:	697b      	ldr	r3, [r7, #20]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200055b8 	.word	0x200055b8
 80078a4:	20005598 	.word	0x20005598
 80078a8:	20005494 	.word	0x20005494
 80078ac:	20005550 	.word	0x20005550
 80078b0:	20005490 	.word	0x20005490
 80078b4:	200055a4 	.word	0x200055a4

080078b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <vTaskInternalSetTimeOutState+0x24>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <vTaskInternalSetTimeOutState+0x28>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	605a      	str	r2, [r3, #4]
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	200055a8 	.word	0x200055a8
 80078e0:	20005594 	.word	0x20005594

080078e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	613b      	str	r3, [r7, #16]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007926:	f000 fc75 	bl	8008214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <xTaskCheckForTimeOut+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d102      	bne.n	800794a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	e023      	b.n	8007992 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <xTaskCheckForTimeOut+0xc0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d007      	beq.n	8007966 <xTaskCheckForTimeOut+0x82>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	429a      	cmp	r2, r3
 800795e:	d302      	bcc.n	8007966 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007960:	2301      	movs	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e015      	b.n	8007992 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	429a      	cmp	r2, r3
 800796e:	d20b      	bcs.n	8007988 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff9b 	bl	80078b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	e004      	b.n	8007992 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007992:	f000 fc6f 	bl	8008274 <vPortExitCritical>

	return xReturn;
 8007996:	69fb      	ldr	r3, [r7, #28]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20005594 	.word	0x20005594
 80079a4:	200055a8 	.word	0x200055a8

080079a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079ac:	4b03      	ldr	r3, [pc, #12]	; (80079bc <vTaskMissedYield+0x14>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
}
 80079b2:	bf00      	nop
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	200055a4 	.word	0x200055a4

080079c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079c8:	f000 f852 	bl	8007a70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvIdleTask+0x28>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d9f9      	bls.n	80079c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <prvIdleTask+0x2c>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079e4:	e7f0      	b.n	80079c8 <prvIdleTask+0x8>
 80079e6:	bf00      	nop
 80079e8:	20005494 	.word	0x20005494
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	e00c      	b.n	8007a16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a12      	ldr	r2, [pc, #72]	; (8007a50 <prvInitialiseTaskLists+0x60>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe faac 	bl	8005f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3301      	adds	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d9ef      	bls.n	80079fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a1c:	480d      	ldr	r0, [pc, #52]	; (8007a54 <prvInitialiseTaskLists+0x64>)
 8007a1e:	f7fe faa3 	bl	8005f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a22:	480d      	ldr	r0, [pc, #52]	; (8007a58 <prvInitialiseTaskLists+0x68>)
 8007a24:	f7fe faa0 	bl	8005f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a28:	480c      	ldr	r0, [pc, #48]	; (8007a5c <prvInitialiseTaskLists+0x6c>)
 8007a2a:	f7fe fa9d 	bl	8005f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a2e:	480c      	ldr	r0, [pc, #48]	; (8007a60 <prvInitialiseTaskLists+0x70>)
 8007a30:	f7fe fa9a 	bl	8005f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a34:	480b      	ldr	r0, [pc, #44]	; (8007a64 <prvInitialiseTaskLists+0x74>)
 8007a36:	f7fe fa97 	bl	8005f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <prvInitialiseTaskLists+0x78>)
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <prvInitialiseTaskLists+0x64>)
 8007a3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <prvInitialiseTaskLists+0x7c>)
 8007a42:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <prvInitialiseTaskLists+0x68>)
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20005494 	.word	0x20005494
 8007a54:	20005520 	.word	0x20005520
 8007a58:	20005534 	.word	0x20005534
 8007a5c:	20005550 	.word	0x20005550
 8007a60:	20005564 	.word	0x20005564
 8007a64:	2000557c 	.word	0x2000557c
 8007a68:	20005548 	.word	0x20005548
 8007a6c:	2000554c 	.word	0x2000554c

08007a70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a76:	e019      	b.n	8007aac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a78:	f000 fbcc 	bl	8008214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7c:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <prvCheckTasksWaitingTermination+0x50>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe faf7 	bl	800607c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <prvCheckTasksWaitingTermination+0x54>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	4a0b      	ldr	r2, [pc, #44]	; (8007ac4 <prvCheckTasksWaitingTermination+0x54>)
 8007a96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvCheckTasksWaitingTermination+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4a0a      	ldr	r2, [pc, #40]	; (8007ac8 <prvCheckTasksWaitingTermination+0x58>)
 8007aa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aa2:	f000 fbe7 	bl	8008274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f810 	bl	8007acc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <prvCheckTasksWaitingTermination+0x58>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e1      	bne.n	8007a78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20005564 	.word	0x20005564
 8007ac4:	20005590 	.word	0x20005590
 8007ac8:	20005578 	.word	0x20005578

08007acc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	334c      	adds	r3, #76	; 0x4c
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f00b fcbd 	bl	8013458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d108      	bne.n	8007afa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fd7f 	bl	80085f0 <vPortFree>
				vPortFree( pxTCB );
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fd7c 	bl	80085f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007af8:	e018      	b.n	8007b2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d103      	bne.n	8007b0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fd73 	bl	80085f0 <vPortFree>
	}
 8007b0a:	e00f      	b.n	8007b2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d00a      	beq.n	8007b2c <prvDeleteTCB+0x60>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60fb      	str	r3, [r7, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <prvDeleteTCB+0x5e>
	}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <prvResetNextTaskUnblockTime+0x38>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvResetNextTaskUnblockTime+0x3c>)
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b4c:	e008      	b.n	8007b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <prvResetNextTaskUnblockTime+0x38>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a04      	ldr	r2, [pc, #16]	; (8007b70 <prvResetNextTaskUnblockTime+0x3c>)
 8007b5e:	6013      	str	r3, [r2, #0]
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20005548 	.word	0x20005548
 8007b70:	200055b0 	.word	0x200055b0

08007b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <xTaskGetSchedulerState+0x34>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b82:	2301      	movs	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]
 8007b86:	e008      	b.n	8007b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <xTaskGetSchedulerState+0x38>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b90:	2302      	movs	r3, #2
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e001      	b.n	8007b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b9a:	687b      	ldr	r3, [r7, #4]
	}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	2000559c 	.word	0x2000559c
 8007bac:	200055b8 	.word	0x200055b8

08007bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d05e      	beq.n	8007c84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <xTaskPriorityInherit+0xe0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d24e      	bcs.n	8007c72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db06      	blt.n	8007bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	; (8007c90 <xTaskPriorityInherit+0xe0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f1c3 0207 	rsb	r2, r3, #7
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6959      	ldr	r1, [r3, #20]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <xTaskPriorityInherit+0xe4>)
 8007bfc:	4413      	add	r3, r2
 8007bfe:	4299      	cmp	r1, r3
 8007c00:	d12f      	bne.n	8007c62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fa38 	bl	800607c <uxListRemove>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	2201      	movs	r2, #1
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	43da      	mvns	r2, r3
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <xTaskPriorityInherit+0xe8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4013      	ands	r3, r2
 8007c24:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <xTaskPriorityInherit+0xe8>)
 8007c26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <xTaskPriorityInherit+0xe0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	2201      	movs	r2, #1
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	4b17      	ldr	r3, [pc, #92]	; (8007c98 <xTaskPriorityInherit+0xe8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <xTaskPriorityInherit+0xe8>)
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a10      	ldr	r2, [pc, #64]	; (8007c94 <xTaskPriorityInherit+0xe4>)
 8007c52:	441a      	add	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe f9b1 	bl	8005fc2 <vListInsertEnd>
 8007c60:	e004      	b.n	8007c6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <xTaskPriorityInherit+0xe0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e008      	b.n	8007c84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <xTaskPriorityInherit+0xe0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d201      	bcs.n	8007c84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c84:	68fb      	ldr	r3, [r7, #12]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20005490 	.word	0x20005490
 8007c94:	20005494 	.word	0x20005494
 8007c98:	20005598 	.word	0x20005598

08007c9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d06e      	beq.n	8007d90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cb2:	4b3a      	ldr	r3, [pc, #232]	; (8007d9c <xTaskPriorityDisinherit+0x100>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d00a      	beq.n	8007cd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf4:	1e5a      	subs	r2, r3, #1
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d044      	beq.n	8007d90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d140      	bne.n	8007d90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe f9b2 	bl	800607c <uxListRemove>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d115      	bne.n	8007d4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	491f      	ldr	r1, [pc, #124]	; (8007da0 <xTaskPriorityDisinherit+0x104>)
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <xTaskPriorityDisinherit+0xae>
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	43da      	mvns	r2, r3
 8007d40:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <xTaskPriorityDisinherit+0x108>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4013      	ands	r3, r2
 8007d46:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <xTaskPriorityDisinherit+0x108>)
 8007d48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	f1c3 0207 	rsb	r2, r3, #7
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	2201      	movs	r2, #1
 8007d64:	409a      	lsls	r2, r3
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <xTaskPriorityDisinherit+0x108>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	; (8007da4 <xTaskPriorityDisinherit+0x108>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <xTaskPriorityDisinherit+0x104>)
 8007d7e:	441a      	add	r2, r3
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fe f91b 	bl	8005fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d90:	697b      	ldr	r3, [r7, #20]
	}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20005490 	.word	0x20005490
 8007da0:	20005494 	.word	0x20005494
 8007da4:	20005598 	.word	0x20005598

08007da8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d077      	beq.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d902      	bls.n	8007dee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e002      	b.n	8007df4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d058      	beq.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d153      	bne.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e08:	4b2b      	ldr	r3, [pc, #172]	; (8007eb8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d10a      	bne.n	8007e28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60bb      	str	r3, [r7, #8]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db04      	blt.n	8007e46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f1c3 0207 	rsb	r2, r3, #7
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	6959      	ldr	r1, [r3, #20]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a19      	ldr	r2, [pc, #100]	; (8007ebc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007e56:	4413      	add	r3, r2
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d129      	bne.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f90b 	bl	800607c <uxListRemove>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	2201      	movs	r2, #1
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43da      	mvns	r2, r3
 8007e78:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	4a10      	ldr	r2, [pc, #64]	; (8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	2201      	movs	r2, #1
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	4a0b      	ldr	r2, [pc, #44]	; (8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4a06      	ldr	r2, [pc, #24]	; (8007ebc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007ea2:	441a      	add	r2, r3
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7fe f889 	bl	8005fc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb0:	bf00      	nop
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20005490 	.word	0x20005490
 8007ebc:	20005494 	.word	0x20005494
 8007ec0:	20005598 	.word	0x20005598

08007ec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ed6:	3201      	adds	r2, #1
 8007ed8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007eda:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007edc:	681b      	ldr	r3, [r3, #0]
	}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	20005490 	.word	0x20005490

08007eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ef6:	4b29      	ldr	r3, [pc, #164]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007efc:	4b28      	ldr	r3, [pc, #160]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe f8ba 	bl	800607c <uxListRemove>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	2201      	movs	r2, #1
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	43da      	mvns	r2, r3
 8007f1c:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4013      	ands	r3, r2
 8007f22:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d10a      	bne.n	8007f44 <prvAddCurrentTaskToDelayedList+0x58>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	481a      	ldr	r0, [pc, #104]	; (8007fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f3e:	f7fe f840 	bl	8005fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f42:	e026      	b.n	8007f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f4c:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d209      	bcs.n	8007f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5c:	4b13      	ldr	r3, [pc, #76]	; (8007fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fe f84e 	bl	800600a <vListInsert>
}
 8007f6e:	e010      	b.n	8007f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe f844 	bl	800600a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d202      	bcs.n	8007f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f8c:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6013      	str	r3, [r2, #0]
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20005594 	.word	0x20005594
 8007fa0:	20005490 	.word	0x20005490
 8007fa4:	20005598 	.word	0x20005598
 8007fa8:	2000557c 	.word	0x2000557c
 8007fac:	2000554c 	.word	0x2000554c
 8007fb0:	20005548 	.word	0x20005548
 8007fb4:	200055b0 	.word	0x200055b0

08007fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3b04      	subs	r3, #4
 8007fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f023 0201 	bic.w	r2, r3, #1
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3b04      	subs	r3, #4
 8007fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fe8:	4a0c      	ldr	r2, [pc, #48]	; (800801c <pxPortInitialiseStack+0x64>)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b14      	subs	r3, #20
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b04      	subs	r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f06f 0202 	mvn.w	r2, #2
 8008006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b20      	subs	r3, #32
 800800c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800800e:	68fb      	ldr	r3, [r7, #12]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	08008021 	.word	0x08008021

08008020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <prvTaskExitError+0x54>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008032:	d00a      	beq.n	800804a <prvTaskExitError+0x2a>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <prvTaskExitError+0x28>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60bb      	str	r3, [r7, #8]
}
 800805c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800805e:	bf00      	nop
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0fc      	beq.n	8008060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000020 	.word	0x20000020
	...

08008080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <pxCurrentTCBConst2>)
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	6808      	ldr	r0, [r1, #0]
 8008086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	f380 8809 	msr	PSP, r0
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f380 8811 	msr	BASEPRI, r0
 800809a:	4770      	bx	lr
 800809c:	f3af 8000 	nop.w

080080a0 <pxCurrentTCBConst2>:
 80080a0:	20005490 	.word	0x20005490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080a8:	4808      	ldr	r0, [pc, #32]	; (80080cc <prvPortStartFirstTask+0x24>)
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f380 8808 	msr	MSP, r0
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8814 	msr	CONTROL, r0
 80080ba:	b662      	cpsie	i
 80080bc:	b661      	cpsie	f
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	df00      	svc	0
 80080c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ca:	bf00      	nop
 80080cc:	e000ed08 	.word	0xe000ed08

080080d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080d6:	4b46      	ldr	r3, [pc, #280]	; (80081f0 <xPortStartScheduler+0x120>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a46      	ldr	r2, [pc, #280]	; (80081f4 <xPortStartScheduler+0x124>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d10a      	bne.n	80080f6 <xPortStartScheduler+0x26>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	613b      	str	r3, [r7, #16]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <xPortStartScheduler+0x120>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a3f      	ldr	r2, [pc, #252]	; (80081f8 <xPortStartScheduler+0x128>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10a      	bne.n	8008116 <xPortStartScheduler+0x46>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008116:	4b39      	ldr	r3, [pc, #228]	; (80081fc <xPortStartScheduler+0x12c>)
 8008118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4b31      	ldr	r3, [pc, #196]	; (8008200 <xPortStartScheduler+0x130>)
 800813c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800813e:	4b31      	ldr	r3, [pc, #196]	; (8008204 <xPortStartScheduler+0x134>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008144:	e009      	b.n	800815a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008146:	4b2f      	ldr	r3, [pc, #188]	; (8008204 <xPortStartScheduler+0x134>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3b01      	subs	r3, #1
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <xPortStartScheduler+0x134>)
 800814e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d0ef      	beq.n	8008146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008166:	4b27      	ldr	r3, [pc, #156]	; (8008204 <xPortStartScheduler+0x134>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1c3 0307 	rsb	r3, r3, #7
 800816e:	2b04      	cmp	r3, #4
 8008170:	d00a      	beq.n	8008188 <xPortStartScheduler+0xb8>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60bb      	str	r3, [r7, #8]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008188:	4b1e      	ldr	r3, [pc, #120]	; (8008204 <xPortStartScheduler+0x134>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <xPortStartScheduler+0x134>)
 8008190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <xPortStartScheduler+0x134>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800819a:	4a1a      	ldr	r2, [pc, #104]	; (8008204 <xPortStartScheduler+0x134>)
 800819c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081a6:	4b18      	ldr	r3, [pc, #96]	; (8008208 <xPortStartScheduler+0x138>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <xPortStartScheduler+0x138>)
 80081ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <xPortStartScheduler+0x138>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a14      	ldr	r2, [pc, #80]	; (8008208 <xPortStartScheduler+0x138>)
 80081b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081be:	f000 f8dd 	bl	800837c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <xPortStartScheduler+0x13c>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081c8:	f000 f8fc 	bl	80083c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <xPortStartScheduler+0x140>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <xPortStartScheduler+0x140>)
 80081d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081d8:	f7ff ff66 	bl	80080a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081dc:	f7ff fa84 	bl	80076e8 <vTaskSwitchContext>
	prvTaskExitError();
 80081e0:	f7ff ff1e 	bl	8008020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	e000ed00 	.word	0xe000ed00
 80081f4:	410fc271 	.word	0x410fc271
 80081f8:	410fc270 	.word	0x410fc270
 80081fc:	e000e400 	.word	0xe000e400
 8008200:	200055bc 	.word	0x200055bc
 8008204:	200055c0 	.word	0x200055c0
 8008208:	e000ed20 	.word	0xe000ed20
 800820c:	20000020 	.word	0x20000020
 8008210:	e000ef34 	.word	0xe000ef34

08008214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800822e:	4b0f      	ldr	r3, [pc, #60]	; (800826c <vPortEnterCritical+0x58>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a0d      	ldr	r2, [pc, #52]	; (800826c <vPortEnterCritical+0x58>)
 8008236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <vPortEnterCritical+0x58>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10f      	bne.n	8008260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortEnterCritical+0x5c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <vPortEnterCritical+0x4c>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	603b      	str	r3, [r7, #0]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <vPortEnterCritical+0x4a>
	}
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20000020 	.word	0x20000020
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <vPortExitCritical+0x50>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <vPortExitCritical+0x24>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	607b      	str	r3, [r7, #4]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <vPortExitCritical+0x50>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <vPortExitCritical+0x50>)
 80082a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <vPortExitCritical+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <vPortExitCritical+0x42>
 80082aa:	2300      	movs	r3, #0
 80082ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f383 8811 	msr	BASEPRI, r3
}
 80082b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000020 	.word	0x20000020
	...

080082d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082d0:	f3ef 8009 	mrs	r0, PSP
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <pxCurrentTCBConst>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	f01e 0f10 	tst.w	lr, #16
 80082e0:	bf08      	it	eq
 80082e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082f4:	f380 8811 	msr	BASEPRI, r0
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f7ff f9f2 	bl	80076e8 <vTaskSwitchContext>
 8008304:	f04f 0000 	mov.w	r0, #0
 8008308:	f380 8811 	msr	BASEPRI, r0
 800830c:	bc09      	pop	{r0, r3}
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	6808      	ldr	r0, [r1, #0]
 8008312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008316:	f01e 0f10 	tst.w	lr, #16
 800831a:	bf08      	it	eq
 800831c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008320:	f380 8809 	msr	PSP, r0
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst>:
 8008330:	20005490 	.word	0x20005490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008352:	f7ff f911 	bl	8007578 <xTaskIncrementTick>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <SysTick_Handler+0x40>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <vPortSetupTimerInterrupt+0x34>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <vPortSetupTimerInterrupt+0x38>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <vPortSetupTimerInterrupt+0x3c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <vPortSetupTimerInterrupt+0x40>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	099b      	lsrs	r3, r3, #6
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <vPortSetupTimerInterrupt+0x44>)
 800839a:	3b01      	subs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800839e:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <vPortSetupTimerInterrupt+0x34>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	e000e010 	.word	0xe000e010
 80083b4:	e000e018 	.word	0xe000e018
 80083b8:	20000000 	.word	0x20000000
 80083bc:	10624dd3 	.word	0x10624dd3
 80083c0:	e000e014 	.word	0xe000e014

080083c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083d4 <vPortEnableVFP+0x10>
 80083c8:	6801      	ldr	r1, [r0, #0]
 80083ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083ce:	6001      	str	r1, [r0, #0]
 80083d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083d2:	bf00      	nop
 80083d4:	e000ed88 	.word	0xe000ed88

080083d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083de:	f3ef 8305 	mrs	r3, IPSR
 80083e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b0f      	cmp	r3, #15
 80083e8:	d914      	bls.n	8008414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ea:	4a17      	ldr	r2, [pc, #92]	; (8008448 <vPortValidateInterruptPriority+0x70>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <vPortValidateInterruptPriority+0x74>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	7afa      	ldrb	r2, [r7, #11]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d20a      	bcs.n	8008414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <vPortValidateInterruptPriority+0x78>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <vPortValidateInterruptPriority+0x7c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d90a      	bls.n	800843a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	603b      	str	r3, [r7, #0]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <vPortValidateInterruptPriority+0x60>
	}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	e000e3f0 	.word	0xe000e3f0
 800844c:	200055bc 	.word	0x200055bc
 8008450:	e000ed0c 	.word	0xe000ed0c
 8008454:	200055c0 	.word	0x200055c0

08008458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	; 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008464:	f7fe ffbc 	bl	80073e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008468:	4b5b      	ldr	r3, [pc, #364]	; (80085d8 <pvPortMalloc+0x180>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008470:	f000 f920 	bl	80086b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008474:	4b59      	ldr	r3, [pc, #356]	; (80085dc <pvPortMalloc+0x184>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 8093 	bne.w	80085a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01d      	beq.n	80084c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008488:	2208      	movs	r2, #8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d014      	beq.n	80084c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	3308      	adds	r3, #8
 80084a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <pvPortMalloc+0x6c>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	617b      	str	r3, [r7, #20]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d06e      	beq.n	80085a8 <pvPortMalloc+0x150>
 80084ca:	4b45      	ldr	r3, [pc, #276]	; (80085e0 <pvPortMalloc+0x188>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d869      	bhi.n	80085a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084d4:	4b43      	ldr	r3, [pc, #268]	; (80085e4 <pvPortMalloc+0x18c>)
 80084d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084d8:	4b42      	ldr	r3, [pc, #264]	; (80085e4 <pvPortMalloc+0x18c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084de:	e004      	b.n	80084ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d903      	bls.n	80084fc <pvPortMalloc+0xa4>
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f1      	bne.n	80084e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084fc:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <pvPortMalloc+0x180>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008502:	429a      	cmp	r2, r3
 8008504:	d050      	beq.n	80085a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2208      	movs	r2, #8
 800850c:	4413      	add	r3, r2
 800850e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	2308      	movs	r3, #8
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	429a      	cmp	r2, r3
 8008526:	d91f      	bls.n	8008568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <pvPortMalloc+0xf8>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	613b      	str	r3, [r7, #16]
}
 800854c:	bf00      	nop
 800854e:	e7fe      	b.n	800854e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	1ad2      	subs	r2, r2, r3
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008562:	69b8      	ldr	r0, [r7, #24]
 8008564:	f000 f908 	bl	8008778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008568:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <pvPortMalloc+0x188>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <pvPortMalloc+0x188>)
 8008574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008576:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <pvPortMalloc+0x188>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4b1b      	ldr	r3, [pc, #108]	; (80085e8 <pvPortMalloc+0x190>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d203      	bcs.n	800858a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008582:	4b17      	ldr	r3, [pc, #92]	; (80085e0 <pvPortMalloc+0x188>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <pvPortMalloc+0x190>)
 8008588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	4b13      	ldr	r3, [pc, #76]	; (80085dc <pvPortMalloc+0x184>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	431a      	orrs	r2, r3
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <pvPortMalloc+0x194>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a11      	ldr	r2, [pc, #68]	; (80085ec <pvPortMalloc+0x194>)
 80085a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085a8:	f7fe ff28 	bl	80073fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <pvPortMalloc+0x174>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	60fb      	str	r3, [r7, #12]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <pvPortMalloc+0x172>
	return pvReturn;
 80085cc:	69fb      	ldr	r3, [r7, #28]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	200091cc 	.word	0x200091cc
 80085dc:	200091e0 	.word	0x200091e0
 80085e0:	200091d0 	.word	0x200091d0
 80085e4:	200091c4 	.word	0x200091c4
 80085e8:	200091d4 	.word	0x200091d4
 80085ec:	200091d8 	.word	0x200091d8

080085f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d04d      	beq.n	800869e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008602:	2308      	movs	r3, #8
 8008604:	425b      	negs	r3, r3
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	4413      	add	r3, r2
 800860a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <vPortFree+0xb8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <vPortFree+0x44>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <vPortFree+0x62>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	60bb      	str	r3, [r7, #8]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <vPortFree+0xb8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01e      	beq.n	800869e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11a      	bne.n	800869e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <vPortFree+0xb8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	43db      	mvns	r3, r3
 8008672:	401a      	ands	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008678:	f7fe feb2 	bl	80073e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <vPortFree+0xbc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4413      	add	r3, r2
 8008686:	4a09      	ldr	r2, [pc, #36]	; (80086ac <vPortFree+0xbc>)
 8008688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800868a:	6938      	ldr	r0, [r7, #16]
 800868c:	f000 f874 	bl	8008778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <vPortFree+0xc0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3301      	adds	r3, #1
 8008696:	4a06      	ldr	r2, [pc, #24]	; (80086b0 <vPortFree+0xc0>)
 8008698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800869a:	f7fe feaf 	bl	80073fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800869e:	bf00      	nop
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200091e0 	.word	0x200091e0
 80086ac:	200091d0 	.word	0x200091d0
 80086b0:	200091dc 	.word	0x200091dc

080086b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086c0:	4b27      	ldr	r3, [pc, #156]	; (8008760 <prvHeapInit+0xac>)
 80086c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00c      	beq.n	80086e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3307      	adds	r3, #7
 80086d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0307 	bic.w	r3, r3, #7
 80086da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <prvHeapInit+0xac>)
 80086e4:	4413      	add	r3, r2
 80086e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086ec:	4a1d      	ldr	r2, [pc, #116]	; (8008764 <prvHeapInit+0xb0>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086f2:	4b1c      	ldr	r3, [pc, #112]	; (8008764 <prvHeapInit+0xb0>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008700:	2208      	movs	r2, #8
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0307 	bic.w	r3, r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4a15      	ldr	r2, [pc, #84]	; (8008768 <prvHeapInit+0xb4>)
 8008714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <prvHeapInit+0xb4>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800871e:	4b12      	ldr	r3, [pc, #72]	; (8008768 <prvHeapInit+0xb4>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <prvHeapInit+0xb4>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	4a0a      	ldr	r2, [pc, #40]	; (800876c <prvHeapInit+0xb8>)
 8008742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	4a09      	ldr	r2, [pc, #36]	; (8008770 <prvHeapInit+0xbc>)
 800874a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <prvHeapInit+0xc0>)
 800874e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008752:	601a      	str	r2, [r3, #0]
}
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	200055c4 	.word	0x200055c4
 8008764:	200091c4 	.word	0x200091c4
 8008768:	200091cc 	.word	0x200091cc
 800876c:	200091d4 	.word	0x200091d4
 8008770:	200091d0 	.word	0x200091d0
 8008774:	200091e0 	.word	0x200091e0

08008778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008780:	4b28      	ldr	r3, [pc, #160]	; (8008824 <prvInsertBlockIntoFreeList+0xac>)
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	e002      	b.n	800878c <prvInsertBlockIntoFreeList+0x14>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d8f7      	bhi.n	8008786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	4413      	add	r3, r2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d108      	bne.n	80087ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	441a      	add	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	441a      	add	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d118      	bne.n	8008800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <prvInsertBlockIntoFreeList+0xb0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d00d      	beq.n	80087f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	441a      	add	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e008      	b.n	8008808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <prvInsertBlockIntoFreeList+0xb0>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e003      	b.n	8008808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d002      	beq.n	8008816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	200091c4 	.word	0x200091c4
 8008828:	200091cc 	.word	0x200091cc

0800882c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008836:	f007 fad5 	bl	800fde4 <sys_timeouts_sleeptime>
 800883a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d10b      	bne.n	800885c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008844:	4813      	ldr	r0, [pc, #76]	; (8008894 <tcpip_timeouts_mbox_fetch+0x68>)
 8008846:	f00a fb7a 	bl	8012f3e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800884a:	2200      	movs	r2, #0
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f00a faec 	bl	8012e2c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008854:	480f      	ldr	r0, [pc, #60]	; (8008894 <tcpip_timeouts_mbox_fetch+0x68>)
 8008856:	f00a fb63 	bl	8012f20 <sys_mutex_lock>
    return;
 800885a:	e018      	b.n	800888e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008862:	f007 fa85 	bl	800fd70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008866:	e7e6      	b.n	8008836 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008868:	480a      	ldr	r0, [pc, #40]	; (8008894 <tcpip_timeouts_mbox_fetch+0x68>)
 800886a:	f00a fb68 	bl	8012f3e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f00a fada 	bl	8012e2c <sys_arch_mbox_fetch>
 8008878:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800887a:	4806      	ldr	r0, [pc, #24]	; (8008894 <tcpip_timeouts_mbox_fetch+0x68>)
 800887c:	f00a fb50 	bl	8012f20 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008886:	d102      	bne.n	800888e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008888:	f007 fa72 	bl	800fd70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800888c:	e7d3      	b.n	8008836 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	200091f0 	.word	0x200091f0

08008898 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80088a0:	4810      	ldr	r0, [pc, #64]	; (80088e4 <tcpip_thread+0x4c>)
 80088a2:	f00a fb3d 	bl	8012f20 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80088a6:	4b10      	ldr	r3, [pc, #64]	; (80088e8 <tcpip_thread+0x50>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80088ae:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <tcpip_thread+0x50>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a0e      	ldr	r2, [pc, #56]	; (80088ec <tcpip_thread+0x54>)
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	4610      	mov	r0, r2
 80088b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	4619      	mov	r1, r3
 80088c0:	480b      	ldr	r0, [pc, #44]	; (80088f0 <tcpip_thread+0x58>)
 80088c2:	f7ff ffb3 	bl	800882c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <tcpip_thread+0x5c>)
 80088ce:	2291      	movs	r2, #145	; 0x91
 80088d0:	4909      	ldr	r1, [pc, #36]	; (80088f8 <tcpip_thread+0x60>)
 80088d2:	480a      	ldr	r0, [pc, #40]	; (80088fc <tcpip_thread+0x64>)
 80088d4:	f00a fd5c 	bl	8013390 <iprintf>
      continue;
 80088d8:	e003      	b.n	80088e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f80f 	bl	8008900 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80088e2:	e7ea      	b.n	80088ba <tcpip_thread+0x22>
 80088e4:	200091f0 	.word	0x200091f0
 80088e8:	200091e4 	.word	0x200091e4
 80088ec:	200091e8 	.word	0x200091e8
 80088f0:	200091ec 	.word	0x200091ec
 80088f4:	080142cc 	.word	0x080142cc
 80088f8:	080142fc 	.word	0x080142fc
 80088fc:	0801431c 	.word	0x0801431c

08008900 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d026      	beq.n	800895e <tcpip_thread_handle_msg+0x5e>
 8008910:	2b02      	cmp	r3, #2
 8008912:	dc2b      	bgt.n	800896c <tcpip_thread_handle_msg+0x6c>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <tcpip_thread_handle_msg+0x1e>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d015      	beq.n	8008948 <tcpip_thread_handle_msg+0x48>
 800891c:	e026      	b.n	800896c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6850      	ldr	r0, [r2, #4]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6892      	ldr	r2, [r2, #8]
 800892a:	4611      	mov	r1, r2
 800892c:	4798      	blx	r3
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fd0b 	bl	800a354 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	2009      	movs	r0, #9
 8008942:	f000 fe63 	bl	800960c <memp_free>
      break;
 8008946:	e018      	b.n	800897a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6892      	ldr	r2, [r2, #8]
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	2008      	movs	r0, #8
 8008958:	f000 fe58 	bl	800960c <memp_free>
      break;
 800895c:	e00d      	b.n	800897a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6892      	ldr	r2, [r2, #8]
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
      break;
 800896a:	e006      	b.n	800897a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <tcpip_thread_handle_msg+0x84>)
 800896e:	22cf      	movs	r2, #207	; 0xcf
 8008970:	4905      	ldr	r1, [pc, #20]	; (8008988 <tcpip_thread_handle_msg+0x88>)
 8008972:	4806      	ldr	r0, [pc, #24]	; (800898c <tcpip_thread_handle_msg+0x8c>)
 8008974:	f00a fd0c 	bl	8013390 <iprintf>
      break;
 8008978:	bf00      	nop
  }
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	080142cc 	.word	0x080142cc
 8008988:	080142fc 	.word	0x080142fc
 800898c:	0801431c 	.word	0x0801431c

08008990 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800899c:	481a      	ldr	r0, [pc, #104]	; (8008a08 <tcpip_inpkt+0x78>)
 800899e:	f00a fa84 	bl	8012eaa <sys_mbox_valid>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <tcpip_inpkt+0x24>
 80089a8:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <tcpip_inpkt+0x7c>)
 80089aa:	22fc      	movs	r2, #252	; 0xfc
 80089ac:	4918      	ldr	r1, [pc, #96]	; (8008a10 <tcpip_inpkt+0x80>)
 80089ae:	4819      	ldr	r0, [pc, #100]	; (8008a14 <tcpip_inpkt+0x84>)
 80089b0:	f00a fcee 	bl	8013390 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80089b4:	2009      	movs	r0, #9
 80089b6:	f000 fdb3 	bl	8009520 <memp_malloc>
 80089ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	e01a      	b.n	80089fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	4809      	ldr	r0, [pc, #36]	; (8008a08 <tcpip_inpkt+0x78>)
 80089e4:	f00a fa08 	bl	8012df8 <sys_mbox_trypost>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d006      	beq.n	80089fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80089ee:	6979      	ldr	r1, [r7, #20]
 80089f0:	2009      	movs	r0, #9
 80089f2:	f000 fe0b 	bl	800960c <memp_free>
    return ERR_MEM;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	e000      	b.n	80089fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80089fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	200091ec 	.word	0x200091ec
 8008a0c:	080142cc 	.word	0x080142cc
 8008a10:	08014344 	.word	0x08014344
 8008a14:	0801431c 	.word	0x0801431c

08008a18 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a28:	f003 0318 	and.w	r3, r3, #24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d006      	beq.n	8008a3e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <tcpip_input+0x3c>)
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff ffab 	bl	8008990 <tcpip_inpkt>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	e005      	b.n	8008a4a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008a3e:	4a06      	ldr	r2, [pc, #24]	; (8008a58 <tcpip_input+0x40>)
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff ffa4 	bl	8008990 <tcpip_inpkt>
 8008a48:	4603      	mov	r3, r0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	08012c09 	.word	0x08012c09
 8008a58:	08011b11 	.word	0x08011b11

08008a5c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008a66:	4819      	ldr	r0, [pc, #100]	; (8008acc <tcpip_try_callback+0x70>)
 8008a68:	f00a fa1f 	bl	8012eaa <sys_mbox_valid>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <tcpip_try_callback+0x24>
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <tcpip_try_callback+0x74>)
 8008a74:	f240 125d 	movw	r2, #349	; 0x15d
 8008a78:	4916      	ldr	r1, [pc, #88]	; (8008ad4 <tcpip_try_callback+0x78>)
 8008a7a:	4817      	ldr	r0, [pc, #92]	; (8008ad8 <tcpip_try_callback+0x7c>)
 8008a7c:	f00a fc88 	bl	8013390 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008a80:	2008      	movs	r0, #8
 8008a82:	f000 fd4d 	bl	8009520 <memp_malloc>
 8008a86:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d102      	bne.n	8008a94 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a92:	e017      	b.n	8008ac4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	4808      	ldr	r0, [pc, #32]	; (8008acc <tcpip_try_callback+0x70>)
 8008aaa:	f00a f9a5 	bl	8012df8 <sys_mbox_trypost>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008ab4:	68f9      	ldr	r1, [r7, #12]
 8008ab6:	2008      	movs	r0, #8
 8008ab8:	f000 fda8 	bl	800960c <memp_free>
    return ERR_MEM;
 8008abc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac0:	e000      	b.n	8008ac4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	200091ec 	.word	0x200091ec
 8008ad0:	080142cc 	.word	0x080142cc
 8008ad4:	08014344 	.word	0x08014344
 8008ad8:	0801431c 	.word	0x0801431c

08008adc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008ae6:	f000 f871 	bl	8008bcc <lwip_init>

  tcpip_init_done = initfunc;
 8008aea:	4a17      	ldr	r2, [pc, #92]	; (8008b48 <tcpip_init+0x6c>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008af0:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <tcpip_init+0x70>)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008af6:	2106      	movs	r1, #6
 8008af8:	4815      	ldr	r0, [pc, #84]	; (8008b50 <tcpip_init+0x74>)
 8008afa:	f00a f95b 	bl	8012db4 <sys_mbox_new>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008b04:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <tcpip_init+0x78>)
 8008b06:	f240 2261 	movw	r2, #609	; 0x261
 8008b0a:	4913      	ldr	r1, [pc, #76]	; (8008b58 <tcpip_init+0x7c>)
 8008b0c:	4813      	ldr	r0, [pc, #76]	; (8008b5c <tcpip_init+0x80>)
 8008b0e:	f00a fc3f 	bl	8013390 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008b12:	4813      	ldr	r0, [pc, #76]	; (8008b60 <tcpip_init+0x84>)
 8008b14:	f00a f9e8 	bl	8012ee8 <sys_mutex_new>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008b1e:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <tcpip_init+0x78>)
 8008b20:	f240 2265 	movw	r2, #613	; 0x265
 8008b24:	490f      	ldr	r1, [pc, #60]	; (8008b64 <tcpip_init+0x88>)
 8008b26:	480d      	ldr	r0, [pc, #52]	; (8008b5c <tcpip_init+0x80>)
 8008b28:	f00a fc32 	bl	8013390 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b34:	2200      	movs	r2, #0
 8008b36:	490c      	ldr	r1, [pc, #48]	; (8008b68 <tcpip_init+0x8c>)
 8008b38:	480c      	ldr	r0, [pc, #48]	; (8008b6c <tcpip_init+0x90>)
 8008b3a:	f00a fa0d 	bl	8012f58 <sys_thread_new>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200091e4 	.word	0x200091e4
 8008b4c:	200091e8 	.word	0x200091e8
 8008b50:	200091ec 	.word	0x200091ec
 8008b54:	080142cc 	.word	0x080142cc
 8008b58:	08014354 	.word	0x08014354
 8008b5c:	0801431c 	.word	0x0801431c
 8008b60:	200091f0 	.word	0x200091f0
 8008b64:	08014378 	.word	0x08014378
 8008b68:	08008899 	.word	0x08008899
 8008b6c:	0801439c 	.word	0x0801439c

08008b70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	b21a      	sxth	r2, r3
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	b21b      	sxth	r3, r3
 8008b8c:	b29b      	uxth	r3, r3
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	061a      	lsls	r2, r3, #24
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	4313      	orrs	r3, r2
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008bd6:	f00a f979 	bl	8012ecc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008bda:	f000 f8d5 	bl	8008d88 <mem_init>
  memp_init();
 8008bde:	f000 fc31 	bl	8009444 <memp_init>
  pbuf_init();
  netif_init();
 8008be2:	f000 fd3d 	bl	8009660 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008be6:	f007 f935 	bl	800fe54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008bea:	f001 fe5d 	bl	800a8a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008bee:	f007 f877 	bl	800fce0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <ptr_to_mem+0x20>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	4413      	add	r3, r2
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20009860 	.word	0x20009860

08008c20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <mem_to_ptr+0x20>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	b29b      	uxth	r3, r3
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20009860 	.word	0x20009860

08008c44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008c4c:	4b45      	ldr	r3, [pc, #276]	; (8008d64 <plug_holes+0x120>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d206      	bcs.n	8008c64 <plug_holes+0x20>
 8008c56:	4b44      	ldr	r3, [pc, #272]	; (8008d68 <plug_holes+0x124>)
 8008c58:	f240 12df 	movw	r2, #479	; 0x1df
 8008c5c:	4943      	ldr	r1, [pc, #268]	; (8008d6c <plug_holes+0x128>)
 8008c5e:	4844      	ldr	r0, [pc, #272]	; (8008d70 <plug_holes+0x12c>)
 8008c60:	f00a fb96 	bl	8013390 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008c64:	4b43      	ldr	r3, [pc, #268]	; (8008d74 <plug_holes+0x130>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d306      	bcc.n	8008c7c <plug_holes+0x38>
 8008c6e:	4b3e      	ldr	r3, [pc, #248]	; (8008d68 <plug_holes+0x124>)
 8008c70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008c74:	4940      	ldr	r1, [pc, #256]	; (8008d78 <plug_holes+0x134>)
 8008c76:	483e      	ldr	r0, [pc, #248]	; (8008d70 <plug_holes+0x12c>)
 8008c78:	f00a fb8a 	bl	8013390 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	791b      	ldrb	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d006      	beq.n	8008c92 <plug_holes+0x4e>
 8008c84:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <plug_holes+0x124>)
 8008c86:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008c8a:	493c      	ldr	r1, [pc, #240]	; (8008d7c <plug_holes+0x138>)
 8008c8c:	4838      	ldr	r0, [pc, #224]	; (8008d70 <plug_holes+0x12c>)
 8008c8e:	f00a fb7f 	bl	8013390 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c9a:	d906      	bls.n	8008caa <plug_holes+0x66>
 8008c9c:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <plug_holes+0x124>)
 8008c9e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008ca2:	4937      	ldr	r1, [pc, #220]	; (8008d80 <plug_holes+0x13c>)
 8008ca4:	4832      	ldr	r0, [pc, #200]	; (8008d70 <plug_holes+0x12c>)
 8008ca6:	f00a fb73 	bl	8013390 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff ffa4 	bl	8008bfc <ptr_to_mem>
 8008cb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d024      	beq.n	8008d08 <plug_holes+0xc4>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	791b      	ldrb	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d120      	bne.n	8008d08 <plug_holes+0xc4>
 8008cc6:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <plug_holes+0x130>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d01b      	beq.n	8008d08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008cd0:	4b2c      	ldr	r3, [pc, #176]	; (8008d84 <plug_holes+0x140>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d102      	bne.n	8008ce0 <plug_holes+0x9c>
      lfree = mem;
 8008cda:	4a2a      	ldr	r2, [pc, #168]	; (8008d84 <plug_holes+0x140>)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	881a      	ldrh	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008cf0:	d00a      	beq.n	8008d08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff ff80 	bl	8008bfc <ptr_to_mem>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff ff8e 	bl	8008c20 <mem_to_ptr>
 8008d04:	4603      	mov	r3, r0
 8008d06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff ff75 	bl	8008bfc <ptr_to_mem>
 8008d12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d01f      	beq.n	8008d5c <plug_holes+0x118>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	791b      	ldrb	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d11b      	bne.n	8008d5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008d24:	4b17      	ldr	r3, [pc, #92]	; (8008d84 <plug_holes+0x140>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d102      	bne.n	8008d34 <plug_holes+0xf0>
      lfree = pmem;
 8008d2e:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <plug_holes+0x140>)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	881a      	ldrh	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d44:	d00a      	beq.n	8008d5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff ff56 	bl	8008bfc <ptr_to_mem>
 8008d50:	4604      	mov	r4, r0
 8008d52:	68b8      	ldr	r0, [r7, #8]
 8008d54:	f7ff ff64 	bl	8008c20 <mem_to_ptr>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd90      	pop	{r4, r7, pc}
 8008d64:	20009860 	.word	0x20009860
 8008d68:	080143ac 	.word	0x080143ac
 8008d6c:	080143dc 	.word	0x080143dc
 8008d70:	080143f4 	.word	0x080143f4
 8008d74:	20009864 	.word	0x20009864
 8008d78:	0801441c 	.word	0x0801441c
 8008d7c:	08014438 	.word	0x08014438
 8008d80:	08014454 	.word	0x08014454
 8008d84:	2000986c 	.word	0x2000986c

08008d88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008d8e:	4b1f      	ldr	r3, [pc, #124]	; (8008e0c <mem_init+0x84>)
 8008d90:	3303      	adds	r3, #3
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	461a      	mov	r2, r3
 8008d98:	4b1d      	ldr	r3, [pc, #116]	; (8008e10 <mem_init+0x88>)
 8008d9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <mem_init+0x88>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008da8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008db6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008dba:	f7ff ff1f 	bl	8008bfc <ptr_to_mem>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4a14      	ldr	r2, [pc, #80]	; (8008e14 <mem_init+0x8c>)
 8008dc2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008dc4:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <mem_init+0x8c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008dcc:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <mem_init+0x8c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008dd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <mem_init+0x8c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008dde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <mem_init+0x88>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <mem_init+0x90>)
 8008de6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008de8:	480c      	ldr	r0, [pc, #48]	; (8008e1c <mem_init+0x94>)
 8008dea:	f00a f87d 	bl	8012ee8 <sys_mutex_new>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <mem_init+0x98>)
 8008df6:	f240 221f 	movw	r2, #543	; 0x21f
 8008dfa:	490a      	ldr	r1, [pc, #40]	; (8008e24 <mem_init+0x9c>)
 8008dfc:	480a      	ldr	r0, [pc, #40]	; (8008e28 <mem_init+0xa0>)
 8008dfe:	f00a fac7 	bl	8013390 <iprintf>
  }
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	2000920c 	.word	0x2000920c
 8008e10:	20009860 	.word	0x20009860
 8008e14:	20009864 	.word	0x20009864
 8008e18:	2000986c 	.word	0x2000986c
 8008e1c:	20009868 	.word	0x20009868
 8008e20:	080143ac 	.word	0x080143ac
 8008e24:	08014480 	.word	0x08014480
 8008e28:	080143f4 	.word	0x080143f4

08008e2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fef3 	bl	8008c20 <mem_to_ptr>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff feda 	bl	8008bfc <ptr_to_mem>
 8008e48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fed4 	bl	8008bfc <ptr_to_mem>
 8008e54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e5e:	d818      	bhi.n	8008e92 <mem_link_valid+0x66>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	885b      	ldrh	r3, [r3, #2]
 8008e64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e68:	d813      	bhi.n	8008e92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008e6e:	8afa      	ldrh	r2, [r7, #22]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d004      	beq.n	8008e7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	8afa      	ldrh	r2, [r7, #22]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d109      	bne.n	8008e92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <mem_link_valid+0x74>)
 8008e80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d006      	beq.n	8008e96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	8afa      	ldrh	r2, [r7, #22]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d001      	beq.n	8008e96 <mem_link_valid+0x6a>
    return 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e000      	b.n	8008e98 <mem_link_valid+0x6c>
  }
  return 1;
 8008e96:	2301      	movs	r3, #1
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20009864 	.word	0x20009864

08008ea4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d070      	beq.n	8008f94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00d      	beq.n	8008ed8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008ebc:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <mem_free+0xf8>)
 8008ebe:	f240 2273 	movw	r2, #627	; 0x273
 8008ec2:	4937      	ldr	r1, [pc, #220]	; (8008fa0 <mem_free+0xfc>)
 8008ec4:	4837      	ldr	r0, [pc, #220]	; (8008fa4 <mem_free+0x100>)
 8008ec6:	f00a fa63 	bl	8013390 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008eca:	f00a f86b 	bl	8012fa4 <sys_arch_protect>
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f00a f875 	bl	8012fc0 <sys_arch_unprotect>
    return;
 8008ed6:	e05e      	b.n	8008f96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3b08      	subs	r3, #8
 8008edc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008ede:	4b32      	ldr	r3, [pc, #200]	; (8008fa8 <mem_free+0x104>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d306      	bcc.n	8008ef6 <mem_free+0x52>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f103 020c 	add.w	r2, r3, #12
 8008eee:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <mem_free+0x108>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d90d      	bls.n	8008f12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008ef6:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <mem_free+0xf8>)
 8008ef8:	f240 227f 	movw	r2, #639	; 0x27f
 8008efc:	492c      	ldr	r1, [pc, #176]	; (8008fb0 <mem_free+0x10c>)
 8008efe:	4829      	ldr	r0, [pc, #164]	; (8008fa4 <mem_free+0x100>)
 8008f00:	f00a fa46 	bl	8013390 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008f04:	f00a f84e 	bl	8012fa4 <sys_arch_protect>
 8008f08:	6138      	str	r0, [r7, #16]
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f00a f858 	bl	8012fc0 <sys_arch_unprotect>
    return;
 8008f10:	e041      	b.n	8008f96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008f12:	4828      	ldr	r0, [pc, #160]	; (8008fb4 <mem_free+0x110>)
 8008f14:	f00a f804 	bl	8012f20 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d110      	bne.n	8008f42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008f20:	4b1e      	ldr	r3, [pc, #120]	; (8008f9c <mem_free+0xf8>)
 8008f22:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008f26:	4924      	ldr	r1, [pc, #144]	; (8008fb8 <mem_free+0x114>)
 8008f28:	481e      	ldr	r0, [pc, #120]	; (8008fa4 <mem_free+0x100>)
 8008f2a:	f00a fa31 	bl	8013390 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008f2e:	4821      	ldr	r0, [pc, #132]	; (8008fb4 <mem_free+0x110>)
 8008f30:	f00a f805 	bl	8012f3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008f34:	f00a f836 	bl	8012fa4 <sys_arch_protect>
 8008f38:	6178      	str	r0, [r7, #20]
 8008f3a:	6978      	ldr	r0, [r7, #20]
 8008f3c:	f00a f840 	bl	8012fc0 <sys_arch_unprotect>
    return;
 8008f40:	e029      	b.n	8008f96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008f42:	69f8      	ldr	r0, [r7, #28]
 8008f44:	f7ff ff72 	bl	8008e2c <mem_link_valid>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d110      	bne.n	8008f70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <mem_free+0xf8>)
 8008f50:	f240 2295 	movw	r2, #661	; 0x295
 8008f54:	4919      	ldr	r1, [pc, #100]	; (8008fbc <mem_free+0x118>)
 8008f56:	4813      	ldr	r0, [pc, #76]	; (8008fa4 <mem_free+0x100>)
 8008f58:	f00a fa1a 	bl	8013390 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008f5c:	4815      	ldr	r0, [pc, #84]	; (8008fb4 <mem_free+0x110>)
 8008f5e:	f009 ffee 	bl	8012f3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008f62:	f00a f81f 	bl	8012fa4 <sys_arch_protect>
 8008f66:	61b8      	str	r0, [r7, #24]
 8008f68:	69b8      	ldr	r0, [r7, #24]
 8008f6a:	f00a f829 	bl	8012fc0 <sys_arch_unprotect>
    return;
 8008f6e:	e012      	b.n	8008f96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2200      	movs	r2, #0
 8008f74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <mem_free+0x11c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d202      	bcs.n	8008f86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008f80:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <mem_free+0x11c>)
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008f86:	69f8      	ldr	r0, [r7, #28]
 8008f88:	f7ff fe5c 	bl	8008c44 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008f8c:	4809      	ldr	r0, [pc, #36]	; (8008fb4 <mem_free+0x110>)
 8008f8e:	f009 ffd6 	bl	8012f3e <sys_mutex_unlock>
 8008f92:	e000      	b.n	8008f96 <mem_free+0xf2>
    return;
 8008f94:	bf00      	nop
}
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	080143ac 	.word	0x080143ac
 8008fa0:	0801449c 	.word	0x0801449c
 8008fa4:	080143f4 	.word	0x080143f4
 8008fa8:	20009860 	.word	0x20009860
 8008fac:	20009864 	.word	0x20009864
 8008fb0:	080144c0 	.word	0x080144c0
 8008fb4:	20009868 	.word	0x20009868
 8008fb8:	080144dc 	.word	0x080144dc
 8008fbc:	08014504 	.word	0x08014504
 8008fc0:	2000986c 	.word	0x2000986c

08008fc4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008fd0:	887b      	ldrh	r3, [r7, #2]
 8008fd2:	3303      	adds	r3, #3
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008fdc:	8bfb      	ldrh	r3, [r7, #30]
 8008fde:	2b0b      	cmp	r3, #11
 8008fe0:	d801      	bhi.n	8008fe6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008fe6:	8bfb      	ldrh	r3, [r7, #30]
 8008fe8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008fec:	d803      	bhi.n	8008ff6 <mem_trim+0x32>
 8008fee:	8bfa      	ldrh	r2, [r7, #30]
 8008ff0:	887b      	ldrh	r3, [r7, #2]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d201      	bcs.n	8008ffa <mem_trim+0x36>
    return NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e0d8      	b.n	80091ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008ffa:	4b6e      	ldr	r3, [pc, #440]	; (80091b4 <mem_trim+0x1f0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	d304      	bcc.n	800900e <mem_trim+0x4a>
 8009004:	4b6c      	ldr	r3, [pc, #432]	; (80091b8 <mem_trim+0x1f4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	429a      	cmp	r2, r3
 800900c:	d306      	bcc.n	800901c <mem_trim+0x58>
 800900e:	4b6b      	ldr	r3, [pc, #428]	; (80091bc <mem_trim+0x1f8>)
 8009010:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009014:	496a      	ldr	r1, [pc, #424]	; (80091c0 <mem_trim+0x1fc>)
 8009016:	486b      	ldr	r0, [pc, #428]	; (80091c4 <mem_trim+0x200>)
 8009018:	f00a f9ba 	bl	8013390 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800901c:	4b65      	ldr	r3, [pc, #404]	; (80091b4 <mem_trim+0x1f0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	429a      	cmp	r2, r3
 8009024:	d304      	bcc.n	8009030 <mem_trim+0x6c>
 8009026:	4b64      	ldr	r3, [pc, #400]	; (80091b8 <mem_trim+0x1f4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d307      	bcc.n	8009040 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009030:	f009 ffb8 	bl	8012fa4 <sys_arch_protect>
 8009034:	60b8      	str	r0, [r7, #8]
 8009036:	68b8      	ldr	r0, [r7, #8]
 8009038:	f009 ffc2 	bl	8012fc0 <sys_arch_unprotect>
    return rmem;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	e0b5      	b.n	80091ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3b08      	subs	r3, #8
 8009044:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009046:	69b8      	ldr	r0, [r7, #24]
 8009048:	f7ff fdea 	bl	8008c20 <mem_to_ptr>
 800904c:	4603      	mov	r3, r0
 800904e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	881a      	ldrh	r2, [r3, #0]
 8009054:	8afb      	ldrh	r3, [r7, #22]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b08      	subs	r3, #8
 800905c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800905e:	8bfa      	ldrh	r2, [r7, #30]
 8009060:	8abb      	ldrh	r3, [r7, #20]
 8009062:	429a      	cmp	r2, r3
 8009064:	d906      	bls.n	8009074 <mem_trim+0xb0>
 8009066:	4b55      	ldr	r3, [pc, #340]	; (80091bc <mem_trim+0x1f8>)
 8009068:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800906c:	4956      	ldr	r1, [pc, #344]	; (80091c8 <mem_trim+0x204>)
 800906e:	4855      	ldr	r0, [pc, #340]	; (80091c4 <mem_trim+0x200>)
 8009070:	f00a f98e 	bl	8013390 <iprintf>
  if (newsize > size) {
 8009074:	8bfa      	ldrh	r2, [r7, #30]
 8009076:	8abb      	ldrh	r3, [r7, #20]
 8009078:	429a      	cmp	r2, r3
 800907a:	d901      	bls.n	8009080 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800907c:	2300      	movs	r3, #0
 800907e:	e095      	b.n	80091ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009080:	8bfa      	ldrh	r2, [r7, #30]
 8009082:	8abb      	ldrh	r3, [r7, #20]
 8009084:	429a      	cmp	r2, r3
 8009086:	d101      	bne.n	800908c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	e08f      	b.n	80091ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800908c:	484f      	ldr	r0, [pc, #316]	; (80091cc <mem_trim+0x208>)
 800908e:	f009 ff47 	bl	8012f20 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fdb0 	bl	8008bfc <ptr_to_mem>
 800909c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d13f      	bne.n	8009126 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090ae:	d106      	bne.n	80090be <mem_trim+0xfa>
 80090b0:	4b42      	ldr	r3, [pc, #264]	; (80091bc <mem_trim+0x1f8>)
 80090b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80090b6:	4946      	ldr	r1, [pc, #280]	; (80091d0 <mem_trim+0x20c>)
 80090b8:	4842      	ldr	r0, [pc, #264]	; (80091c4 <mem_trim+0x200>)
 80090ba:	f00a f969 	bl	8013390 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80090c4:	8afa      	ldrh	r2, [r7, #22]
 80090c6:	8bfb      	ldrh	r3, [r7, #30]
 80090c8:	4413      	add	r3, r2
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3308      	adds	r3, #8
 80090ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80090d0:	4b40      	ldr	r3, [pc, #256]	; (80091d4 <mem_trim+0x210>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d106      	bne.n	80090e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80090da:	89fb      	ldrh	r3, [r7, #14]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fd8d 	bl	8008bfc <ptr_to_mem>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4a3b      	ldr	r2, [pc, #236]	; (80091d4 <mem_trim+0x210>)
 80090e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80090e8:	89fb      	ldrh	r3, [r7, #14]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fd86 	bl	8008bfc <ptr_to_mem>
 80090f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2200      	movs	r2, #0
 80090f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	89ba      	ldrh	r2, [r7, #12]
 80090fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	8afa      	ldrh	r2, [r7, #22]
 8009102:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	89fa      	ldrh	r2, [r7, #14]
 8009108:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009112:	d047      	beq.n	80091a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fd6f 	bl	8008bfc <ptr_to_mem>
 800911e:	4602      	mov	r2, r0
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	8053      	strh	r3, [r2, #2]
 8009124:	e03e      	b.n	80091a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009126:	8bfb      	ldrh	r3, [r7, #30]
 8009128:	f103 0214 	add.w	r2, r3, #20
 800912c:	8abb      	ldrh	r3, [r7, #20]
 800912e:	429a      	cmp	r2, r3
 8009130:	d838      	bhi.n	80091a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009132:	8afa      	ldrh	r2, [r7, #22]
 8009134:	8bfb      	ldrh	r3, [r7, #30]
 8009136:	4413      	add	r3, r2
 8009138:	b29b      	uxth	r3, r3
 800913a:	3308      	adds	r3, #8
 800913c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009146:	d106      	bne.n	8009156 <mem_trim+0x192>
 8009148:	4b1c      	ldr	r3, [pc, #112]	; (80091bc <mem_trim+0x1f8>)
 800914a:	f240 3216 	movw	r2, #790	; 0x316
 800914e:	4920      	ldr	r1, [pc, #128]	; (80091d0 <mem_trim+0x20c>)
 8009150:	481c      	ldr	r0, [pc, #112]	; (80091c4 <mem_trim+0x200>)
 8009152:	f00a f91d 	bl	8013390 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009156:	89fb      	ldrh	r3, [r7, #14]
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff fd4f 	bl	8008bfc <ptr_to_mem>
 800915e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009160:	4b1c      	ldr	r3, [pc, #112]	; (80091d4 <mem_trim+0x210>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	429a      	cmp	r2, r3
 8009168:	d202      	bcs.n	8009170 <mem_trim+0x1ac>
      lfree = mem2;
 800916a:	4a1a      	ldr	r2, [pc, #104]	; (80091d4 <mem_trim+0x210>)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2200      	movs	r2, #0
 8009174:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	881a      	ldrh	r2, [r3, #0]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	8afa      	ldrh	r2, [r7, #22]
 8009182:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	89fa      	ldrh	r2, [r7, #14]
 8009188:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009192:	d007      	beq.n	80091a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fd2f 	bl	8008bfc <ptr_to_mem>
 800919e:	4602      	mov	r2, r0
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80091a4:	4809      	ldr	r0, [pc, #36]	; (80091cc <mem_trim+0x208>)
 80091a6:	f009 feca 	bl	8012f3e <sys_mutex_unlock>
  return rmem;
 80091aa:	687b      	ldr	r3, [r7, #4]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20009860 	.word	0x20009860
 80091b8:	20009864 	.word	0x20009864
 80091bc:	080143ac 	.word	0x080143ac
 80091c0:	08014538 	.word	0x08014538
 80091c4:	080143f4 	.word	0x080143f4
 80091c8:	08014550 	.word	0x08014550
 80091cc:	20009868 	.word	0x20009868
 80091d0:	08014570 	.word	0x08014570
 80091d4:	2000986c 	.word	0x2000986c

080091d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <mem_malloc+0x14>
    return NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e0e2      	b.n	80093b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	3303      	adds	r3, #3
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80091f8:	8bbb      	ldrh	r3, [r7, #28]
 80091fa:	2b0b      	cmp	r3, #11
 80091fc:	d801      	bhi.n	8009202 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80091fe:	230c      	movs	r3, #12
 8009200:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009202:	8bbb      	ldrh	r3, [r7, #28]
 8009204:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009208:	d803      	bhi.n	8009212 <mem_malloc+0x3a>
 800920a:	8bba      	ldrh	r2, [r7, #28]
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	429a      	cmp	r2, r3
 8009210:	d201      	bcs.n	8009216 <mem_malloc+0x3e>
    return NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	e0cd      	b.n	80093b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009216:	4869      	ldr	r0, [pc, #420]	; (80093bc <mem_malloc+0x1e4>)
 8009218:	f009 fe82 	bl	8012f20 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800921c:	4b68      	ldr	r3, [pc, #416]	; (80093c0 <mem_malloc+0x1e8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff fcfd 	bl	8008c20 <mem_to_ptr>
 8009226:	4603      	mov	r3, r0
 8009228:	83fb      	strh	r3, [r7, #30]
 800922a:	e0b7      	b.n	800939c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800922c:	8bfb      	ldrh	r3, [r7, #30]
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff fce4 	bl	8008bfc <ptr_to_mem>
 8009234:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 80a7 	bne.w	800938e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	8bfb      	ldrh	r3, [r7, #30]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	f1a3 0208 	sub.w	r2, r3, #8
 800924e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009250:	429a      	cmp	r2, r3
 8009252:	f0c0 809c 	bcc.w	800938e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	8bfb      	ldrh	r3, [r7, #30]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	f1a3 0208 	sub.w	r2, r3, #8
 8009264:	8bbb      	ldrh	r3, [r7, #28]
 8009266:	3314      	adds	r3, #20
 8009268:	429a      	cmp	r2, r3
 800926a:	d333      	bcc.n	80092d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800926c:	8bfa      	ldrh	r2, [r7, #30]
 800926e:	8bbb      	ldrh	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	b29b      	uxth	r3, r3
 8009274:	3308      	adds	r3, #8
 8009276:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009278:	8a7b      	ldrh	r3, [r7, #18]
 800927a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800927e:	d106      	bne.n	800928e <mem_malloc+0xb6>
 8009280:	4b50      	ldr	r3, [pc, #320]	; (80093c4 <mem_malloc+0x1ec>)
 8009282:	f240 3287 	movw	r2, #903	; 0x387
 8009286:	4950      	ldr	r1, [pc, #320]	; (80093c8 <mem_malloc+0x1f0>)
 8009288:	4850      	ldr	r0, [pc, #320]	; (80093cc <mem_malloc+0x1f4>)
 800928a:	f00a f881 	bl	8013390 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800928e:	8a7b      	ldrh	r3, [r7, #18]
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fcb3 	bl	8008bfc <ptr_to_mem>
 8009296:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8bfa      	ldrh	r2, [r7, #30]
 80092aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	8a7a      	ldrh	r2, [r7, #18]
 80092b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2201      	movs	r2, #1
 80092b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092c0:	d00b      	beq.n	80092da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fc98 	bl	8008bfc <ptr_to_mem>
 80092cc:	4602      	mov	r2, r0
 80092ce:	8a7b      	ldrh	r3, [r7, #18]
 80092d0:	8053      	strh	r3, [r2, #2]
 80092d2:	e002      	b.n	80092da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2201      	movs	r2, #1
 80092d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80092da:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <mem_malloc+0x1e8>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d127      	bne.n	8009334 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80092e4:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <mem_malloc+0x1e8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80092ea:	e005      	b.n	80092f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fc83 	bl	8008bfc <ptr_to_mem>
 80092f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	791b      	ldrb	r3, [r3, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d004      	beq.n	800930a <mem_malloc+0x132>
 8009300:	4b33      	ldr	r3, [pc, #204]	; (80093d0 <mem_malloc+0x1f8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	429a      	cmp	r2, r3
 8009308:	d1f0      	bne.n	80092ec <mem_malloc+0x114>
          }
          lfree = cur;
 800930a:	4a2d      	ldr	r2, [pc, #180]	; (80093c0 <mem_malloc+0x1e8>)
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009310:	4b2b      	ldr	r3, [pc, #172]	; (80093c0 <mem_malloc+0x1e8>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <mem_malloc+0x1f8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d00b      	beq.n	8009334 <mem_malloc+0x15c>
 800931c:	4b28      	ldr	r3, [pc, #160]	; (80093c0 <mem_malloc+0x1e8>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d006      	beq.n	8009334 <mem_malloc+0x15c>
 8009326:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <mem_malloc+0x1ec>)
 8009328:	f240 32b5 	movw	r2, #949	; 0x3b5
 800932c:	4929      	ldr	r1, [pc, #164]	; (80093d4 <mem_malloc+0x1fc>)
 800932e:	4827      	ldr	r0, [pc, #156]	; (80093cc <mem_malloc+0x1f4>)
 8009330:	f00a f82e 	bl	8013390 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009334:	4821      	ldr	r0, [pc, #132]	; (80093bc <mem_malloc+0x1e4>)
 8009336:	f009 fe02 	bl	8012f3e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800933a:	8bba      	ldrh	r2, [r7, #28]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	4413      	add	r3, r2
 8009340:	3308      	adds	r3, #8
 8009342:	4a23      	ldr	r2, [pc, #140]	; (80093d0 <mem_malloc+0x1f8>)
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	4293      	cmp	r3, r2
 8009348:	d906      	bls.n	8009358 <mem_malloc+0x180>
 800934a:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <mem_malloc+0x1ec>)
 800934c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009350:	4921      	ldr	r1, [pc, #132]	; (80093d8 <mem_malloc+0x200>)
 8009352:	481e      	ldr	r0, [pc, #120]	; (80093cc <mem_malloc+0x1f4>)
 8009354:	f00a f81c 	bl	8013390 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d006      	beq.n	8009370 <mem_malloc+0x198>
 8009362:	4b18      	ldr	r3, [pc, #96]	; (80093c4 <mem_malloc+0x1ec>)
 8009364:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009368:	491c      	ldr	r1, [pc, #112]	; (80093dc <mem_malloc+0x204>)
 800936a:	4818      	ldr	r0, [pc, #96]	; (80093cc <mem_malloc+0x1f4>)
 800936c:	f00a f810 	bl	8013390 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d006      	beq.n	8009388 <mem_malloc+0x1b0>
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <mem_malloc+0x1ec>)
 800937c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009380:	4917      	ldr	r1, [pc, #92]	; (80093e0 <mem_malloc+0x208>)
 8009382:	4812      	ldr	r0, [pc, #72]	; (80093cc <mem_malloc+0x1f4>)
 8009384:	f00a f804 	bl	8013390 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	3308      	adds	r3, #8
 800938c:	e011      	b.n	80093b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800938e:	8bfb      	ldrh	r3, [r7, #30]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fc33 	bl	8008bfc <ptr_to_mem>
 8009396:	4603      	mov	r3, r0
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800939c:	8bfa      	ldrh	r2, [r7, #30]
 800939e:	8bbb      	ldrh	r3, [r7, #28]
 80093a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80093a4:	429a      	cmp	r2, r3
 80093a6:	f4ff af41 	bcc.w	800922c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80093aa:	4804      	ldr	r0, [pc, #16]	; (80093bc <mem_malloc+0x1e4>)
 80093ac:	f009 fdc7 	bl	8012f3e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3720      	adds	r7, #32
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20009868 	.word	0x20009868
 80093c0:	2000986c 	.word	0x2000986c
 80093c4:	080143ac 	.word	0x080143ac
 80093c8:	08014570 	.word	0x08014570
 80093cc:	080143f4 	.word	0x080143f4
 80093d0:	20009864 	.word	0x20009864
 80093d4:	08014584 	.word	0x08014584
 80093d8:	080145a0 	.word	0x080145a0
 80093dc:	080145d0 	.word	0x080145d0
 80093e0:	08014600 	.word	0x08014600

080093e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	3303      	adds	r3, #3
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e011      	b.n	800942a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	461a      	mov	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4293      	cmp	r3, r2
 8009434:	dbe7      	blt.n	8009406 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800944a:	2300      	movs	r3, #0
 800944c:	80fb      	strh	r3, [r7, #6]
 800944e:	e009      	b.n	8009464 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	4a08      	ldr	r2, [pc, #32]	; (8009474 <memp_init+0x30>)
 8009454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff ffc3 	bl	80093e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	3301      	adds	r3, #1
 8009462:	80fb      	strh	r3, [r7, #6]
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	2b0c      	cmp	r3, #12
 8009468:	d9f2      	bls.n	8009450 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	08016e1c 	.word	0x08016e1c

08009478 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009480:	f009 fd90 	bl	8012fa4 <sys_arch_protect>
 8009484:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d015      	beq.n	80094c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <do_memp_malloc_pool+0x3e>
 80094a8:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <do_memp_malloc_pool+0x58>)
 80094aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 80094ae:	4909      	ldr	r1, [pc, #36]	; (80094d4 <do_memp_malloc_pool+0x5c>)
 80094b0:	4809      	ldr	r0, [pc, #36]	; (80094d8 <do_memp_malloc_pool+0x60>)
 80094b2:	f009 ff6d 	bl	8013390 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f009 fd82 	bl	8012fc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	e003      	b.n	80094c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f009 fd7d 	bl	8012fc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	08014624 	.word	0x08014624
 80094d4:	08014654 	.word	0x08014654
 80094d8:	08014678 	.word	0x08014678

080094dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <memp_malloc_pool+0x1c>
 80094ea:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <memp_malloc_pool+0x38>)
 80094ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80094f0:	4909      	ldr	r1, [pc, #36]	; (8009518 <memp_malloc_pool+0x3c>)
 80094f2:	480a      	ldr	r0, [pc, #40]	; (800951c <memp_malloc_pool+0x40>)
 80094f4:	f009 ff4c 	bl	8013390 <iprintf>
  if (desc == NULL) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <memp_malloc_pool+0x26>
    return NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	e003      	b.n	800950a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff ffb8 	bl	8009478 <do_memp_malloc_pool>
 8009508:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	08014624 	.word	0x08014624
 8009518:	080146a0 	.word	0x080146a0
 800951c:	08014678 	.word	0x08014678

08009520 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	2b0c      	cmp	r3, #12
 800952e:	d908      	bls.n	8009542 <memp_malloc+0x22>
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <memp_malloc+0x3c>)
 8009532:	f240 1257 	movw	r2, #343	; 0x157
 8009536:	490a      	ldr	r1, [pc, #40]	; (8009560 <memp_malloc+0x40>)
 8009538:	480a      	ldr	r0, [pc, #40]	; (8009564 <memp_malloc+0x44>)
 800953a:	f009 ff29 	bl	8013390 <iprintf>
 800953e:	2300      	movs	r3, #0
 8009540:	e008      	b.n	8009554 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	4a08      	ldr	r2, [pc, #32]	; (8009568 <memp_malloc+0x48>)
 8009546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff ff94 	bl	8009478 <do_memp_malloc_pool>
 8009550:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009552:	68fb      	ldr	r3, [r7, #12]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	08014624 	.word	0x08014624
 8009560:	080146b4 	.word	0x080146b4
 8009564:	08014678 	.word	0x08014678
 8009568:	08016e1c 	.word	0x08016e1c

0800956c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d006      	beq.n	800958e <do_memp_free_pool+0x22>
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <do_memp_free_pool+0x4c>)
 8009582:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009586:	490d      	ldr	r1, [pc, #52]	; (80095bc <do_memp_free_pool+0x50>)
 8009588:	480d      	ldr	r0, [pc, #52]	; (80095c0 <do_memp_free_pool+0x54>)
 800958a:	f009 ff01 	bl	8013390 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009592:	f009 fd07 	bl	8012fa4 <sys_arch_protect>
 8009596:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80095aa:	68b8      	ldr	r0, [r7, #8]
 80095ac:	f009 fd08 	bl	8012fc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	08014624 	.word	0x08014624
 80095bc:	080146d4 	.word	0x080146d4
 80095c0:	08014678 	.word	0x08014678

080095c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d106      	bne.n	80095e2 <memp_free_pool+0x1e>
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <memp_free_pool+0x3c>)
 80095d6:	f240 1295 	movw	r2, #405	; 0x195
 80095da:	490a      	ldr	r1, [pc, #40]	; (8009604 <memp_free_pool+0x40>)
 80095dc:	480a      	ldr	r0, [pc, #40]	; (8009608 <memp_free_pool+0x44>)
 80095de:	f009 fed7 	bl	8013390 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d007      	beq.n	80095f8 <memp_free_pool+0x34>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ffbb 	bl	800956c <do_memp_free_pool>
 80095f6:	e000      	b.n	80095fa <memp_free_pool+0x36>
    return;
 80095f8:	bf00      	nop
}
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08014624 	.word	0x08014624
 8009604:	080146a0 	.word	0x080146a0
 8009608:	08014678 	.word	0x08014678

0800960c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	6039      	str	r1, [r7, #0]
 8009616:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2b0c      	cmp	r3, #12
 800961c:	d907      	bls.n	800962e <memp_free+0x22>
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <memp_free+0x44>)
 8009620:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009624:	490b      	ldr	r1, [pc, #44]	; (8009654 <memp_free+0x48>)
 8009626:	480c      	ldr	r0, [pc, #48]	; (8009658 <memp_free+0x4c>)
 8009628:	f009 feb2 	bl	8013390 <iprintf>
 800962c:	e00c      	b.n	8009648 <memp_free+0x3c>

  if (mem == NULL) {
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d008      	beq.n	8009646 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	4a09      	ldr	r2, [pc, #36]	; (800965c <memp_free+0x50>)
 8009638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff ff94 	bl	800956c <do_memp_free_pool>
 8009644:	e000      	b.n	8009648 <memp_free+0x3c>
    return;
 8009646:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	08014624 	.word	0x08014624
 8009654:	080146f4 	.word	0x080146f4
 8009658:	08014678 	.word	0x08014678
 800965c:	08016e1c 	.word	0x08016e1c

08009660 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
	...

08009670 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d108      	bne.n	8009696 <netif_add+0x26>
 8009684:	4b57      	ldr	r3, [pc, #348]	; (80097e4 <netif_add+0x174>)
 8009686:	f240 1227 	movw	r2, #295	; 0x127
 800968a:	4957      	ldr	r1, [pc, #348]	; (80097e8 <netif_add+0x178>)
 800968c:	4857      	ldr	r0, [pc, #348]	; (80097ec <netif_add+0x17c>)
 800968e:	f009 fe7f 	bl	8013390 <iprintf>
 8009692:	2300      	movs	r3, #0
 8009694:	e0a2      	b.n	80097dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	d108      	bne.n	80096ae <netif_add+0x3e>
 800969c:	4b51      	ldr	r3, [pc, #324]	; (80097e4 <netif_add+0x174>)
 800969e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80096a2:	4953      	ldr	r1, [pc, #332]	; (80097f0 <netif_add+0x180>)
 80096a4:	4851      	ldr	r0, [pc, #324]	; (80097ec <netif_add+0x17c>)
 80096a6:	f009 fe73 	bl	8013390 <iprintf>
 80096aa:	2300      	movs	r3, #0
 80096ac:	e096      	b.n	80097dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80096b4:	4b4f      	ldr	r3, [pc, #316]	; (80097f4 <netif_add+0x184>)
 80096b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80096be:	4b4d      	ldr	r3, [pc, #308]	; (80097f4 <netif_add+0x184>)
 80096c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80096c8:	4b4a      	ldr	r3, [pc, #296]	; (80097f4 <netif_add+0x184>)
 80096ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a45      	ldr	r2, [pc, #276]	; (80097f8 <netif_add+0x188>)
 80096e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a3a      	ldr	r2, [r7, #32]
 80096fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80096fe:	4b3f      	ldr	r3, [pc, #252]	; (80097fc <netif_add+0x18c>)
 8009700:	781a      	ldrb	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 f913 	bl	8009940 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	4798      	blx	r3
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <netif_add+0xba>
    return NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	e058      	b.n	80097dc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009730:	2bff      	cmp	r3, #255	; 0xff
 8009732:	d103      	bne.n	800973c <netif_add+0xcc>
        netif->num = 0;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009740:	4b2f      	ldr	r3, [pc, #188]	; (8009800 <netif_add+0x190>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	e02b      	b.n	80097a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	429a      	cmp	r2, r3
 800974e:	d106      	bne.n	800975e <netif_add+0xee>
 8009750:	4b24      	ldr	r3, [pc, #144]	; (80097e4 <netif_add+0x174>)
 8009752:	f240 128b 	movw	r2, #395	; 0x18b
 8009756:	492b      	ldr	r1, [pc, #172]	; (8009804 <netif_add+0x194>)
 8009758:	4824      	ldr	r0, [pc, #144]	; (80097ec <netif_add+0x17c>)
 800975a:	f009 fe19 	bl	8013390 <iprintf>
        num_netifs++;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2bff      	cmp	r3, #255	; 0xff
 8009768:	dd06      	ble.n	8009778 <netif_add+0x108>
 800976a:	4b1e      	ldr	r3, [pc, #120]	; (80097e4 <netif_add+0x174>)
 800976c:	f240 128d 	movw	r2, #397	; 0x18d
 8009770:	4925      	ldr	r1, [pc, #148]	; (8009808 <netif_add+0x198>)
 8009772:	481e      	ldr	r0, [pc, #120]	; (80097ec <netif_add+0x17c>)
 8009774:	f009 fe0c 	bl	8013390 <iprintf>
        if (netif2->num == netif->num) {
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009784:	429a      	cmp	r2, r3
 8009786:	d108      	bne.n	800979a <netif_add+0x12a>
          netif->num++;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800978e:	3301      	adds	r3, #1
 8009790:	b2da      	uxtb	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009798:	e005      	b.n	80097a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1d0      	bne.n	8009748 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1be      	bne.n	800972a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097b2:	2bfe      	cmp	r3, #254	; 0xfe
 80097b4:	d103      	bne.n	80097be <netif_add+0x14e>
    netif_num = 0;
 80097b6:	4b11      	ldr	r3, [pc, #68]	; (80097fc <netif_add+0x18c>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	e006      	b.n	80097cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097c4:	3301      	adds	r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <netif_add+0x18c>)
 80097ca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <netif_add+0x190>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80097d4:	4a0a      	ldr	r2, [pc, #40]	; (8009800 <netif_add+0x190>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	08014710 	.word	0x08014710
 80097e8:	080147a4 	.word	0x080147a4
 80097ec:	08014760 	.word	0x08014760
 80097f0:	080147c0 	.word	0x080147c0
 80097f4:	08016e90 	.word	0x08016e90
 80097f8:	08009c1b 	.word	0x08009c1b
 80097fc:	2000c944 	.word	0x2000c944
 8009800:	2000c93c 	.word	0x2000c93c
 8009804:	080147e4 	.word	0x080147e4
 8009808:	080147f8 	.word	0x080147f8

0800980c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 fb8d 	bl	800bf38 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f006 ffd1 	bl	80107c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <netif_do_set_ipaddr+0x20>
 8009842:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <netif_do_set_ipaddr+0x88>)
 8009844:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009848:	491c      	ldr	r1, [pc, #112]	; (80098bc <netif_do_set_ipaddr+0x8c>)
 800984a:	481d      	ldr	r0, [pc, #116]	; (80098c0 <netif_do_set_ipaddr+0x90>)
 800984c:	f009 fda0 	bl	8013390 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <netif_do_set_ipaddr+0x34>
 8009856:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <netif_do_set_ipaddr+0x88>)
 8009858:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800985c:	4917      	ldr	r1, [pc, #92]	; (80098bc <netif_do_set_ipaddr+0x8c>)
 800985e:	4818      	ldr	r0, [pc, #96]	; (80098c0 <netif_do_set_ipaddr+0x90>)
 8009860:	f009 fd96 	bl	8013390 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3304      	adds	r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d01c      	beq.n	80098ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3304      	adds	r3, #4
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009882:	f107 0314 	add.w	r3, r7, #20
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ffbf 	bl	800980c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <netif_do_set_ipaddr+0x6a>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	e000      	b.n	800989c <netif_do_set_ipaddr+0x6c>
 800989a:	2300      	movs	r3, #0
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80098a0:	2101      	movs	r1, #1
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f8d2 	bl	8009a4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	08014710 	.word	0x08014710
 80098bc:	08014828 	.word	0x08014828
 80098c0:	08014760 	.word	0x08014760

080098c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3308      	adds	r3, #8
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d00a      	beq.n	80098f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <netif_do_set_netmask+0x26>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	e000      	b.n	80098ec <netif_do_set_netmask+0x28>
 80098ea:	2300      	movs	r3, #0
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	330c      	adds	r3, #12
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d00a      	beq.n	8009932 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <netif_do_set_gw+0x26>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	e000      	b.n	800992a <netif_do_set_gw+0x28>
 8009928:	2300      	movs	r3, #0
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800995c:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <netif_set_addr+0x90>)
 800995e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <netif_set_addr+0x90>)
 8009968:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009970:	4b17      	ldr	r3, [pc, #92]	; (80099d0 <netif_set_addr+0x90>)
 8009972:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <netif_set_addr+0x42>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <netif_set_addr+0x46>
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <netif_set_addr+0x48>
 8009986:	2300      	movs	r3, #0
 8009988:	617b      	str	r3, [r7, #20]
  if (remove) {
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009990:	f107 0310 	add.w	r3, r7, #16
 8009994:	461a      	mov	r2, r3
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff ff49 	bl	8009830 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f7ff ff8e 	bl	80098c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff ffa8 	bl	8009902 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	461a      	mov	r2, r3
 80099be:	68b9      	ldr	r1, [r7, #8]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff ff35 	bl	8009830 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80099c6:	bf00      	nop
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	08016e90 	.word	0x08016e90

080099d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80099dc:	4a04      	ldr	r2, [pc, #16]	; (80099f0 <netif_set_default+0x1c>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	2000c940 	.word	0x2000c940

080099f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d107      	bne.n	8009a12 <netif_set_up+0x1e>
 8009a02:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <netif_set_up+0x4c>)
 8009a04:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009a08:	490e      	ldr	r1, [pc, #56]	; (8009a44 <netif_set_up+0x50>)
 8009a0a:	480f      	ldr	r0, [pc, #60]	; (8009a48 <netif_set_up+0x54>)
 8009a0c:	f009 fcc0 	bl	8013390 <iprintf>
 8009a10:	e013      	b.n	8009a3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10c      	bne.n	8009a3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009a32:	2103      	movs	r1, #3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f809 	bl	8009a4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	08014710 	.word	0x08014710
 8009a44:	08014898 	.word	0x08014898
 8009a48:	08014760 	.word	0x08014760

08009a4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <netif_issue_reports+0x20>
 8009a5e:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <netif_issue_reports+0x74>)
 8009a60:	f240 326d 	movw	r2, #877	; 0x36d
 8009a64:	4917      	ldr	r1, [pc, #92]	; (8009ac4 <netif_issue_reports+0x78>)
 8009a66:	4818      	ldr	r0, [pc, #96]	; (8009ac8 <netif_issue_reports+0x7c>)
 8009a68:	f009 fc92 	bl	8013390 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01e      	beq.n	8009ab8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d017      	beq.n	8009ab8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d013      	beq.n	8009aba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3304      	adds	r3, #4
 8009a96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00e      	beq.n	8009aba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009aa2:	f003 0308 	and.w	r3, r3, #8
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3304      	adds	r3, #4
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f007 fdf3 	bl	801169c <etharp_request>
 8009ab6:	e000      	b.n	8009aba <netif_issue_reports+0x6e>
    return;
 8009ab8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	08014710 	.word	0x08014710
 8009ac4:	080148b4 	.word	0x080148b4
 8009ac8:	08014760 	.word	0x08014760

08009acc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d107      	bne.n	8009aea <netif_set_down+0x1e>
 8009ada:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <netif_set_down+0x58>)
 8009adc:	f240 329b 	movw	r2, #923	; 0x39b
 8009ae0:	4911      	ldr	r1, [pc, #68]	; (8009b28 <netif_set_down+0x5c>)
 8009ae2:	4812      	ldr	r0, [pc, #72]	; (8009b2c <netif_set_down+0x60>)
 8009ae4:	f009 fc54 	bl	8013390 <iprintf>
 8009ae8:	e019      	b.n	8009b1e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d012      	beq.n	8009b1e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009afe:	f023 0301 	bic.w	r3, r3, #1
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f007 f97d 	bl	8010e18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	08014710 	.word	0x08014710
 8009b28:	080148d8 	.word	0x080148d8
 8009b2c:	08014760 	.word	0x08014760

08009b30 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d107      	bne.n	8009b4e <netif_set_link_up+0x1e>
 8009b3e:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <netif_set_link_up+0x5c>)
 8009b40:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009b44:	4912      	ldr	r1, [pc, #72]	; (8009b90 <netif_set_link_up+0x60>)
 8009b46:	4813      	ldr	r0, [pc, #76]	; (8009b94 <netif_set_link_up+0x64>)
 8009b48:	f009 fc22 	bl	8013390 <iprintf>
 8009b4c:	e01b      	b.n	8009b86 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d114      	bne.n	8009b86 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b62:	f043 0304 	orr.w	r3, r3, #4
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009b6e:	2103      	movs	r1, #3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff ff6b 	bl	8009a4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <netif_set_link_up+0x56>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	08014710 	.word	0x08014710
 8009b90:	080148f8 	.word	0x080148f8
 8009b94:	08014760 	.word	0x08014760

08009b98 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d107      	bne.n	8009bb6 <netif_set_link_down+0x1e>
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <netif_set_link_down+0x54>)
 8009ba8:	f240 4206 	movw	r2, #1030	; 0x406
 8009bac:	4910      	ldr	r1, [pc, #64]	; (8009bf0 <netif_set_link_down+0x58>)
 8009bae:	4811      	ldr	r0, [pc, #68]	; (8009bf4 <netif_set_link_down+0x5c>)
 8009bb0:	f009 fbee 	bl	8013390 <iprintf>
 8009bb4:	e017      	b.n	8009be6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d010      	beq.n	8009be6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bca:	f023 0304 	bic.w	r3, r3, #4
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <netif_set_link_down+0x4e>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	08014710 	.word	0x08014710
 8009bf0:	0801491c 	.word	0x0801491c
 8009bf4:	08014760 	.word	0x08014760

08009bf8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	61da      	str	r2, [r3, #28]
  }
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009c26:	f06f 030b 	mvn.w	r3, #11
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d013      	beq.n	8009c70 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009c48:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <netif_get_by_index+0x48>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	e00c      	b.n	8009c6a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c56:	3301      	adds	r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	79fa      	ldrb	r2, [r7, #7]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d101      	bne.n	8009c64 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	e006      	b.n	8009c72 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ef      	bne.n	8009c50 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	2000c93c 	.word	0x2000c93c

08009c84 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009c8a:	f009 f98b 	bl	8012fa4 <sys_arch_protect>
 8009c8e:	6038      	str	r0, [r7, #0]
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <pbuf_free_ooseq+0x44>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	6838      	ldr	r0, [r7, #0]
 8009c98:	f009 f992 	bl	8012fc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <pbuf_free_ooseq+0x48>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	e00a      	b.n	8009cba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 f981 	bl	800bfb4 <tcp_free_ooseq>
      return;
 8009cb2:	e005      	b.n	8009cc0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1f1      	bne.n	8009ca4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2000c945 	.word	0x2000c945
 8009ccc:	2000c954 	.word	0x2000c954

08009cd0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009cd8:	f7ff ffd4 	bl	8009c84 <pbuf_free_ooseq>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009cea:	f009 f95b 	bl	8012fa4 <sys_arch_protect>
 8009cee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <pbuf_pool_is_empty+0x4c>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <pbuf_pool_is_empty+0x4c>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f009 f95f 	bl	8012fc0 <sys_arch_unprotect>

  if (!queued) {
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10f      	bne.n	8009d28 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009d08:	2100      	movs	r1, #0
 8009d0a:	480a      	ldr	r0, [pc, #40]	; (8009d34 <pbuf_pool_is_empty+0x50>)
 8009d0c:	f7fe fea6 	bl	8008a5c <tcpip_try_callback>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <pbuf_pool_is_empty+0x44>
 8009d16:	f009 f945 	bl	8012fa4 <sys_arch_protect>
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <pbuf_pool_is_empty+0x4c>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f009 f94c 	bl	8012fc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	2000c945 	.word	0x2000c945
 8009d34:	08009cd1 	.word	0x08009cd1

08009d38 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4611      	mov	r1, r2
 8009d44:	461a      	mov	r2, r3
 8009d46:	460b      	mov	r3, r1
 8009d48:	80fb      	strh	r3, [r7, #6]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	88fa      	ldrh	r2, [r7, #6]
 8009d5e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	88ba      	ldrh	r2, [r7, #4]
 8009d64:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009d66:	8b3b      	ldrh	r3, [r7, #24]
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	7f3a      	ldrb	r2, [r7, #28]
 8009d72:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	73da      	strb	r2, [r3, #15]
}
 8009d80:	bf00      	nop
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08c      	sub	sp, #48	; 0x30
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
 8009d96:	460b      	mov	r3, r1
 8009d98:	80bb      	strh	r3, [r7, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009da2:	887b      	ldrh	r3, [r7, #2]
 8009da4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009da8:	d07f      	beq.n	8009eaa <pbuf_alloc+0x11e>
 8009daa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009dae:	f300 80c8 	bgt.w	8009f42 <pbuf_alloc+0x1b6>
 8009db2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009db6:	d010      	beq.n	8009dda <pbuf_alloc+0x4e>
 8009db8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009dbc:	f300 80c1 	bgt.w	8009f42 <pbuf_alloc+0x1b6>
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d002      	beq.n	8009dca <pbuf_alloc+0x3e>
 8009dc4:	2b41      	cmp	r3, #65	; 0x41
 8009dc6:	f040 80bc 	bne.w	8009f42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009dca:	887a      	ldrh	r2, [r7, #2]
 8009dcc:	88bb      	ldrh	r3, [r7, #4]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f000 f8d1 	bl	8009f78 <pbuf_alloc_reference>
 8009dd6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009dd8:	e0bd      	b.n	8009f56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009de6:	200c      	movs	r0, #12
 8009de8:	f7ff fb9a 	bl	8009520 <memp_malloc>
 8009dec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009df4:	f7ff ff76 	bl	8009ce4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e00:	f000 faa8 	bl	800a354 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e0a7      	b.n	8009f58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009e08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e0a:	3303      	adds	r3, #3
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	8b7a      	ldrh	r2, [r7, #26]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	bf28      	it	cs
 8009e20:	4613      	movcs	r3, r2
 8009e22:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e26:	3310      	adds	r3, #16
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	3303      	adds	r3, #3
 8009e2e:	f023 0303 	bic.w	r3, r3, #3
 8009e32:	4618      	mov	r0, r3
 8009e34:	89f9      	ldrh	r1, [r7, #14]
 8009e36:	8b7a      	ldrh	r2, [r7, #26]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	887b      	ldrh	r3, [r7, #2]
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	460b      	mov	r3, r1
 8009e42:	4601      	mov	r1, r0
 8009e44:	6938      	ldr	r0, [r7, #16]
 8009e46:	f7ff ff77 	bl	8009d38 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d006      	beq.n	8009e64 <pbuf_alloc+0xd8>
 8009e56:	4b42      	ldr	r3, [pc, #264]	; (8009f60 <pbuf_alloc+0x1d4>)
 8009e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e5c:	4941      	ldr	r1, [pc, #260]	; (8009f64 <pbuf_alloc+0x1d8>)
 8009e5e:	4842      	ldr	r0, [pc, #264]	; (8009f68 <pbuf_alloc+0x1dc>)
 8009e60:	f009 fa96 	bl	8013390 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e66:	3303      	adds	r3, #3
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009e70:	d106      	bne.n	8009e80 <pbuf_alloc+0xf4>
 8009e72:	4b3b      	ldr	r3, [pc, #236]	; (8009f60 <pbuf_alloc+0x1d4>)
 8009e74:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009e78:	493c      	ldr	r1, [pc, #240]	; (8009f6c <pbuf_alloc+0x1e0>)
 8009e7a:	483b      	ldr	r0, [pc, #236]	; (8009f68 <pbuf_alloc+0x1dc>)
 8009e7c:	f009 fa88 	bl	8013390 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8a:	e002      	b.n	8009e92 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009e96:	8b7a      	ldrh	r2, [r7, #26]
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009ea2:	8b7b      	ldrh	r3, [r7, #26]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d19e      	bne.n	8009de6 <pbuf_alloc+0x5a>
      break;
 8009ea8:	e055      	b.n	8009f56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009eac:	3303      	adds	r3, #3
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	88bb      	ldrh	r3, [r7, #4]
 8009eb8:	3303      	adds	r3, #3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	4413      	add	r3, r2
 8009ec4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009ec6:	8b3b      	ldrh	r3, [r7, #24]
 8009ec8:	3310      	adds	r3, #16
 8009eca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ecc:	8b3a      	ldrh	r2, [r7, #24]
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	3303      	adds	r3, #3
 8009ed2:	f023 0303 	bic.w	r3, r3, #3
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d306      	bcc.n	8009ee8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009eda:	8afa      	ldrh	r2, [r7, #22]
 8009edc:	88bb      	ldrh	r3, [r7, #4]
 8009ede:	3303      	adds	r3, #3
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d201      	bcs.n	8009eec <pbuf_alloc+0x160>
        return NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e035      	b.n	8009f58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009eec:	8afb      	ldrh	r3, [r7, #22]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff f972 	bl	80091d8 <mem_malloc>
 8009ef4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <pbuf_alloc+0x174>
        return NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	e02b      	b.n	8009f58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f02:	3310      	adds	r3, #16
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	4413      	add	r3, r2
 8009f08:	3303      	adds	r3, #3
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
 8009f0e:	4618      	mov	r0, r3
 8009f10:	88b9      	ldrh	r1, [r7, #4]
 8009f12:	88ba      	ldrh	r2, [r7, #4]
 8009f14:	2300      	movs	r3, #0
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	887b      	ldrh	r3, [r7, #2]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4601      	mov	r1, r0
 8009f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f22:	f7ff ff09 	bl	8009d38 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d010      	beq.n	8009f54 <pbuf_alloc+0x1c8>
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <pbuf_alloc+0x1d4>)
 8009f34:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009f38:	490d      	ldr	r1, [pc, #52]	; (8009f70 <pbuf_alloc+0x1e4>)
 8009f3a:	480b      	ldr	r0, [pc, #44]	; (8009f68 <pbuf_alloc+0x1dc>)
 8009f3c:	f009 fa28 	bl	8013390 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009f40:	e008      	b.n	8009f54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009f42:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <pbuf_alloc+0x1d4>)
 8009f44:	f240 1227 	movw	r2, #295	; 0x127
 8009f48:	490a      	ldr	r1, [pc, #40]	; (8009f74 <pbuf_alloc+0x1e8>)
 8009f4a:	4807      	ldr	r0, [pc, #28]	; (8009f68 <pbuf_alloc+0x1dc>)
 8009f4c:	f009 fa20 	bl	8013390 <iprintf>
      return NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e001      	b.n	8009f58 <pbuf_alloc+0x1cc>
      break;
 8009f54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	08014940 	.word	0x08014940
 8009f64:	08014970 	.word	0x08014970
 8009f68:	080149a0 	.word	0x080149a0
 8009f6c:	080149c8 	.word	0x080149c8
 8009f70:	080149fc 	.word	0x080149fc
 8009f74:	08014a28 	.word	0x08014a28

08009f78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	807b      	strh	r3, [r7, #2]
 8009f84:	4613      	mov	r3, r2
 8009f86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009f88:	883b      	ldrh	r3, [r7, #0]
 8009f8a:	2b41      	cmp	r3, #65	; 0x41
 8009f8c:	d009      	beq.n	8009fa2 <pbuf_alloc_reference+0x2a>
 8009f8e:	883b      	ldrh	r3, [r7, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d006      	beq.n	8009fa2 <pbuf_alloc_reference+0x2a>
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <pbuf_alloc_reference+0x5c>)
 8009f96:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009f9a:	490f      	ldr	r1, [pc, #60]	; (8009fd8 <pbuf_alloc_reference+0x60>)
 8009f9c:	480f      	ldr	r0, [pc, #60]	; (8009fdc <pbuf_alloc_reference+0x64>)
 8009f9e:	f009 f9f7 	bl	8013390 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009fa2:	200b      	movs	r0, #11
 8009fa4:	f7ff fabc 	bl	8009520 <memp_malloc>
 8009fa8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e00b      	b.n	8009fcc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009fb4:	8879      	ldrh	r1, [r7, #2]
 8009fb6:	887a      	ldrh	r2, [r7, #2]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	883b      	ldrh	r3, [r7, #0]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff feb7 	bl	8009d38 <pbuf_init_alloced_pbuf>
  return p;
 8009fca:	68fb      	ldr	r3, [r7, #12]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08014940 	.word	0x08014940
 8009fd8:	08014a44 	.word	0x08014a44
 8009fdc:	080149a0 	.word	0x080149a0

08009fe0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
 8009fec:	460b      	mov	r3, r1
 8009fee:	81bb      	strh	r3, [r7, #12]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009ff8:	8a7b      	ldrh	r3, [r7, #18]
 8009ffa:	3303      	adds	r3, #3
 8009ffc:	f023 0203 	bic.w	r2, r3, #3
 800a000:	89bb      	ldrh	r3, [r7, #12]
 800a002:	441a      	add	r2, r3
 800a004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a006:	429a      	cmp	r2, r3
 800a008:	d901      	bls.n	800a00e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e018      	b.n	800a040 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d007      	beq.n	800a024 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a014:	8a7b      	ldrh	r3, [r7, #18]
 800a016:	3303      	adds	r3, #3
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	6a3a      	ldr	r2, [r7, #32]
 800a01e:	4413      	add	r3, r2
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	e001      	b.n	800a028 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	89b9      	ldrh	r1, [r7, #12]
 800a02c:	89ba      	ldrh	r2, [r7, #12]
 800a02e:	2302      	movs	r3, #2
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	897b      	ldrh	r3, [r7, #10]
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	460b      	mov	r3, r1
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	f7ff fe7d 	bl	8009d38 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a03e:	687b      	ldr	r3, [r7, #4]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <pbuf_realloc+0x20>
 800a05a:	4b3a      	ldr	r3, [pc, #232]	; (800a144 <pbuf_realloc+0xfc>)
 800a05c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a060:	4939      	ldr	r1, [pc, #228]	; (800a148 <pbuf_realloc+0x100>)
 800a062:	483a      	ldr	r0, [pc, #232]	; (800a14c <pbuf_realloc+0x104>)
 800a064:	f009 f994 	bl	8013390 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	891b      	ldrh	r3, [r3, #8]
 800a06c:	887a      	ldrh	r2, [r7, #2]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d263      	bcs.n	800a13a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	891a      	ldrh	r2, [r3, #8]
 800a076:	887b      	ldrh	r3, [r7, #2]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a07c:	887b      	ldrh	r3, [r7, #2]
 800a07e:	817b      	strh	r3, [r7, #10]
  q = p;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a084:	e018      	b.n	800a0b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	895b      	ldrh	r3, [r3, #10]
 800a08a:	897a      	ldrh	r2, [r7, #10]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	891a      	ldrh	r2, [r3, #8]
 800a094:	893b      	ldrh	r3, [r7, #8]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <pbuf_realloc+0x70>
 800a0aa:	4b26      	ldr	r3, [pc, #152]	; (800a144 <pbuf_realloc+0xfc>)
 800a0ac:	f240 12af 	movw	r2, #431	; 0x1af
 800a0b0:	4927      	ldr	r1, [pc, #156]	; (800a150 <pbuf_realloc+0x108>)
 800a0b2:	4826      	ldr	r0, [pc, #152]	; (800a14c <pbuf_realloc+0x104>)
 800a0b4:	f009 f96c 	bl	8013390 <iprintf>
  while (rem_len > q->len) {
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	895b      	ldrh	r3, [r3, #10]
 800a0bc:	897a      	ldrh	r2, [r7, #10]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d8e1      	bhi.n	800a086 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	7b1b      	ldrb	r3, [r3, #12]
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d121      	bne.n	800a112 <pbuf_realloc+0xca>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	895b      	ldrh	r3, [r3, #10]
 800a0d2:	897a      	ldrh	r2, [r7, #10]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d01c      	beq.n	800a112 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7b5b      	ldrb	r3, [r3, #13]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d116      	bne.n	800a112 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	897b      	ldrh	r3, [r7, #10]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7fe ff64 	bl	8008fc4 <mem_trim>
 800a0fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <pbuf_realloc+0xca>
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <pbuf_realloc+0xfc>)
 800a106:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a10a:	4912      	ldr	r1, [pc, #72]	; (800a154 <pbuf_realloc+0x10c>)
 800a10c:	480f      	ldr	r0, [pc, #60]	; (800a14c <pbuf_realloc+0x104>)
 800a10e:	f009 f93f 	bl	8013390 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	897a      	ldrh	r2, [r7, #10]
 800a116:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	895a      	ldrh	r2, [r3, #10]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f911 	bl	800a354 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	e000      	b.n	800a13c <pbuf_realloc+0xf4>
    return;
 800a13a:	bf00      	nop

}
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	08014940 	.word	0x08014940
 800a148:	08014a58 	.word	0x08014a58
 800a14c:	080149a0 	.word	0x080149a0
 800a150:	08014a70 	.word	0x08014a70
 800a154:	08014a88 	.word	0x08014a88

0800a158 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <pbuf_add_header_impl+0x22>
 800a16c:	4b2b      	ldr	r3, [pc, #172]	; (800a21c <pbuf_add_header_impl+0xc4>)
 800a16e:	f240 12df 	movw	r2, #479	; 0x1df
 800a172:	492b      	ldr	r1, [pc, #172]	; (800a220 <pbuf_add_header_impl+0xc8>)
 800a174:	482b      	ldr	r0, [pc, #172]	; (800a224 <pbuf_add_header_impl+0xcc>)
 800a176:	f009 f90b 	bl	8013390 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <pbuf_add_header_impl+0x30>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a186:	d301      	bcc.n	800a18c <pbuf_add_header_impl+0x34>
    return 1;
 800a188:	2301      	movs	r3, #1
 800a18a:	e043      	b.n	800a214 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <pbuf_add_header_impl+0x3e>
    return 0;
 800a192:	2300      	movs	r3, #0
 800a194:	e03e      	b.n	800a214 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	891a      	ldrh	r2, [r3, #8]
 800a19e:	8a7b      	ldrh	r3, [r7, #18]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	8a7a      	ldrh	r2, [r7, #18]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d901      	bls.n	800a1ae <pbuf_add_header_impl+0x56>
    return 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e032      	b.n	800a214 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	7b1b      	ldrb	r3, [r3, #12]
 800a1b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a1b4:	8a3b      	ldrh	r3, [r7, #16]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00c      	beq.n	800a1d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3310      	adds	r3, #16
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d20d      	bcs.n	800a1f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e01d      	b.n	800a214 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d006      	beq.n	800a1ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	425b      	negs	r3, r3
 800a1e6:	4413      	add	r3, r2
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e001      	b.n	800a1f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e011      	b.n	800a214 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	895a      	ldrh	r2, [r3, #10]
 800a1fa:	8a7b      	ldrh	r3, [r7, #18]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	891a      	ldrh	r2, [r3, #8]
 800a208:	8a7b      	ldrh	r3, [r7, #18]
 800a20a:	4413      	add	r3, r2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	811a      	strh	r2, [r3, #8]


  return 0;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	08014940 	.word	0x08014940
 800a220:	08014aa4 	.word	0x08014aa4
 800a224:	080149a0 	.word	0x080149a0

0800a228 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a232:	2200      	movs	r2, #0
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff ff8e 	bl	800a158 <pbuf_add_header_impl>
 800a23c:	4603      	mov	r3, r0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <pbuf_remove_header+0x1e>
 800a258:	4b20      	ldr	r3, [pc, #128]	; (800a2dc <pbuf_remove_header+0x94>)
 800a25a:	f240 224b 	movw	r2, #587	; 0x24b
 800a25e:	4920      	ldr	r1, [pc, #128]	; (800a2e0 <pbuf_remove_header+0x98>)
 800a260:	4820      	ldr	r0, [pc, #128]	; (800a2e4 <pbuf_remove_header+0x9c>)
 800a262:	f009 f895 	bl	8013390 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <pbuf_remove_header+0x2c>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a272:	d301      	bcc.n	800a278 <pbuf_remove_header+0x30>
    return 1;
 800a274:	2301      	movs	r3, #1
 800a276:	e02c      	b.n	800a2d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <pbuf_remove_header+0x3a>
    return 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	e027      	b.n	800a2d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	895b      	ldrh	r3, [r3, #10]
 800a28a:	89fa      	ldrh	r2, [r7, #14]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d908      	bls.n	800a2a2 <pbuf_remove_header+0x5a>
 800a290:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <pbuf_remove_header+0x94>)
 800a292:	f240 2255 	movw	r2, #597	; 0x255
 800a296:	4914      	ldr	r1, [pc, #80]	; (800a2e8 <pbuf_remove_header+0xa0>)
 800a298:	4812      	ldr	r0, [pc, #72]	; (800a2e4 <pbuf_remove_header+0x9c>)
 800a29a:	f009 f879 	bl	8013390 <iprintf>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e017      	b.n	800a2d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	441a      	add	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	895a      	ldrh	r2, [r3, #10]
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	891a      	ldrh	r2, [r3, #8]
 800a2c6:	89fb      	ldrh	r3, [r7, #14]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	08014940 	.word	0x08014940
 800a2e0:	08014aa4 	.word	0x08014aa4
 800a2e4:	080149a0 	.word	0x080149a0
 800a2e8:	08014ab0 	.word	0x08014ab0

0800a2ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	807b      	strh	r3, [r7, #2]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a2fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a300:	2b00      	cmp	r3, #0
 800a302:	da08      	bge.n	800a316 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a308:	425b      	negs	r3, r3
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff ff9b 	bl	800a248 <pbuf_remove_header>
 800a312:	4603      	mov	r3, r0
 800a314:	e007      	b.n	800a326 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a316:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a31a:	787a      	ldrb	r2, [r7, #1]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff ff1a 	bl	800a158 <pbuf_add_header_impl>
 800a324:	4603      	mov	r3, r0
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a33a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a33e:	2201      	movs	r2, #1
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff ffd2 	bl	800a2ec <pbuf_header_impl>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10b      	bne.n	800a37a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <pbuf_free+0x22>
 800a368:	4b3b      	ldr	r3, [pc, #236]	; (800a458 <pbuf_free+0x104>)
 800a36a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a36e:	493b      	ldr	r1, [pc, #236]	; (800a45c <pbuf_free+0x108>)
 800a370:	483b      	ldr	r0, [pc, #236]	; (800a460 <pbuf_free+0x10c>)
 800a372:	f009 f80d 	bl	8013390 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a376:	2300      	movs	r3, #0
 800a378:	e069      	b.n	800a44e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a37e:	e062      	b.n	800a446 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a380:	f008 fe10 	bl	8012fa4 <sys_arch_protect>
 800a384:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7b9b      	ldrb	r3, [r3, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <pbuf_free+0x48>
 800a38e:	4b32      	ldr	r3, [pc, #200]	; (800a458 <pbuf_free+0x104>)
 800a390:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a394:	4933      	ldr	r1, [pc, #204]	; (800a464 <pbuf_free+0x110>)
 800a396:	4832      	ldr	r0, [pc, #200]	; (800a460 <pbuf_free+0x10c>)
 800a398:	f008 fffa 	bl	8013390 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7b9b      	ldrb	r3, [r3, #14]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	739a      	strb	r2, [r3, #14]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7b9b      	ldrb	r3, [r3, #14]
 800a3ac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a3ae:	69b8      	ldr	r0, [r7, #24]
 800a3b0:	f008 fe06 	bl	8012fc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d143      	bne.n	800a442 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7b1b      	ldrb	r3, [r3, #12]
 800a3c4:	f003 030f 	and.w	r3, r3, #15
 800a3c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7b5b      	ldrb	r3, [r3, #13]
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d011      	beq.n	800a3fa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <pbuf_free+0x9c>
 800a3e2:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <pbuf_free+0x104>)
 800a3e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a3e8:	491f      	ldr	r1, [pc, #124]	; (800a468 <pbuf_free+0x114>)
 800a3ea:	481d      	ldr	r0, [pc, #116]	; (800a460 <pbuf_free+0x10c>)
 800a3ec:	f008 ffd0 	bl	8013390 <iprintf>
        pc->custom_free_function(p);
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
 800a3f8:	e01d      	b.n	800a436 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d104      	bne.n	800a40a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	200c      	movs	r0, #12
 800a404:	f7ff f902 	bl	800960c <memp_free>
 800a408:	e015      	b.n	800a436 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d104      	bne.n	800a41a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	200b      	movs	r0, #11
 800a414:	f7ff f8fa 	bl	800960c <memp_free>
 800a418:	e00d      	b.n	800a436 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <pbuf_free+0xd4>
          mem_free(p);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7fe fd3f 	bl	8008ea4 <mem_free>
 800a426:	e006      	b.n	800a436 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a428:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <pbuf_free+0x104>)
 800a42a:	f240 320f 	movw	r2, #783	; 0x30f
 800a42e:	490f      	ldr	r1, [pc, #60]	; (800a46c <pbuf_free+0x118>)
 800a430:	480b      	ldr	r0, [pc, #44]	; (800a460 <pbuf_free+0x10c>)
 800a432:	f008 ffad 	bl	8013390 <iprintf>
        }
      }
      count++;
 800a436:	7ffb      	ldrb	r3, [r7, #31]
 800a438:	3301      	adds	r3, #1
 800a43a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	607b      	str	r3, [r7, #4]
 800a440:	e001      	b.n	800a446 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d199      	bne.n	800a380 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a44c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	08014940 	.word	0x08014940
 800a45c:	08014aa4 	.word	0x08014aa4
 800a460:	080149a0 	.word	0x080149a0
 800a464:	08014ad0 	.word	0x08014ad0
 800a468:	08014ae8 	.word	0x08014ae8
 800a46c:	08014b0c 	.word	0x08014b0c

0800a470 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a47c:	e005      	b.n	800a48a <pbuf_clen+0x1a>
    ++len;
 800a47e:	89fb      	ldrh	r3, [r7, #14]
 800a480:	3301      	adds	r3, #1
 800a482:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1f6      	bne.n	800a47e <pbuf_clen+0xe>
  }
  return len;
 800a490:	89fb      	ldrh	r3, [r7, #14]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d016      	beq.n	800a4dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a4ae:	f008 fd79 	bl	8012fa4 <sys_arch_protect>
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7b9b      	ldrb	r3, [r3, #14]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	739a      	strb	r2, [r3, #14]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f008 fd7d 	bl	8012fc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7b9b      	ldrb	r3, [r3, #14]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d106      	bne.n	800a4dc <pbuf_ref+0x3c>
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <pbuf_ref+0x44>)
 800a4d0:	f240 3242 	movw	r2, #834	; 0x342
 800a4d4:	4904      	ldr	r1, [pc, #16]	; (800a4e8 <pbuf_ref+0x48>)
 800a4d6:	4805      	ldr	r0, [pc, #20]	; (800a4ec <pbuf_ref+0x4c>)
 800a4d8:	f008 ff5a 	bl	8013390 <iprintf>
  }
}
 800a4dc:	bf00      	nop
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	08014940 	.word	0x08014940
 800a4e8:	08014b20 	.word	0x08014b20
 800a4ec:	080149a0 	.word	0x080149a0

0800a4f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <pbuf_cat+0x16>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <pbuf_cat+0x26>
 800a506:	4b20      	ldr	r3, [pc, #128]	; (800a588 <pbuf_cat+0x98>)
 800a508:	f240 3259 	movw	r2, #857	; 0x359
 800a50c:	491f      	ldr	r1, [pc, #124]	; (800a58c <pbuf_cat+0x9c>)
 800a50e:	4820      	ldr	r0, [pc, #128]	; (800a590 <pbuf_cat+0xa0>)
 800a510:	f008 ff3e 	bl	8013390 <iprintf>
 800a514:	e034      	b.n	800a580 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]
 800a51a:	e00a      	b.n	800a532 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	891a      	ldrh	r2, [r3, #8]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	891b      	ldrh	r3, [r3, #8]
 800a524:	4413      	add	r3, r2
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f0      	bne.n	800a51c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	891a      	ldrh	r2, [r3, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	895b      	ldrh	r3, [r3, #10]
 800a542:	429a      	cmp	r2, r3
 800a544:	d006      	beq.n	800a554 <pbuf_cat+0x64>
 800a546:	4b10      	ldr	r3, [pc, #64]	; (800a588 <pbuf_cat+0x98>)
 800a548:	f240 3262 	movw	r2, #866	; 0x362
 800a54c:	4911      	ldr	r1, [pc, #68]	; (800a594 <pbuf_cat+0xa4>)
 800a54e:	4810      	ldr	r0, [pc, #64]	; (800a590 <pbuf_cat+0xa0>)
 800a550:	f008 ff1e 	bl	8013390 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d006      	beq.n	800a56a <pbuf_cat+0x7a>
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <pbuf_cat+0x98>)
 800a55e:	f240 3263 	movw	r2, #867	; 0x363
 800a562:	490d      	ldr	r1, [pc, #52]	; (800a598 <pbuf_cat+0xa8>)
 800a564:	480a      	ldr	r0, [pc, #40]	; (800a590 <pbuf_cat+0xa0>)
 800a566:	f008 ff13 	bl	8013390 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	891a      	ldrh	r2, [r3, #8]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	891b      	ldrh	r3, [r3, #8]
 800a572:	4413      	add	r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	08014940 	.word	0x08014940
 800a58c:	08014b34 	.word	0x08014b34
 800a590:	080149a0 	.word	0x080149a0
 800a594:	08014b6c 	.word	0x08014b6c
 800a598:	08014b9c 	.word	0x08014b9c

0800a59c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff ffa1 	bl	800a4f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a5ae:	6838      	ldr	r0, [r7, #0]
 800a5b0:	f7ff ff76 	bl	800a4a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d008      	beq.n	800a5e6 <pbuf_copy+0x2a>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d005      	beq.n	800a5e6 <pbuf_copy+0x2a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	891a      	ldrh	r2, [r3, #8]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	891b      	ldrh	r3, [r3, #8]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d209      	bcs.n	800a5fa <pbuf_copy+0x3e>
 800a5e6:	4b57      	ldr	r3, [pc, #348]	; (800a744 <pbuf_copy+0x188>)
 800a5e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a5ec:	4956      	ldr	r1, [pc, #344]	; (800a748 <pbuf_copy+0x18c>)
 800a5ee:	4857      	ldr	r0, [pc, #348]	; (800a74c <pbuf_copy+0x190>)
 800a5f0:	f008 fece 	bl	8013390 <iprintf>
 800a5f4:	f06f 030f 	mvn.w	r3, #15
 800a5f8:	e09f      	b.n	800a73a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	895b      	ldrh	r3, [r3, #10]
 800a5fe:	461a      	mov	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	895b      	ldrh	r3, [r3, #10]
 800a608:	4619      	mov	r1, r3
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	1acb      	subs	r3, r1, r3
 800a60e:	429a      	cmp	r2, r3
 800a610:	d306      	bcc.n	800a620 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	895b      	ldrh	r3, [r3, #10]
 800a616:	461a      	mov	r2, r3
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	e005      	b.n	800a62c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	895b      	ldrh	r3, [r3, #10]
 800a624:	461a      	mov	r2, r3
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	18d0      	adds	r0, r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	4413      	add	r3, r2
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4619      	mov	r1, r3
 800a640:	f008 fdfb 	bl	801323a <memcpy>
    offset_to += len;
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	895b      	ldrh	r3, [r3, #10]
 800a658:	461a      	mov	r2, r3
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d906      	bls.n	800a66e <pbuf_copy+0xb2>
 800a660:	4b38      	ldr	r3, [pc, #224]	; (800a744 <pbuf_copy+0x188>)
 800a662:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a666:	493a      	ldr	r1, [pc, #232]	; (800a750 <pbuf_copy+0x194>)
 800a668:	4838      	ldr	r0, [pc, #224]	; (800a74c <pbuf_copy+0x190>)
 800a66a:	f008 fe91 	bl	8013390 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	895b      	ldrh	r3, [r3, #10]
 800a672:	461a      	mov	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	4293      	cmp	r3, r2
 800a678:	d906      	bls.n	800a688 <pbuf_copy+0xcc>
 800a67a:	4b32      	ldr	r3, [pc, #200]	; (800a744 <pbuf_copy+0x188>)
 800a67c:	f240 32da 	movw	r2, #986	; 0x3da
 800a680:	4934      	ldr	r1, [pc, #208]	; (800a754 <pbuf_copy+0x198>)
 800a682:	4832      	ldr	r0, [pc, #200]	; (800a74c <pbuf_copy+0x190>)
 800a684:	f008 fe84 	bl	8013390 <iprintf>
    if (offset_from >= p_from->len) {
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	895b      	ldrh	r3, [r3, #10]
 800a68c:	461a      	mov	r2, r3
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	4293      	cmp	r3, r2
 800a692:	d304      	bcc.n	800a69e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	895b      	ldrh	r3, [r3, #10]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d114      	bne.n	800a6d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10c      	bne.n	800a6d4 <pbuf_copy+0x118>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d009      	beq.n	800a6d4 <pbuf_copy+0x118>
 800a6c0:	4b20      	ldr	r3, [pc, #128]	; (800a744 <pbuf_copy+0x188>)
 800a6c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a6c6:	4924      	ldr	r1, [pc, #144]	; (800a758 <pbuf_copy+0x19c>)
 800a6c8:	4820      	ldr	r0, [pc, #128]	; (800a74c <pbuf_copy+0x190>)
 800a6ca:	f008 fe61 	bl	8013390 <iprintf>
 800a6ce:	f06f 030f 	mvn.w	r3, #15
 800a6d2:	e032      	b.n	800a73a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d013      	beq.n	800a702 <pbuf_copy+0x146>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	895a      	ldrh	r2, [r3, #10]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	891b      	ldrh	r3, [r3, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d10d      	bne.n	800a702 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d009      	beq.n	800a702 <pbuf_copy+0x146>
 800a6ee:	4b15      	ldr	r3, [pc, #84]	; (800a744 <pbuf_copy+0x188>)
 800a6f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a6f4:	4919      	ldr	r1, [pc, #100]	; (800a75c <pbuf_copy+0x1a0>)
 800a6f6:	4815      	ldr	r0, [pc, #84]	; (800a74c <pbuf_copy+0x190>)
 800a6f8:	f008 fe4a 	bl	8013390 <iprintf>
 800a6fc:	f06f 0305 	mvn.w	r3, #5
 800a700:	e01b      	b.n	800a73a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <pbuf_copy+0x174>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	895a      	ldrh	r2, [r3, #10]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	891b      	ldrh	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d10d      	bne.n	800a730 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d009      	beq.n	800a730 <pbuf_copy+0x174>
 800a71c:	4b09      	ldr	r3, [pc, #36]	; (800a744 <pbuf_copy+0x188>)
 800a71e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a722:	490e      	ldr	r1, [pc, #56]	; (800a75c <pbuf_copy+0x1a0>)
 800a724:	4809      	ldr	r0, [pc, #36]	; (800a74c <pbuf_copy+0x190>)
 800a726:	f008 fe33 	bl	8013390 <iprintf>
 800a72a:	f06f 0305 	mvn.w	r3, #5
 800a72e:	e004      	b.n	800a73a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f47f af61 	bne.w	800a5fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	08014940 	.word	0x08014940
 800a748:	08014be8 	.word	0x08014be8
 800a74c:	080149a0 	.word	0x080149a0
 800a750:	08014c18 	.word	0x08014c18
 800a754:	08014c30 	.word	0x08014c30
 800a758:	08014c4c 	.word	0x08014c4c
 800a75c:	08014c5c 	.word	0x08014c5c

0800a760 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4611      	mov	r1, r2
 800a76c:	461a      	mov	r2, r3
 800a76e:	460b      	mov	r3, r1
 800a770:	80fb      	strh	r3, [r7, #6]
 800a772:	4613      	mov	r3, r2
 800a774:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d108      	bne.n	800a796 <pbuf_copy_partial+0x36>
 800a784:	4b2b      	ldr	r3, [pc, #172]	; (800a834 <pbuf_copy_partial+0xd4>)
 800a786:	f240 420a 	movw	r2, #1034	; 0x40a
 800a78a:	492b      	ldr	r1, [pc, #172]	; (800a838 <pbuf_copy_partial+0xd8>)
 800a78c:	482b      	ldr	r0, [pc, #172]	; (800a83c <pbuf_copy_partial+0xdc>)
 800a78e:	f008 fdff 	bl	8013390 <iprintf>
 800a792:	2300      	movs	r3, #0
 800a794:	e04a      	b.n	800a82c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d108      	bne.n	800a7ae <pbuf_copy_partial+0x4e>
 800a79c:	4b25      	ldr	r3, [pc, #148]	; (800a834 <pbuf_copy_partial+0xd4>)
 800a79e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a7a2:	4927      	ldr	r1, [pc, #156]	; (800a840 <pbuf_copy_partial+0xe0>)
 800a7a4:	4825      	ldr	r0, [pc, #148]	; (800a83c <pbuf_copy_partial+0xdc>)
 800a7a6:	f008 fdf3 	bl	8013390 <iprintf>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e03e      	b.n	800a82c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	61fb      	str	r3, [r7, #28]
 800a7b2:	e034      	b.n	800a81e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a7b4:	88bb      	ldrh	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <pbuf_copy_partial+0x70>
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	895b      	ldrh	r3, [r3, #10]
 800a7be:	88ba      	ldrh	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d305      	bcc.n	800a7d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	895b      	ldrh	r3, [r3, #10]
 800a7c8:	88ba      	ldrh	r2, [r7, #4]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	80bb      	strh	r3, [r7, #4]
 800a7ce:	e023      	b.n	800a818 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	895a      	ldrh	r2, [r3, #10]
 800a7d4:	88bb      	ldrh	r3, [r7, #4]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a7da:	8b3a      	ldrh	r2, [r7, #24]
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d901      	bls.n	800a7e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a7e2:	88fb      	ldrh	r3, [r7, #6]
 800a7e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a7e6:	8b7b      	ldrh	r3, [r7, #26]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	18d0      	adds	r0, r2, r3
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	88bb      	ldrh	r3, [r7, #4]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	8b3a      	ldrh	r2, [r7, #24]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	f008 fd1f 	bl	801323a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a7fc:	8afa      	ldrh	r2, [r7, #22]
 800a7fe:	8b3b      	ldrh	r3, [r7, #24]
 800a800:	4413      	add	r3, r2
 800a802:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a804:	8b7a      	ldrh	r2, [r7, #26]
 800a806:	8b3b      	ldrh	r3, [r7, #24]
 800a808:	4413      	add	r3, r2
 800a80a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a80c:	88fa      	ldrh	r2, [r7, #6]
 800a80e:	8b3b      	ldrh	r3, [r7, #24]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	88fb      	ldrh	r3, [r7, #6]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <pbuf_copy_partial+0xca>
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1c4      	bne.n	800a7b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a82a:	8afb      	ldrh	r3, [r7, #22]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	08014940 	.word	0x08014940
 800a838:	08014c88 	.word	0x08014c88
 800a83c:	080149a0 	.word	0x080149a0
 800a840:	08014ca8 	.word	0x08014ca8

0800a844 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	4603      	mov	r3, r0
 800a84c:	603a      	str	r2, [r7, #0]
 800a84e:	71fb      	strb	r3, [r7, #7]
 800a850:	460b      	mov	r3, r1
 800a852:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	8919      	ldrh	r1, [r3, #8]
 800a858:	88ba      	ldrh	r2, [r7, #4]
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff fa95 	bl	8009d8c <pbuf_alloc>
 800a862:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <pbuf_clone+0x2a>
    return NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e011      	b.n	800a892 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff fea3 	bl	800a5bc <pbuf_copy>
 800a876:	4603      	mov	r3, r0
 800a878:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a87a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <pbuf_clone+0x4c>
 800a882:	4b06      	ldr	r3, [pc, #24]	; (800a89c <pbuf_clone+0x58>)
 800a884:	f240 5224 	movw	r2, #1316	; 0x524
 800a888:	4905      	ldr	r1, [pc, #20]	; (800a8a0 <pbuf_clone+0x5c>)
 800a88a:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <pbuf_clone+0x60>)
 800a88c:	f008 fd80 	bl	8013390 <iprintf>
  return q;
 800a890:	68fb      	ldr	r3, [r7, #12]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	08014940 	.word	0x08014940
 800a8a0:	08014db4 	.word	0x08014db4
 800a8a4:	080149a0 	.word	0x080149a0

0800a8a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8ac:	f008 fd88 	bl	80133c0 <rand>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	4b01      	ldr	r3, [pc, #4]	; (800a8c8 <tcp_init+0x20>)
 800a8c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a8c4:	bf00      	nop
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	20000024 	.word	0x20000024

0800a8cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d105      	bne.n	800a8e8 <tcp_free+0x1c>
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <tcp_free+0x2c>)
 800a8de:	22d4      	movs	r2, #212	; 0xd4
 800a8e0:	4906      	ldr	r1, [pc, #24]	; (800a8fc <tcp_free+0x30>)
 800a8e2:	4807      	ldr	r0, [pc, #28]	; (800a900 <tcp_free+0x34>)
 800a8e4:	f008 fd54 	bl	8013390 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a8e8:	6879      	ldr	r1, [r7, #4]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	f7fe fe8e 	bl	800960c <memp_free>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	08014e40 	.word	0x08014e40
 800a8fc:	08014e70 	.word	0x08014e70
 800a900:	08014e84 	.word	0x08014e84

0800a904 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7d1b      	ldrb	r3, [r3, #20]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d105      	bne.n	800a920 <tcp_free_listen+0x1c>
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <tcp_free_listen+0x2c>)
 800a916:	22df      	movs	r2, #223	; 0xdf
 800a918:	4906      	ldr	r1, [pc, #24]	; (800a934 <tcp_free_listen+0x30>)
 800a91a:	4807      	ldr	r0, [pc, #28]	; (800a938 <tcp_free_listen+0x34>)
 800a91c:	f008 fd38 	bl	8013390 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a920:	6879      	ldr	r1, [r7, #4]
 800a922:	2002      	movs	r0, #2
 800a924:	f7fe fe72 	bl	800960c <memp_free>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	08014e40 	.word	0x08014e40
 800a934:	08014eac 	.word	0x08014eac
 800a938:	08014e84 	.word	0x08014e84

0800a93c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a940:	f000 fea2 	bl	800b688 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <tcp_tmr+0x28>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <tcp_tmr+0x28>)
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	4b04      	ldr	r3, [pc, #16]	; (800a964 <tcp_tmr+0x28>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a95c:	f000 fb54 	bl	800b008 <tcp_slowtmr>
  }
}
 800a960:	bf00      	nop
 800a962:	bd80      	pop	{r7, pc}
 800a964:	2000c95d 	.word	0x2000c95d

0800a968 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d105      	bne.n	800a984 <tcp_remove_listener+0x1c>
 800a978:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <tcp_remove_listener+0x48>)
 800a97a:	22ff      	movs	r2, #255	; 0xff
 800a97c:	490d      	ldr	r1, [pc, #52]	; (800a9b4 <tcp_remove_listener+0x4c>)
 800a97e:	480e      	ldr	r0, [pc, #56]	; (800a9b8 <tcp_remove_listener+0x50>)
 800a980:	f008 fd06 	bl	8013390 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	e00a      	b.n	800a9a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d102      	bne.n	800a99a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1f1      	bne.n	800a98a <tcp_remove_listener+0x22>
    }
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	08014e40 	.word	0x08014e40
 800a9b4:	08014ec8 	.word	0x08014ec8
 800a9b8:	08014e84 	.word	0x08014e84

0800a9bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <tcp_listen_closed+0x1c>
 800a9ca:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <tcp_listen_closed+0x60>)
 800a9cc:	f240 1211 	movw	r2, #273	; 0x111
 800a9d0:	4913      	ldr	r1, [pc, #76]	; (800aa20 <tcp_listen_closed+0x64>)
 800a9d2:	4814      	ldr	r0, [pc, #80]	; (800aa24 <tcp_listen_closed+0x68>)
 800a9d4:	f008 fcdc 	bl	8013390 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	7d1b      	ldrb	r3, [r3, #20]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d006      	beq.n	800a9ee <tcp_listen_closed+0x32>
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <tcp_listen_closed+0x60>)
 800a9e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a9e6:	4910      	ldr	r1, [pc, #64]	; (800aa28 <tcp_listen_closed+0x6c>)
 800a9e8:	480e      	ldr	r0, [pc, #56]	; (800aa24 <tcp_listen_closed+0x68>)
 800a9ea:	f008 fcd1 	bl	8013390 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	e00b      	b.n	800aa0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a9f4:	4a0d      	ldr	r2, [pc, #52]	; (800aa2c <tcp_listen_closed+0x70>)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff ffb1 	bl	800a968 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d9f0      	bls.n	800a9f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	08014e40 	.word	0x08014e40
 800aa20:	08014ef0 	.word	0x08014ef0
 800aa24:	08014e84 	.word	0x08014e84
 800aa28:	08014efc 	.word	0x08014efc
 800aa2c:	08016e68 	.word	0x08016e68

0800aa30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aa30:	b5b0      	push	{r4, r5, r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af04      	add	r7, sp, #16
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <tcp_close_shutdown+0x20>
 800aa42:	4b63      	ldr	r3, [pc, #396]	; (800abd0 <tcp_close_shutdown+0x1a0>)
 800aa44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aa48:	4962      	ldr	r1, [pc, #392]	; (800abd4 <tcp_close_shutdown+0x1a4>)
 800aa4a:	4863      	ldr	r0, [pc, #396]	; (800abd8 <tcp_close_shutdown+0x1a8>)
 800aa4c:	f008 fca0 	bl	8013390 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d066      	beq.n	800ab24 <tcp_close_shutdown+0xf4>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7d1b      	ldrb	r3, [r3, #20]
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d003      	beq.n	800aa66 <tcp_close_shutdown+0x36>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7d1b      	ldrb	r3, [r3, #20]
 800aa62:	2b07      	cmp	r3, #7
 800aa64:	d15e      	bne.n	800ab24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d104      	bne.n	800aa78 <tcp_close_shutdown+0x48>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa76:	d055      	beq.n	800ab24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	8b5b      	ldrh	r3, [r3, #26]
 800aa7c:	f003 0310 	and.w	r3, r3, #16
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <tcp_close_shutdown+0x62>
 800aa84:	4b52      	ldr	r3, [pc, #328]	; (800abd0 <tcp_close_shutdown+0x1a0>)
 800aa86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aa8a:	4954      	ldr	r1, [pc, #336]	; (800abdc <tcp_close_shutdown+0x1ac>)
 800aa8c:	4852      	ldr	r0, [pc, #328]	; (800abd8 <tcp_close_shutdown+0x1a8>)
 800aa8e:	f008 fc7f 	bl	8013390 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aa9a:	687d      	ldr	r5, [r7, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	8ad2      	ldrh	r2, [r2, #22]
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	8b09      	ldrh	r1, [r1, #24]
 800aaa8:	9102      	str	r1, [sp, #8]
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	462b      	mov	r3, r5
 800aab0:	4622      	mov	r2, r4
 800aab2:	4601      	mov	r1, r0
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f004 fe91 	bl	800f7dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 f8c6 	bl	800bc4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aac0:	4b47      	ldr	r3, [pc, #284]	; (800abe0 <tcp_close_shutdown+0x1b0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d105      	bne.n	800aad6 <tcp_close_shutdown+0xa6>
 800aaca:	4b45      	ldr	r3, [pc, #276]	; (800abe0 <tcp_close_shutdown+0x1b0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	4a43      	ldr	r2, [pc, #268]	; (800abe0 <tcp_close_shutdown+0x1b0>)
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	e013      	b.n	800aafe <tcp_close_shutdown+0xce>
 800aad6:	4b42      	ldr	r3, [pc, #264]	; (800abe0 <tcp_close_shutdown+0x1b0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e00c      	b.n	800aaf8 <tcp_close_shutdown+0xc8>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d104      	bne.n	800aaf2 <tcp_close_shutdown+0xc2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	60da      	str	r2, [r3, #12]
 800aaf0:	e005      	b.n	800aafe <tcp_close_shutdown+0xce>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1ef      	bne.n	800aade <tcp_close_shutdown+0xae>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	60da      	str	r2, [r3, #12]
 800ab04:	4b37      	ldr	r3, [pc, #220]	; (800abe4 <tcp_close_shutdown+0x1b4>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ab0a:	4b37      	ldr	r3, [pc, #220]	; (800abe8 <tcp_close_shutdown+0x1b8>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d102      	bne.n	800ab1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ab14:	f003 fd5e 	bl	800e5d4 <tcp_trigger_input_pcb_close>
 800ab18:	e002      	b.n	800ab20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fed6 	bl	800a8cc <tcp_free>
      }
      return ERR_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	e050      	b.n	800abc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7d1b      	ldrb	r3, [r3, #20]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d03b      	beq.n	800aba4 <tcp_close_shutdown+0x174>
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	dc44      	bgt.n	800abba <tcp_close_shutdown+0x18a>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <tcp_close_shutdown+0x10a>
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d02a      	beq.n	800ab8e <tcp_close_shutdown+0x15e>
 800ab38:	e03f      	b.n	800abba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8adb      	ldrh	r3, [r3, #22]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d021      	beq.n	800ab86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab42:	4b2a      	ldr	r3, [pc, #168]	; (800abec <tcp_close_shutdown+0x1bc>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d105      	bne.n	800ab58 <tcp_close_shutdown+0x128>
 800ab4c:	4b27      	ldr	r3, [pc, #156]	; (800abec <tcp_close_shutdown+0x1bc>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	4a26      	ldr	r2, [pc, #152]	; (800abec <tcp_close_shutdown+0x1bc>)
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e013      	b.n	800ab80 <tcp_close_shutdown+0x150>
 800ab58:	4b24      	ldr	r3, [pc, #144]	; (800abec <tcp_close_shutdown+0x1bc>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	60bb      	str	r3, [r7, #8]
 800ab5e:	e00c      	b.n	800ab7a <tcp_close_shutdown+0x14a>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d104      	bne.n	800ab74 <tcp_close_shutdown+0x144>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	60da      	str	r2, [r3, #12]
 800ab72:	e005      	b.n	800ab80 <tcp_close_shutdown+0x150>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	60bb      	str	r3, [r7, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1ef      	bne.n	800ab60 <tcp_close_shutdown+0x130>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff fea0 	bl	800a8cc <tcp_free>
      break;
 800ab8c:	e01a      	b.n	800abc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff ff14 	bl	800a9bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	4816      	ldr	r0, [pc, #88]	; (800abf0 <tcp_close_shutdown+0x1c0>)
 800ab98:	f001 f8a8 	bl	800bcec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff feb1 	bl	800a904 <tcp_free_listen>
      break;
 800aba2:	e00f      	b.n	800abc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aba4:	6879      	ldr	r1, [r7, #4]
 800aba6:	480e      	ldr	r0, [pc, #56]	; (800abe0 <tcp_close_shutdown+0x1b0>)
 800aba8:	f001 f8a0 	bl	800bcec <tcp_pcb_remove>
 800abac:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <tcp_close_shutdown+0x1b4>)
 800abae:	2201      	movs	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fe8a 	bl	800a8cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800abb8:	e004      	b.n	800abc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f81a 	bl	800abf4 <tcp_close_shutdown_fin>
 800abc0:	4603      	mov	r3, r0
 800abc2:	e000      	b.n	800abc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bdb0      	pop	{r4, r5, r7, pc}
 800abce:	bf00      	nop
 800abd0:	08014e40 	.word	0x08014e40
 800abd4:	08014f14 	.word	0x08014f14
 800abd8:	08014e84 	.word	0x08014e84
 800abdc:	08014f34 	.word	0x08014f34
 800abe0:	2000c954 	.word	0x2000c954
 800abe4:	2000c95c 	.word	0x2000c95c
 800abe8:	2000c994 	.word	0x2000c994
 800abec:	2000c94c 	.word	0x2000c94c
 800abf0:	2000c950 	.word	0x2000c950

0800abf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <tcp_close_shutdown_fin+0x1c>
 800ac02:	4b2e      	ldr	r3, [pc, #184]	; (800acbc <tcp_close_shutdown_fin+0xc8>)
 800ac04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ac08:	492d      	ldr	r1, [pc, #180]	; (800acc0 <tcp_close_shutdown_fin+0xcc>)
 800ac0a:	482e      	ldr	r0, [pc, #184]	; (800acc4 <tcp_close_shutdown_fin+0xd0>)
 800ac0c:	f008 fbc0 	bl	8013390 <iprintf>

  switch (pcb->state) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	7d1b      	ldrb	r3, [r3, #20]
 800ac14:	2b07      	cmp	r3, #7
 800ac16:	d020      	beq.n	800ac5a <tcp_close_shutdown_fin+0x66>
 800ac18:	2b07      	cmp	r3, #7
 800ac1a:	dc2b      	bgt.n	800ac74 <tcp_close_shutdown_fin+0x80>
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d002      	beq.n	800ac26 <tcp_close_shutdown_fin+0x32>
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d00d      	beq.n	800ac40 <tcp_close_shutdown_fin+0x4c>
 800ac24:	e026      	b.n	800ac74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f003 fee6 	bl	800e9f8 <tcp_send_fin>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11f      	bne.n	800ac78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2205      	movs	r2, #5
 800ac3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac3e:	e01b      	b.n	800ac78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f003 fed9 	bl	800e9f8 <tcp_send_fin>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d114      	bne.n	800ac7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2205      	movs	r2, #5
 800ac56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac58:	e010      	b.n	800ac7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f003 fecc 	bl	800e9f8 <tcp_send_fin>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d109      	bne.n	800ac80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2209      	movs	r2, #9
 800ac70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac72:	e005      	b.n	800ac80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e01c      	b.n	800acb2 <tcp_close_shutdown_fin+0xbe>
      break;
 800ac78:	bf00      	nop
 800ac7a:	e002      	b.n	800ac82 <tcp_close_shutdown_fin+0x8e>
      break;
 800ac7c:	bf00      	nop
 800ac7e:	e000      	b.n	800ac82 <tcp_close_shutdown_fin+0x8e>
      break;
 800ac80:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ac82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d103      	bne.n	800ac92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f003 fff2 	bl	800ec74 <tcp_output>
 800ac90:	e00d      	b.n	800acae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ac92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9a:	d108      	bne.n	800acae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	8b5b      	ldrh	r3, [r3, #26]
 800aca0:	f043 0308 	orr.w	r3, r3, #8
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	e001      	b.n	800acb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800acae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	08014e40 	.word	0x08014e40
 800acc0:	08014ef0 	.word	0x08014ef0
 800acc4:	08014e84 	.word	0x08014e84

0800acc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d109      	bne.n	800acea <tcp_close+0x22>
 800acd6:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <tcp_close+0x4c>)
 800acd8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800acdc:	490e      	ldr	r1, [pc, #56]	; (800ad18 <tcp_close+0x50>)
 800acde:	480f      	ldr	r0, [pc, #60]	; (800ad1c <tcp_close+0x54>)
 800ace0:	f008 fb56 	bl	8013390 <iprintf>
 800ace4:	f06f 030f 	mvn.w	r3, #15
 800ace8:	e00f      	b.n	800ad0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	7d1b      	ldrb	r3, [r3, #20]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d006      	beq.n	800ad00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8b5b      	ldrh	r3, [r3, #26]
 800acf6:	f043 0310 	orr.w	r3, r3, #16
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad00:	2101      	movs	r1, #1
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fe94 	bl	800aa30 <tcp_close_shutdown>
 800ad08:	4603      	mov	r3, r0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	08014e40 	.word	0x08014e40
 800ad18:	08014f50 	.word	0x08014f50
 800ad1c:	08014e84 	.word	0x08014e84

0800ad20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08e      	sub	sp, #56	; 0x38
 800ad24:	af04      	add	r7, sp, #16
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d107      	bne.n	800ad40 <tcp_abandon+0x20>
 800ad30:	4b52      	ldr	r3, [pc, #328]	; (800ae7c <tcp_abandon+0x15c>)
 800ad32:	f240 223d 	movw	r2, #573	; 0x23d
 800ad36:	4952      	ldr	r1, [pc, #328]	; (800ae80 <tcp_abandon+0x160>)
 800ad38:	4852      	ldr	r0, [pc, #328]	; (800ae84 <tcp_abandon+0x164>)
 800ad3a:	f008 fb29 	bl	8013390 <iprintf>
 800ad3e:	e099      	b.n	800ae74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7d1b      	ldrb	r3, [r3, #20]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d106      	bne.n	800ad56 <tcp_abandon+0x36>
 800ad48:	4b4c      	ldr	r3, [pc, #304]	; (800ae7c <tcp_abandon+0x15c>)
 800ad4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ad4e:	494e      	ldr	r1, [pc, #312]	; (800ae88 <tcp_abandon+0x168>)
 800ad50:	484c      	ldr	r0, [pc, #304]	; (800ae84 <tcp_abandon+0x164>)
 800ad52:	f008 fb1d 	bl	8013390 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	7d1b      	ldrb	r3, [r3, #20]
 800ad5a:	2b0a      	cmp	r3, #10
 800ad5c:	d107      	bne.n	800ad6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	484a      	ldr	r0, [pc, #296]	; (800ae8c <tcp_abandon+0x16c>)
 800ad62:	f000 ffc3 	bl	800bcec <tcp_pcb_remove>
    tcp_free(pcb);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fdb0 	bl	800a8cc <tcp_free>
 800ad6c:	e082      	b.n	800ae74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7d1b      	ldrb	r3, [r3, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d126      	bne.n	800ade6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	8adb      	ldrh	r3, [r3, #22]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d02e      	beq.n	800adfe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ada0:	4b3b      	ldr	r3, [pc, #236]	; (800ae90 <tcp_abandon+0x170>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d105      	bne.n	800adb6 <tcp_abandon+0x96>
 800adaa:	4b39      	ldr	r3, [pc, #228]	; (800ae90 <tcp_abandon+0x170>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	4a37      	ldr	r2, [pc, #220]	; (800ae90 <tcp_abandon+0x170>)
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	e013      	b.n	800adde <tcp_abandon+0xbe>
 800adb6:	4b36      	ldr	r3, [pc, #216]	; (800ae90 <tcp_abandon+0x170>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e00c      	b.n	800add8 <tcp_abandon+0xb8>
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d104      	bne.n	800add2 <tcp_abandon+0xb2>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	60da      	str	r2, [r3, #12]
 800add0:	e005      	b.n	800adde <tcp_abandon+0xbe>
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1ef      	bne.n	800adbe <tcp_abandon+0x9e>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	60da      	str	r2, [r3, #12]
 800ade4:	e00b      	b.n	800adfe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8adb      	ldrh	r3, [r3, #22]
 800adee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800adf0:	6879      	ldr	r1, [r7, #4]
 800adf2:	4828      	ldr	r0, [pc, #160]	; (800ae94 <tcp_abandon+0x174>)
 800adf4:	f000 ff7a 	bl	800bcec <tcp_pcb_remove>
 800adf8:	4b27      	ldr	r3, [pc, #156]	; (800ae98 <tcp_abandon+0x178>)
 800adfa:	2201      	movs	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fd1c 	bl	800b848 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 fd13 	bl	800b848 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fd0a 	bl	800b848 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00e      	beq.n	800ae58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	8b12      	ldrh	r2, [r2, #24]
 800ae44:	9202      	str	r2, [sp, #8]
 800ae46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae48:	9201      	str	r2, [sp, #4]
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	69b9      	ldr	r1, [r7, #24]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f004 fcc2 	bl	800f7dc <tcp_rst>
    }
    last_state = pcb->state;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7d1b      	ldrb	r3, [r3, #20]
 800ae5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fd34 	bl	800a8cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d004      	beq.n	800ae74 <tcp_abandon+0x154>
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f06f 010c 	mvn.w	r1, #12
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	4798      	blx	r3
  }
}
 800ae74:	3728      	adds	r7, #40	; 0x28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	08014e40 	.word	0x08014e40
 800ae80:	08014f84 	.word	0x08014f84
 800ae84:	08014e84 	.word	0x08014e84
 800ae88:	08014fa0 	.word	0x08014fa0
 800ae8c:	2000c958 	.word	0x2000c958
 800ae90:	2000c94c 	.word	0x2000c94c
 800ae94:	2000c954 	.word	0x2000c954
 800ae98:	2000c95c 	.word	0x2000c95c

0800ae9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aea4:	2101      	movs	r1, #1
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff ff3a 	bl	800ad20 <tcp_abandon>
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <tcp_update_rcv_ann_wnd+0x1c>
 800aec2:	4b25      	ldr	r3, [pc, #148]	; (800af58 <tcp_update_rcv_ann_wnd+0xa4>)
 800aec4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800aec8:	4924      	ldr	r1, [pc, #144]	; (800af5c <tcp_update_rcv_ann_wnd+0xa8>)
 800aeca:	4825      	ldr	r0, [pc, #148]	; (800af60 <tcp_update_rcv_ann_wnd+0xac>)
 800aecc:	f008 fa60 	bl	8013390 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aed8:	4413      	add	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800aee4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800aee8:	bf28      	it	cs
 800aeea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800aeee:	b292      	uxth	r2, r2
 800aef0:	4413      	add	r3, r2
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	db08      	blt.n	800af0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	e020      	b.n	800af4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	dd03      	ble.n	800af22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af20:	e014      	b.n	800af4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af34:	d306      	bcc.n	800af44 <tcp_update_rcv_ann_wnd+0x90>
 800af36:	4b08      	ldr	r3, [pc, #32]	; (800af58 <tcp_update_rcv_ann_wnd+0xa4>)
 800af38:	f240 32b6 	movw	r2, #950	; 0x3b6
 800af3c:	4909      	ldr	r1, [pc, #36]	; (800af64 <tcp_update_rcv_ann_wnd+0xb0>)
 800af3e:	4808      	ldr	r0, [pc, #32]	; (800af60 <tcp_update_rcv_ann_wnd+0xac>)
 800af40:	f008 fa26 	bl	8013390 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800af4c:	2300      	movs	r3, #0
  }
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	08014e40 	.word	0x08014e40
 800af5c:	0801509c 	.word	0x0801509c
 800af60:	08014e84 	.word	0x08014e84
 800af64:	080150c0 	.word	0x080150c0

0800af68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d107      	bne.n	800af8a <tcp_recved+0x22>
 800af7a:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <tcp_recved+0x90>)
 800af7c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800af80:	491e      	ldr	r1, [pc, #120]	; (800affc <tcp_recved+0x94>)
 800af82:	481f      	ldr	r0, [pc, #124]	; (800b000 <tcp_recved+0x98>)
 800af84:	f008 fa04 	bl	8013390 <iprintf>
 800af88:	e032      	b.n	800aff0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7d1b      	ldrb	r3, [r3, #20]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d106      	bne.n	800afa0 <tcp_recved+0x38>
 800af92:	4b19      	ldr	r3, [pc, #100]	; (800aff8 <tcp_recved+0x90>)
 800af94:	f240 32d2 	movw	r2, #978	; 0x3d2
 800af98:	491a      	ldr	r1, [pc, #104]	; (800b004 <tcp_recved+0x9c>)
 800af9a:	4819      	ldr	r0, [pc, #100]	; (800b000 <tcp_recved+0x98>)
 800af9c:	f008 f9f8 	bl	8013390 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afa4:	887b      	ldrh	r3, [r7, #2]
 800afa6:	4413      	add	r3, r2
 800afa8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800afaa:	89fb      	ldrh	r3, [r7, #14]
 800afac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800afb0:	d804      	bhi.n	800afbc <tcp_recved+0x54>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb6:	89fa      	ldrh	r2, [r7, #14]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d204      	bcs.n	800afc6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800afc2:	851a      	strh	r2, [r3, #40]	; 0x28
 800afc4:	e002      	b.n	800afcc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	89fa      	ldrh	r2, [r7, #14]
 800afca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ff71 	bl	800aeb4 <tcp_update_rcv_ann_wnd>
 800afd2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800afda:	d309      	bcc.n	800aff0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	8b5b      	ldrh	r3, [r3, #26]
 800afe0:	f043 0302 	orr.w	r3, r3, #2
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f003 fe42 	bl	800ec74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	08014e40 	.word	0x08014e40
 800affc:	080150dc 	.word	0x080150dc
 800b000:	08014e84 	.word	0x08014e84
 800b004:	080150f4 	.word	0x080150f4

0800b008 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b008:	b5b0      	push	{r4, r5, r7, lr}
 800b00a:	b090      	sub	sp, #64	; 0x40
 800b00c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b014:	4b94      	ldr	r3, [pc, #592]	; (800b268 <tcp_slowtmr+0x260>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	4a93      	ldr	r2, [pc, #588]	; (800b268 <tcp_slowtmr+0x260>)
 800b01c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b01e:	4b93      	ldr	r3, [pc, #588]	; (800b26c <tcp_slowtmr+0x264>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	3301      	adds	r3, #1
 800b024:	b2da      	uxtb	r2, r3
 800b026:	4b91      	ldr	r3, [pc, #580]	; (800b26c <tcp_slowtmr+0x264>)
 800b028:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b02e:	4b90      	ldr	r3, [pc, #576]	; (800b270 <tcp_slowtmr+0x268>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b034:	e29f      	b.n	800b576 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	7d1b      	ldrb	r3, [r3, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <tcp_slowtmr+0x44>
 800b03e:	4b8d      	ldr	r3, [pc, #564]	; (800b274 <tcp_slowtmr+0x26c>)
 800b040:	f240 42be 	movw	r2, #1214	; 0x4be
 800b044:	498c      	ldr	r1, [pc, #560]	; (800b278 <tcp_slowtmr+0x270>)
 800b046:	488d      	ldr	r0, [pc, #564]	; (800b27c <tcp_slowtmr+0x274>)
 800b048:	f008 f9a2 	bl	8013390 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	7d1b      	ldrb	r3, [r3, #20]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d106      	bne.n	800b062 <tcp_slowtmr+0x5a>
 800b054:	4b87      	ldr	r3, [pc, #540]	; (800b274 <tcp_slowtmr+0x26c>)
 800b056:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b05a:	4989      	ldr	r1, [pc, #548]	; (800b280 <tcp_slowtmr+0x278>)
 800b05c:	4887      	ldr	r0, [pc, #540]	; (800b27c <tcp_slowtmr+0x274>)
 800b05e:	f008 f997 	bl	8013390 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	7d1b      	ldrb	r3, [r3, #20]
 800b066:	2b0a      	cmp	r3, #10
 800b068:	d106      	bne.n	800b078 <tcp_slowtmr+0x70>
 800b06a:	4b82      	ldr	r3, [pc, #520]	; (800b274 <tcp_slowtmr+0x26c>)
 800b06c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b070:	4984      	ldr	r1, [pc, #528]	; (800b284 <tcp_slowtmr+0x27c>)
 800b072:	4882      	ldr	r0, [pc, #520]	; (800b27c <tcp_slowtmr+0x274>)
 800b074:	f008 f98c 	bl	8013390 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	7f9a      	ldrb	r2, [r3, #30]
 800b07c:	4b7b      	ldr	r3, [pc, #492]	; (800b26c <tcp_slowtmr+0x264>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d105      	bne.n	800b090 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b08e:	e272      	b.n	800b576 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b090:	4b76      	ldr	r3, [pc, #472]	; (800b26c <tcp_slowtmr+0x264>)
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	7d1b      	ldrb	r3, [r3, #20]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d10a      	bne.n	800b0c2 <tcp_slowtmr+0xba>
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	d905      	bls.n	800b0c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0c0:	e11e      	b.n	800b300 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0c8:	2b0b      	cmp	r3, #11
 800b0ca:	d905      	bls.n	800b0d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0d6:	e113      	b.n	800b300 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d075      	beq.n	800b1ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <tcp_slowtmr+0xf0>
 800b0ea:	4b62      	ldr	r3, [pc, #392]	; (800b274 <tcp_slowtmr+0x26c>)
 800b0ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b0f0:	4965      	ldr	r1, [pc, #404]	; (800b288 <tcp_slowtmr+0x280>)
 800b0f2:	4862      	ldr	r0, [pc, #392]	; (800b27c <tcp_slowtmr+0x274>)
 800b0f4:	f008 f94c 	bl	8013390 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <tcp_slowtmr+0x106>
 800b100:	4b5c      	ldr	r3, [pc, #368]	; (800b274 <tcp_slowtmr+0x26c>)
 800b102:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b106:	4961      	ldr	r1, [pc, #388]	; (800b28c <tcp_slowtmr+0x284>)
 800b108:	485c      	ldr	r0, [pc, #368]	; (800b27c <tcp_slowtmr+0x274>)
 800b10a:	f008 f941 	bl	8013390 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b114:	2b0b      	cmp	r3, #11
 800b116:	d905      	bls.n	800b124 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b11c:	3301      	adds	r3, #1
 800b11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b122:	e0ed      	b.n	800b300 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b12a:	3b01      	subs	r3, #1
 800b12c:	4a58      	ldr	r2, [pc, #352]	; (800b290 <tcp_slowtmr+0x288>)
 800b12e:	5cd3      	ldrb	r3, [r2, r3]
 800b130:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b138:	7c7a      	ldrb	r2, [r7, #17]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d907      	bls.n	800b14e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b144:	3301      	adds	r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b150:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b154:	7c7a      	ldrb	r2, [r7, #17]
 800b156:	429a      	cmp	r2, r3
 800b158:	f200 80d2 	bhi.w	800b300 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b15c:	2301      	movs	r3, #1
 800b15e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b166:	2b00      	cmp	r3, #0
 800b168:	d108      	bne.n	800b17c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b16c:	f004 fc2a 	bl	800f9c4 <tcp_zero_window_probe>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d014      	beq.n	800b1a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b176:	2300      	movs	r3, #0
 800b178:	623b      	str	r3, [r7, #32]
 800b17a:	e011      	b.n	800b1a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b182:	4619      	mov	r1, r3
 800b184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b186:	f003 faef 	bl	800e768 <tcp_split_unsent_seg>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d107      	bne.n	800b1a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b192:	f003 fd6f 	bl	800ec74 <tcp_output>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80ac 	beq.w	800b300 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1b6:	2b06      	cmp	r3, #6
 800b1b8:	f200 80a2 	bhi.w	800b300 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b1cc:	e098      	b.n	800b300 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	db0f      	blt.n	800b1f8 <tcp_slowtmr+0x1f0>
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d008      	beq.n	800b1f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	b21a      	sxth	r2, r3
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b204:	429a      	cmp	r2, r3
 800b206:	db7b      	blt.n	800b300 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b20a:	f004 f825 	bl	800f258 <tcp_rexmit_rto_prepare>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d007      	beq.n	800b224 <tcp_slowtmr+0x21c>
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d171      	bne.n	800b300 <tcp_slowtmr+0x2f8>
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d06d      	beq.n	800b300 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	7d1b      	ldrb	r3, [r3, #20]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d03a      	beq.n	800b2a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b232:	2b0c      	cmp	r3, #12
 800b234:	bf28      	it	cs
 800b236:	230c      	movcs	r3, #12
 800b238:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b240:	10db      	asrs	r3, r3, #3
 800b242:	b21b      	sxth	r3, r3
 800b244:	461a      	mov	r2, r3
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b24c:	4413      	add	r3, r2
 800b24e:	7efa      	ldrb	r2, [r7, #27]
 800b250:	4910      	ldr	r1, [pc, #64]	; (800b294 <tcp_slowtmr+0x28c>)
 800b252:	5c8a      	ldrb	r2, [r1, r2]
 800b254:	4093      	lsls	r3, r2
 800b256:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b25e:	4293      	cmp	r3, r2
 800b260:	dc1a      	bgt.n	800b298 <tcp_slowtmr+0x290>
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	b21a      	sxth	r2, r3
 800b266:	e019      	b.n	800b29c <tcp_slowtmr+0x294>
 800b268:	2000c948 	.word	0x2000c948
 800b26c:	2000c95e 	.word	0x2000c95e
 800b270:	2000c954 	.word	0x2000c954
 800b274:	08014e40 	.word	0x08014e40
 800b278:	08015184 	.word	0x08015184
 800b27c:	08014e84 	.word	0x08014e84
 800b280:	080151b0 	.word	0x080151b0
 800b284:	080151dc 	.word	0x080151dc
 800b288:	0801520c 	.word	0x0801520c
 800b28c:	08015240 	.word	0x08015240
 800b290:	08016e60 	.word	0x08016e60
 800b294:	08016e50 	.word	0x08016e50
 800b298:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	bf28      	it	cs
 800b2b8:	4613      	movcs	r3, r2
 800b2ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b2bc:	8a7b      	ldrh	r3, [r7, #18]
 800b2be:	085b      	lsrs	r3, r3, #1
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d206      	bcs.n	800b2e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b2fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2fc:	f004 f81c 	bl	800f338 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	7d1b      	ldrb	r3, [r3, #20]
 800b304:	2b06      	cmp	r3, #6
 800b306:	d111      	bne.n	800b32c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	8b5b      	ldrh	r3, [r3, #26]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b314:	4b9d      	ldr	r3, [pc, #628]	; (800b58c <tcp_slowtmr+0x584>)
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b28      	cmp	r3, #40	; 0x28
 800b320:	d904      	bls.n	800b32c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b326:	3301      	adds	r3, #1
 800b328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	7a5b      	ldrb	r3, [r3, #9]
 800b330:	f003 0308 	and.w	r3, r3, #8
 800b334:	2b00      	cmp	r3, #0
 800b336:	d04c      	beq.n	800b3d2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d003      	beq.n	800b348 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b344:	2b07      	cmp	r3, #7
 800b346:	d144      	bne.n	800b3d2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b348:	4b90      	ldr	r3, [pc, #576]	; (800b58c <tcp_slowtmr+0x584>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b358:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b35c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b360:	498b      	ldr	r1, [pc, #556]	; (800b590 <tcp_slowtmr+0x588>)
 800b362:	fba1 1303 	umull	r1, r3, r1, r3
 800b366:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b368:	429a      	cmp	r2, r3
 800b36a:	d90a      	bls.n	800b382 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b370:	3301      	adds	r3, #1
 800b372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b376:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b37a:	3301      	adds	r3, #1
 800b37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b380:	e027      	b.n	800b3d2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b382:	4b82      	ldr	r3, [pc, #520]	; (800b58c <tcp_slowtmr+0x584>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b398:	4618      	mov	r0, r3
 800b39a:	4b7e      	ldr	r3, [pc, #504]	; (800b594 <tcp_slowtmr+0x58c>)
 800b39c:	fb00 f303 	mul.w	r3, r0, r3
 800b3a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b3a2:	497b      	ldr	r1, [pc, #492]	; (800b590 <tcp_slowtmr+0x588>)
 800b3a4:	fba1 1303 	umull	r1, r3, r1, r3
 800b3a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d911      	bls.n	800b3d2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b3ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3b0:	f004 fac8 	bl	800f944 <tcp_keepalive>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b3ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d107      	bne.n	800b3d2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d011      	beq.n	800b3fe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b3da:	4b6c      	ldr	r3, [pc, #432]	; (800b58c <tcp_slowtmr+0x584>)
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	1ad2      	subs	r2, r2, r3
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	440b      	add	r3, r1
 800b3f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d302      	bcc.n	800b3fe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3fa:	f000 fddb 	bl	800bfb4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d10b      	bne.n	800b41e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b406:	4b61      	ldr	r3, [pc, #388]	; (800b58c <tcp_slowtmr+0x584>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	2b28      	cmp	r3, #40	; 0x28
 800b412:	d904      	bls.n	800b41e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b418:	3301      	adds	r3, #1
 800b41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	7d1b      	ldrb	r3, [r3, #20]
 800b422:	2b09      	cmp	r3, #9
 800b424:	d10b      	bne.n	800b43e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b426:	4b59      	ldr	r3, [pc, #356]	; (800b58c <tcp_slowtmr+0x584>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2bf0      	cmp	r3, #240	; 0xf0
 800b432:	d904      	bls.n	800b43e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b438:	3301      	adds	r3, #1
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b43e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b442:	2b00      	cmp	r3, #0
 800b444:	d060      	beq.n	800b508 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b44e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b450:	f000 fbfc 	bl	800bc4c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d010      	beq.n	800b47c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b45a:	4b4f      	ldr	r3, [pc, #316]	; (800b598 <tcp_slowtmr+0x590>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b460:	429a      	cmp	r2, r3
 800b462:	d106      	bne.n	800b472 <tcp_slowtmr+0x46a>
 800b464:	4b4d      	ldr	r3, [pc, #308]	; (800b59c <tcp_slowtmr+0x594>)
 800b466:	f240 526d 	movw	r2, #1389	; 0x56d
 800b46a:	494d      	ldr	r1, [pc, #308]	; (800b5a0 <tcp_slowtmr+0x598>)
 800b46c:	484d      	ldr	r0, [pc, #308]	; (800b5a4 <tcp_slowtmr+0x59c>)
 800b46e:	f007 ff8f 	bl	8013390 <iprintf>
        prev->next = pcb->next;
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	60da      	str	r2, [r3, #12]
 800b47a:	e00f      	b.n	800b49c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b47c:	4b46      	ldr	r3, [pc, #280]	; (800b598 <tcp_slowtmr+0x590>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b482:	429a      	cmp	r2, r3
 800b484:	d006      	beq.n	800b494 <tcp_slowtmr+0x48c>
 800b486:	4b45      	ldr	r3, [pc, #276]	; (800b59c <tcp_slowtmr+0x594>)
 800b488:	f240 5271 	movw	r2, #1393	; 0x571
 800b48c:	4946      	ldr	r1, [pc, #280]	; (800b5a8 <tcp_slowtmr+0x5a0>)
 800b48e:	4845      	ldr	r0, [pc, #276]	; (800b5a4 <tcp_slowtmr+0x59c>)
 800b490:	f007 ff7e 	bl	8013390 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	4a3f      	ldr	r2, [pc, #252]	; (800b598 <tcp_slowtmr+0x590>)
 800b49a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b49c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d013      	beq.n	800b4cc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b4ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4b4:	8ad2      	ldrh	r2, [r2, #22]
 800b4b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4b8:	8b09      	ldrh	r1, [r1, #24]
 800b4ba:	9102      	str	r1, [sp, #8]
 800b4bc:	9201      	str	r2, [sp, #4]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4c8:	f004 f988 	bl	800f7dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
 800b4d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b4e2:	6838      	ldr	r0, [r7, #0]
 800b4e4:	f7ff f9f2 	bl	800a8cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b4e8:	4b30      	ldr	r3, [pc, #192]	; (800b5ac <tcp_slowtmr+0x5a4>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <tcp_slowtmr+0x4f6>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f06f 010c 	mvn.w	r1, #12
 800b4fa:	68b8      	ldr	r0, [r7, #8]
 800b4fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b4fe:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <tcp_slowtmr+0x5a4>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d037      	beq.n	800b576 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b506:	e590      	b.n	800b02a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	7f1b      	ldrb	r3, [r3, #28]
 800b516:	3301      	adds	r3, #1
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	7f1a      	ldrb	r2, [r3, #28]
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	7f5b      	ldrb	r3, [r3, #29]
 800b526:	429a      	cmp	r2, r3
 800b528:	d325      	bcc.n	800b576 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	2200      	movs	r2, #0
 800b52e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b530:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <tcp_slowtmr+0x5a4>)
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <tcp_slowtmr+0x550>
 800b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b548:	6912      	ldr	r2, [r2, #16]
 800b54a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	4603      	mov	r3, r0
 800b552:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b556:	e002      	b.n	800b55e <tcp_slowtmr+0x556>
 800b558:	2300      	movs	r3, #0
 800b55a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <tcp_slowtmr+0x5a4>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d000      	beq.n	800b568 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b566:	e560      	b.n	800b02a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b568:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b572:	f003 fb7f 	bl	800ec74 <tcp_output>
  while (pcb != NULL) {
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f ad5c 	bne.w	800b036 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b582:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <tcp_slowtmr+0x5a8>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b588:	e067      	b.n	800b65a <tcp_slowtmr+0x652>
 800b58a:	bf00      	nop
 800b58c:	2000c948 	.word	0x2000c948
 800b590:	10624dd3 	.word	0x10624dd3
 800b594:	000124f8 	.word	0x000124f8
 800b598:	2000c954 	.word	0x2000c954
 800b59c:	08014e40 	.word	0x08014e40
 800b5a0:	08015278 	.word	0x08015278
 800b5a4:	08014e84 	.word	0x08014e84
 800b5a8:	080152a4 	.word	0x080152a4
 800b5ac:	2000c95c 	.word	0x2000c95c
 800b5b0:	2000c958 	.word	0x2000c958
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	7d1b      	ldrb	r3, [r3, #20]
 800b5b8:	2b0a      	cmp	r3, #10
 800b5ba:	d006      	beq.n	800b5ca <tcp_slowtmr+0x5c2>
 800b5bc:	4b2b      	ldr	r3, [pc, #172]	; (800b66c <tcp_slowtmr+0x664>)
 800b5be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b5c2:	492b      	ldr	r1, [pc, #172]	; (800b670 <tcp_slowtmr+0x668>)
 800b5c4:	482b      	ldr	r0, [pc, #172]	; (800b674 <tcp_slowtmr+0x66c>)
 800b5c6:	f007 fee3 	bl	8013390 <iprintf>
    pcb_remove = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b5d0:	4b29      	ldr	r3, [pc, #164]	; (800b678 <tcp_slowtmr+0x670>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	2bf0      	cmp	r3, #240	; 0xf0
 800b5dc:	d904      	bls.n	800b5e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b5de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d02f      	beq.n	800b650 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f2:	f000 fb2b 	bl	800bc4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d010      	beq.n	800b61e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b5fc:	4b1f      	ldr	r3, [pc, #124]	; (800b67c <tcp_slowtmr+0x674>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b602:	429a      	cmp	r2, r3
 800b604:	d106      	bne.n	800b614 <tcp_slowtmr+0x60c>
 800b606:	4b19      	ldr	r3, [pc, #100]	; (800b66c <tcp_slowtmr+0x664>)
 800b608:	f240 52af 	movw	r2, #1455	; 0x5af
 800b60c:	491c      	ldr	r1, [pc, #112]	; (800b680 <tcp_slowtmr+0x678>)
 800b60e:	4819      	ldr	r0, [pc, #100]	; (800b674 <tcp_slowtmr+0x66c>)
 800b610:	f007 febe 	bl	8013390 <iprintf>
        prev->next = pcb->next;
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	60da      	str	r2, [r3, #12]
 800b61c:	e00f      	b.n	800b63e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b61e:	4b17      	ldr	r3, [pc, #92]	; (800b67c <tcp_slowtmr+0x674>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b624:	429a      	cmp	r2, r3
 800b626:	d006      	beq.n	800b636 <tcp_slowtmr+0x62e>
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <tcp_slowtmr+0x664>)
 800b62a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b62e:	4915      	ldr	r1, [pc, #84]	; (800b684 <tcp_slowtmr+0x67c>)
 800b630:	4810      	ldr	r0, [pc, #64]	; (800b674 <tcp_slowtmr+0x66c>)
 800b632:	f007 fead 	bl	8013390 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	4a10      	ldr	r2, [pc, #64]	; (800b67c <tcp_slowtmr+0x674>)
 800b63c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b648:	69f8      	ldr	r0, [r7, #28]
 800b64a:	f7ff f93f 	bl	800a8cc <tcp_free>
 800b64e:	e004      	b.n	800b65a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1a9      	bne.n	800b5b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	3730      	adds	r7, #48	; 0x30
 800b666:	46bd      	mov	sp, r7
 800b668:	bdb0      	pop	{r4, r5, r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08014e40 	.word	0x08014e40
 800b670:	080152d0 	.word	0x080152d0
 800b674:	08014e84 	.word	0x08014e84
 800b678:	2000c948 	.word	0x2000c948
 800b67c:	2000c958 	.word	0x2000c958
 800b680:	08015300 	.word	0x08015300
 800b684:	08015328 	.word	0x08015328

0800b688 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b68e:	4b2d      	ldr	r3, [pc, #180]	; (800b744 <tcp_fasttmr+0xbc>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <tcp_fasttmr+0xbc>)
 800b698:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b69a:	4b2b      	ldr	r3, [pc, #172]	; (800b748 <tcp_fasttmr+0xc0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b6a0:	e048      	b.n	800b734 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	7f9a      	ldrb	r2, [r3, #30]
 800b6a6:	4b27      	ldr	r3, [pc, #156]	; (800b744 <tcp_fasttmr+0xbc>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d03f      	beq.n	800b72e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b6ae:	4b25      	ldr	r3, [pc, #148]	; (800b744 <tcp_fasttmr+0xbc>)
 800b6b0:	781a      	ldrb	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d010      	beq.n	800b6e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8b5b      	ldrh	r3, [r3, #26]
 800b6c6:	f043 0302 	orr.w	r3, r3, #2
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f003 facf 	bl	800ec74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	8b5b      	ldrh	r3, [r3, #26]
 800b6da:	f023 0303 	bic.w	r3, r3, #3
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	8b5b      	ldrh	r3, [r3, #26]
 800b6e8:	f003 0308 	and.w	r3, r3, #8
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d009      	beq.n	800b704 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f023 0308 	bic.w	r3, r3, #8
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fa78 	bl	800abf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b712:	4b0e      	ldr	r3, [pc, #56]	; (800b74c <tcp_fasttmr+0xc4>)
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f819 	bl	800b750 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <tcp_fasttmr+0xc4>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d000      	beq.n	800b728 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b726:	e7b8      	b.n	800b69a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	607b      	str	r3, [r7, #4]
 800b72c:	e002      	b.n	800b734 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1b3      	bne.n	800b6a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	2000c95e 	.word	0x2000c95e
 800b748:	2000c954 	.word	0x2000c954
 800b74c:	2000c95c 	.word	0x2000c95c

0800b750 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b750:	b590      	push	{r4, r7, lr}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <tcp_process_refused_data+0x22>
 800b75e:	4b37      	ldr	r3, [pc, #220]	; (800b83c <tcp_process_refused_data+0xec>)
 800b760:	f240 6209 	movw	r2, #1545	; 0x609
 800b764:	4936      	ldr	r1, [pc, #216]	; (800b840 <tcp_process_refused_data+0xf0>)
 800b766:	4837      	ldr	r0, [pc, #220]	; (800b844 <tcp_process_refused_data+0xf4>)
 800b768:	f007 fe12 	bl	8013390 <iprintf>
 800b76c:	f06f 030f 	mvn.w	r3, #15
 800b770:	e060      	b.n	800b834 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b776:	7b5b      	ldrb	r3, [r3, #13]
 800b778:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b77e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00b      	beq.n	800b7a8 <tcp_process_refused_data+0x58>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6918      	ldr	r0, [r3, #16]
 800b79a:	2300      	movs	r3, #0
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	47a0      	blx	r4
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]
 800b7a6:	e007      	b.n	800b7b8 <tcp_process_refused_data+0x68>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	f000 f8a4 	bl	800b8fc <tcp_recv_null>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b7b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d12a      	bne.n	800b816 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d033      	beq.n	800b832 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b7d2:	d005      	beq.n	800b7e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d8:	3301      	adds	r3, #1
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00b      	beq.n	800b802 <tcp_process_refused_data+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6918      	ldr	r0, [r3, #16]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	47a0      	blx	r4
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
 800b800:	e001      	b.n	800b806 <tcp_process_refused_data+0xb6>
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b80a:	f113 0f0d 	cmn.w	r3, #13
 800b80e:	d110      	bne.n	800b832 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b810:	f06f 030c 	mvn.w	r3, #12
 800b814:	e00e      	b.n	800b834 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81a:	f113 0f0d 	cmn.w	r3, #13
 800b81e:	d102      	bne.n	800b826 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b820:	f06f 030c 	mvn.w	r3, #12
 800b824:	e006      	b.n	800b834 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b82c:	f06f 0304 	mvn.w	r3, #4
 800b830:	e000      	b.n	800b834 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd90      	pop	{r4, r7, pc}
 800b83c:	08014e40 	.word	0x08014e40
 800b840:	08015350 	.word	0x08015350
 800b844:	08014e84 	.word	0x08014e84

0800b848 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b850:	e007      	b.n	800b862 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f80a 	bl	800b872 <tcp_seg_free>
    seg = next;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1f4      	bne.n	800b852 <tcp_segs_free+0xa>
  }
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00c      	beq.n	800b89a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fd61 	bl	800a354 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	2003      	movs	r0, #3
 800b896:	f7fd feb9 	bl	800960c <memp_free>
  }
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <tcp_seg_copy+0x1c>
 800b8b2:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <tcp_seg_copy+0x4c>)
 800b8b4:	f240 6282 	movw	r2, #1666	; 0x682
 800b8b8:	490e      	ldr	r1, [pc, #56]	; (800b8f4 <tcp_seg_copy+0x50>)
 800b8ba:	480f      	ldr	r0, [pc, #60]	; (800b8f8 <tcp_seg_copy+0x54>)
 800b8bc:	f007 fd68 	bl	8013390 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b8c0:	2003      	movs	r0, #3
 800b8c2:	f7fd fe2d 	bl	8009520 <memp_malloc>
 800b8c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <tcp_seg_copy+0x2e>
    return NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e00a      	b.n	800b8e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b8d2:	2210      	movs	r2, #16
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f007 fcaf 	bl	801323a <memcpy>
  pbuf_ref(cseg->p);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fddd 	bl	800a4a0 <pbuf_ref>
  return cseg;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	08014e40 	.word	0x08014e40
 800b8f4:	08015394 	.word	0x08015394
 800b8f8:	08014e84 	.word	0x08014e84

0800b8fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <tcp_recv_null+0x28>
 800b910:	4b12      	ldr	r3, [pc, #72]	; (800b95c <tcp_recv_null+0x60>)
 800b912:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b916:	4912      	ldr	r1, [pc, #72]	; (800b960 <tcp_recv_null+0x64>)
 800b918:	4812      	ldr	r0, [pc, #72]	; (800b964 <tcp_recv_null+0x68>)
 800b91a:	f007 fd39 	bl	8013390 <iprintf>
 800b91e:	f06f 030f 	mvn.w	r3, #15
 800b922:	e016      	b.n	800b952 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	891b      	ldrh	r3, [r3, #8]
 800b92e:	4619      	mov	r1, r3
 800b930:	68b8      	ldr	r0, [r7, #8]
 800b932:	f7ff fb19 	bl	800af68 <tcp_recved>
    pbuf_free(p);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7fe fd0c 	bl	800a354 <pbuf_free>
 800b93c:	e008      	b.n	800b950 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b93e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b946:	68b8      	ldr	r0, [r7, #8]
 800b948:	f7ff f9be 	bl	800acc8 <tcp_close>
 800b94c:	4603      	mov	r3, r0
 800b94e:	e000      	b.n	800b952 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	08014e40 	.word	0x08014e40
 800b960:	080153b0 	.word	0x080153b0
 800b964:	08014e84 	.word	0x08014e84

0800b968 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b976:	2b00      	cmp	r3, #0
 800b978:	db01      	blt.n	800b97e <tcp_kill_prio+0x16>
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	e000      	b.n	800b980 <tcp_kill_prio+0x18>
 800b97e:	237f      	movs	r3, #127	; 0x7f
 800b980:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b982:	7afb      	ldrb	r3, [r7, #11]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d034      	beq.n	800b9f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b996:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <tcp_kill_prio+0x94>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	e01f      	b.n	800b9de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	7d5b      	ldrb	r3, [r3, #21]
 800b9a2:	7afa      	ldrb	r2, [r7, #11]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d80c      	bhi.n	800b9c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b9ac:	7afa      	ldrb	r2, [r7, #11]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d112      	bne.n	800b9d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b9b2:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <tcp_kill_prio+0x98>)
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d80a      	bhi.n	800b9d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <tcp_kill_prio+0x98>)
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	7d5b      	ldrb	r3, [r3, #21]
 800b9d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1dc      	bne.n	800b99e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d004      	beq.n	800b9f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b9ea:	6938      	ldr	r0, [r7, #16]
 800b9ec:	f7ff fa56 	bl	800ae9c <tcp_abort>
 800b9f0:	e000      	b.n	800b9f4 <tcp_kill_prio+0x8c>
    return;
 800b9f2:	bf00      	nop
  }
}
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	2000c954 	.word	0x2000c954
 800ba00:	2000c948 	.word	0x2000c948

0800ba04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d009      	beq.n	800ba28 <tcp_kill_state+0x24>
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d006      	beq.n	800ba28 <tcp_kill_state+0x24>
 800ba1a:	4b1a      	ldr	r3, [pc, #104]	; (800ba84 <tcp_kill_state+0x80>)
 800ba1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ba20:	4919      	ldr	r1, [pc, #100]	; (800ba88 <tcp_kill_state+0x84>)
 800ba22:	481a      	ldr	r0, [pc, #104]	; (800ba8c <tcp_kill_state+0x88>)
 800ba24:	f007 fcb4 	bl	8013390 <iprintf>

  inactivity = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba30:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <tcp_kill_state+0x8c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e017      	b.n	800ba68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	7d1b      	ldrb	r3, [r3, #20]
 800ba3c:	79fa      	ldrb	r2, [r7, #7]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d10f      	bne.n	800ba62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba42:	4b14      	ldr	r3, [pc, #80]	; (800ba94 <tcp_kill_state+0x90>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d807      	bhi.n	800ba62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <tcp_kill_state+0x90>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e4      	bne.n	800ba38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ba74:	2100      	movs	r1, #0
 800ba76:	6938      	ldr	r0, [r7, #16]
 800ba78:	f7ff f952 	bl	800ad20 <tcp_abandon>
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	08014e40 	.word	0x08014e40
 800ba88:	080153cc 	.word	0x080153cc
 800ba8c:	08014e84 	.word	0x08014e84
 800ba90:	2000c954 	.word	0x2000c954
 800ba94:	2000c948 	.word	0x2000c948

0800ba98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800baa6:	4b12      	ldr	r3, [pc, #72]	; (800baf0 <tcp_kill_timewait+0x58>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e012      	b.n	800bad4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800baae:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <tcp_kill_timewait+0x5c>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	429a      	cmp	r2, r3
 800babc:	d807      	bhi.n	800bace <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800babe:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <tcp_kill_timewait+0x5c>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e9      	bne.n	800baae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bae0:	68b8      	ldr	r0, [r7, #8]
 800bae2:	f7ff f9db 	bl	800ae9c <tcp_abort>
  }
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	2000c958 	.word	0x2000c958
 800baf4:	2000c948 	.word	0x2000c948

0800baf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bafe:	4b10      	ldr	r3, [pc, #64]	; (800bb40 <tcp_handle_closepend+0x48>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb04:	e014      	b.n	800bb30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	8b5b      	ldrh	r3, [r3, #26]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d009      	beq.n	800bb2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	8b5b      	ldrh	r3, [r3, #26]
 800bb1c:	f023 0308 	bic.w	r3, r3, #8
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff f864 	bl	800abf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e7      	bne.n	800bb06 <tcp_handle_closepend+0xe>
  }
}
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	2000c954 	.word	0x2000c954

0800bb44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb4e:	2001      	movs	r0, #1
 800bb50:	f7fd fce6 	bl	8009520 <memp_malloc>
 800bb54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d126      	bne.n	800bbaa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bb5c:	f7ff ffcc 	bl	800baf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bb60:	f7ff ff9a 	bl	800ba98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb64:	2001      	movs	r0, #1
 800bb66:	f7fd fcdb 	bl	8009520 <memp_malloc>
 800bb6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d11b      	bne.n	800bbaa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bb72:	2009      	movs	r0, #9
 800bb74:	f7ff ff46 	bl	800ba04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb78:	2001      	movs	r0, #1
 800bb7a:	f7fd fcd1 	bl	8009520 <memp_malloc>
 800bb7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d111      	bne.n	800bbaa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bb86:	2008      	movs	r0, #8
 800bb88:	f7ff ff3c 	bl	800ba04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	f7fd fcc7 	bl	8009520 <memp_malloc>
 800bb92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d107      	bne.n	800bbaa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bb9a:	79fb      	ldrb	r3, [r7, #7]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff fee3 	bl	800b968 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bba2:	2001      	movs	r0, #1
 800bba4:	f7fd fcbc 	bl	8009520 <memp_malloc>
 800bba8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d03f      	beq.n	800bc30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bbb0:	229c      	movs	r2, #156	; 0x9c
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f007 fb4e 	bl	8013256 <memset>
    pcb->prio = prio;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	79fa      	ldrb	r2, [r7, #7]
 800bbbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bbc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bbd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	22ff      	movs	r2, #255	; 0xff
 800bbde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bbe6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2206      	movs	r2, #6
 800bbec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2206      	movs	r2, #6
 800bbf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bc06:	4b0d      	ldr	r3, [pc, #52]	; (800bc3c <tcp_alloc+0xf8>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <tcp_alloc+0xfc>)
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bc1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <tcp_alloc+0x100>)
 800bc24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4a07      	ldr	r2, [pc, #28]	; (800bc48 <tcp_alloc+0x104>)
 800bc2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bc30:	68fb      	ldr	r3, [r7, #12]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	2000c948 	.word	0x2000c948
 800bc40:	2000c95e 	.word	0x2000c95e
 800bc44:	0800b8fd 	.word	0x0800b8fd
 800bc48:	006ddd00 	.word	0x006ddd00

0800bc4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d107      	bne.n	800bc6a <tcp_pcb_purge+0x1e>
 800bc5a:	4b21      	ldr	r3, [pc, #132]	; (800bce0 <tcp_pcb_purge+0x94>)
 800bc5c:	f640 0251 	movw	r2, #2129	; 0x851
 800bc60:	4920      	ldr	r1, [pc, #128]	; (800bce4 <tcp_pcb_purge+0x98>)
 800bc62:	4821      	ldr	r0, [pc, #132]	; (800bce8 <tcp_pcb_purge+0x9c>)
 800bc64:	f007 fb94 	bl	8013390 <iprintf>
 800bc68:	e037      	b.n	800bcda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	7d1b      	ldrb	r3, [r3, #20]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d033      	beq.n	800bcda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bc76:	2b0a      	cmp	r3, #10
 800bc78:	d02f      	beq.n	800bcda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d02b      	beq.n	800bcda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d007      	beq.n	800bc9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fb60 	bl	800a354 <pbuf_free>
      pcb->refused_data = NULL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f986 	bl	800bfb4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fdc7 	bl	800b848 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fdc2 	bl	800b848 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	08014e40 	.word	0x08014e40
 800bce4:	0801548c 	.word	0x0801548c
 800bce8:	08014e84 	.word	0x08014e84

0800bcec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d106      	bne.n	800bd0a <tcp_pcb_remove+0x1e>
 800bcfc:	4b3e      	ldr	r3, [pc, #248]	; (800bdf8 <tcp_pcb_remove+0x10c>)
 800bcfe:	f640 0283 	movw	r2, #2179	; 0x883
 800bd02:	493e      	ldr	r1, [pc, #248]	; (800bdfc <tcp_pcb_remove+0x110>)
 800bd04:	483e      	ldr	r0, [pc, #248]	; (800be00 <tcp_pcb_remove+0x114>)
 800bd06:	f007 fb43 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d106      	bne.n	800bd1e <tcp_pcb_remove+0x32>
 800bd10:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <tcp_pcb_remove+0x10c>)
 800bd12:	f640 0284 	movw	r2, #2180	; 0x884
 800bd16:	493b      	ldr	r1, [pc, #236]	; (800be04 <tcp_pcb_remove+0x118>)
 800bd18:	4839      	ldr	r0, [pc, #228]	; (800be00 <tcp_pcb_remove+0x114>)
 800bd1a:	f007 fb39 	bl	8013390 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d105      	bne.n	800bd34 <tcp_pcb_remove+0x48>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	e013      	b.n	800bd5c <tcp_pcb_remove+0x70>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e00c      	b.n	800bd56 <tcp_pcb_remove+0x6a>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d104      	bne.n	800bd50 <tcp_pcb_remove+0x64>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	60da      	str	r2, [r3, #12]
 800bd4e:	e005      	b.n	800bd5c <tcp_pcb_remove+0x70>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1ef      	bne.n	800bd3c <tcp_pcb_remove+0x50>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bd62:	6838      	ldr	r0, [r7, #0]
 800bd64:	f7ff ff72 	bl	800bc4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	7d1b      	ldrb	r3, [r3, #20]
 800bd6c:	2b0a      	cmp	r3, #10
 800bd6e:	d013      	beq.n	800bd98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d00f      	beq.n	800bd98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	8b5b      	ldrh	r3, [r3, #26]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	8b5b      	ldrh	r3, [r3, #26]
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bd92:	6838      	ldr	r0, [r7, #0]
 800bd94:	f002 ff6e 	bl	800ec74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	7d1b      	ldrb	r3, [r3, #20]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d020      	beq.n	800bde2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d006      	beq.n	800bdb6 <tcp_pcb_remove+0xca>
 800bda8:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <tcp_pcb_remove+0x10c>)
 800bdaa:	f640 0293 	movw	r2, #2195	; 0x893
 800bdae:	4916      	ldr	r1, [pc, #88]	; (800be08 <tcp_pcb_remove+0x11c>)
 800bdb0:	4813      	ldr	r0, [pc, #76]	; (800be00 <tcp_pcb_remove+0x114>)
 800bdb2:	f007 faed 	bl	8013390 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d006      	beq.n	800bdcc <tcp_pcb_remove+0xe0>
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <tcp_pcb_remove+0x10c>)
 800bdc0:	f640 0294 	movw	r2, #2196	; 0x894
 800bdc4:	4911      	ldr	r1, [pc, #68]	; (800be0c <tcp_pcb_remove+0x120>)
 800bdc6:	480e      	ldr	r0, [pc, #56]	; (800be00 <tcp_pcb_remove+0x114>)
 800bdc8:	f007 fae2 	bl	8013390 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d006      	beq.n	800bde2 <tcp_pcb_remove+0xf6>
 800bdd4:	4b08      	ldr	r3, [pc, #32]	; (800bdf8 <tcp_pcb_remove+0x10c>)
 800bdd6:	f640 0296 	movw	r2, #2198	; 0x896
 800bdda:	490d      	ldr	r1, [pc, #52]	; (800be10 <tcp_pcb_remove+0x124>)
 800bddc:	4808      	ldr	r0, [pc, #32]	; (800be00 <tcp_pcb_remove+0x114>)
 800bdde:	f007 fad7 	bl	8013390 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2200      	movs	r2, #0
 800bde6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2200      	movs	r2, #0
 800bdec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	08014e40 	.word	0x08014e40
 800bdfc:	080154a8 	.word	0x080154a8
 800be00:	08014e84 	.word	0x08014e84
 800be04:	080154c4 	.word	0x080154c4
 800be08:	080154e4 	.word	0x080154e4
 800be0c:	080154fc 	.word	0x080154fc
 800be10:	08015518 	.word	0x08015518

0800be14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <tcp_next_iss+0x1c>
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <tcp_next_iss+0x38>)
 800be24:	f640 02af 	movw	r2, #2223	; 0x8af
 800be28:	4909      	ldr	r1, [pc, #36]	; (800be50 <tcp_next_iss+0x3c>)
 800be2a:	480a      	ldr	r0, [pc, #40]	; (800be54 <tcp_next_iss+0x40>)
 800be2c:	f007 fab0 	bl	8013390 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800be30:	4b09      	ldr	r3, [pc, #36]	; (800be58 <tcp_next_iss+0x44>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4b09      	ldr	r3, [pc, #36]	; (800be5c <tcp_next_iss+0x48>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4413      	add	r3, r2
 800be3a:	4a07      	ldr	r2, [pc, #28]	; (800be58 <tcp_next_iss+0x44>)
 800be3c:	6013      	str	r3, [r2, #0]
  return iss;
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <tcp_next_iss+0x44>)
 800be40:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	08014e40 	.word	0x08014e40
 800be50:	08015530 	.word	0x08015530
 800be54:	08014e84 	.word	0x08014e84
 800be58:	20000028 	.word	0x20000028
 800be5c:	2000c948 	.word	0x2000c948

0800be60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <tcp_eff_send_mss_netif+0x22>
 800be74:	4b14      	ldr	r3, [pc, #80]	; (800bec8 <tcp_eff_send_mss_netif+0x68>)
 800be76:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800be7a:	4914      	ldr	r1, [pc, #80]	; (800becc <tcp_eff_send_mss_netif+0x6c>)
 800be7c:	4814      	ldr	r0, [pc, #80]	; (800bed0 <tcp_eff_send_mss_netif+0x70>)
 800be7e:	f007 fa87 	bl	8013390 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800be88:	89fb      	ldrh	r3, [r7, #14]
 800be8a:	e019      	b.n	800bec0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800be92:	8afb      	ldrh	r3, [r7, #22]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d012      	beq.n	800bebe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800be98:	2328      	movs	r3, #40	; 0x28
 800be9a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800be9c:	8afa      	ldrh	r2, [r7, #22]
 800be9e:	8abb      	ldrh	r3, [r7, #20]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d904      	bls.n	800beae <tcp_eff_send_mss_netif+0x4e>
 800bea4:	8afa      	ldrh	r2, [r7, #22]
 800bea6:	8abb      	ldrh	r3, [r7, #20]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	b29b      	uxth	r3, r3
 800beac:	e000      	b.n	800beb0 <tcp_eff_send_mss_netif+0x50>
 800beae:	2300      	movs	r3, #0
 800beb0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800beb2:	8a7a      	ldrh	r2, [r7, #18]
 800beb4:	89fb      	ldrh	r3, [r7, #14]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	bf28      	it	cs
 800beba:	4613      	movcs	r3, r2
 800bebc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bebe:	89fb      	ldrh	r3, [r7, #14]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3718      	adds	r7, #24
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	08014e40 	.word	0x08014e40
 800becc:	0801554c 	.word	0x0801554c
 800bed0:	08014e84 	.word	0x08014e84

0800bed4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d119      	bne.n	800bf1c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bee8:	4b10      	ldr	r3, [pc, #64]	; (800bf2c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800beea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800beee:	4910      	ldr	r1, [pc, #64]	; (800bf30 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bef0:	4810      	ldr	r0, [pc, #64]	; (800bf34 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bef2:	f007 fa4d 	bl	8013390 <iprintf>

  while (pcb != NULL) {
 800bef6:	e011      	b.n	800bf1c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d108      	bne.n	800bf16 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7fe ffc6 	bl	800ae9c <tcp_abort>
      pcb = next;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	e002      	b.n	800bf1c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1ea      	bne.n	800bef8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bf22:	bf00      	nop
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	08014e40 	.word	0x08014e40
 800bf30:	08015574 	.word	0x08015574
 800bf34:	08014e84 	.word	0x08014e84

0800bf38 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d02a      	beq.n	800bf9e <tcp_netif_ip_addr_changed+0x66>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d026      	beq.n	800bf9e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <tcp_netif_ip_addr_changed+0x70>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ffbc 	bl	800bed4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bf5c:	4b13      	ldr	r3, [pc, #76]	; (800bfac <tcp_netif_ip_addr_changed+0x74>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff ffb6 	bl	800bed4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d017      	beq.n	800bf9e <tcp_netif_ip_addr_changed+0x66>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d013      	beq.n	800bf9e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf76:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <tcp_netif_ip_addr_changed+0x78>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e00c      	b.n	800bf98 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d103      	bne.n	800bf92 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1ef      	bne.n	800bf7e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000c954 	.word	0x2000c954
 800bfac:	2000c94c 	.word	0x2000c94c
 800bfb0:	2000c950 	.word	0x2000c950

0800bfb4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d007      	beq.n	800bfd4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fc3d 	bl	800b848 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bfdc:	b590      	push	{r4, r7, lr}
 800bfde:	b08d      	sub	sp, #52	; 0x34
 800bfe0:	af04      	add	r7, sp, #16
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d105      	bne.n	800bff8 <tcp_input+0x1c>
 800bfec:	4b9b      	ldr	r3, [pc, #620]	; (800c25c <tcp_input+0x280>)
 800bfee:	2283      	movs	r2, #131	; 0x83
 800bff0:	499b      	ldr	r1, [pc, #620]	; (800c260 <tcp_input+0x284>)
 800bff2:	489c      	ldr	r0, [pc, #624]	; (800c264 <tcp_input+0x288>)
 800bff4:	f007 f9cc 	bl	8013390 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4a9a      	ldr	r2, [pc, #616]	; (800c268 <tcp_input+0x28c>)
 800bffe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	895b      	ldrh	r3, [r3, #10]
 800c004:	2b13      	cmp	r3, #19
 800c006:	f240 83d1 	bls.w	800c7ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c00a:	4b98      	ldr	r3, [pc, #608]	; (800c26c <tcp_input+0x290>)
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	4a97      	ldr	r2, [pc, #604]	; (800c26c <tcp_input+0x290>)
 800c010:	6812      	ldr	r2, [r2, #0]
 800c012:	4611      	mov	r1, r2
 800c014:	4618      	mov	r0, r3
 800c016:	f005 ff77 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f040 83c7 	bne.w	800c7b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c022:	4b92      	ldr	r3, [pc, #584]	; (800c26c <tcp_input+0x290>)
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c02a:	2be0      	cmp	r3, #224	; 0xe0
 800c02c:	f000 83c0 	beq.w	800c7b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c030:	4b8d      	ldr	r3, [pc, #564]	; (800c268 <tcp_input+0x28c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	899b      	ldrh	r3, [r3, #12]
 800c036:	b29b      	uxth	r3, r3
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fc fd99 	bl	8008b70 <lwip_htons>
 800c03e:	4603      	mov	r3, r0
 800c040:	0b1b      	lsrs	r3, r3, #12
 800c042:	b29b      	uxth	r3, r3
 800c044:	b2db      	uxtb	r3, r3
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c04a:	7cbb      	ldrb	r3, [r7, #18]
 800c04c:	2b13      	cmp	r3, #19
 800c04e:	f240 83b1 	bls.w	800c7b4 <tcp_input+0x7d8>
 800c052:	7cbb      	ldrb	r3, [r7, #18]
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	891b      	ldrh	r3, [r3, #8]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	f200 83aa 	bhi.w	800c7b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c060:	7cbb      	ldrb	r3, [r7, #18]
 800c062:	b29b      	uxth	r3, r3
 800c064:	3b14      	subs	r3, #20
 800c066:	b29a      	uxth	r2, r3
 800c068:	4b81      	ldr	r3, [pc, #516]	; (800c270 <tcp_input+0x294>)
 800c06a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c06c:	4b81      	ldr	r3, [pc, #516]	; (800c274 <tcp_input+0x298>)
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	895a      	ldrh	r2, [r3, #10]
 800c076:	7cbb      	ldrb	r3, [r7, #18]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d309      	bcc.n	800c092 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c07e:	4b7c      	ldr	r3, [pc, #496]	; (800c270 <tcp_input+0x294>)
 800c080:	881a      	ldrh	r2, [r3, #0]
 800c082:	4b7d      	ldr	r3, [pc, #500]	; (800c278 <tcp_input+0x29c>)
 800c084:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c086:	7cbb      	ldrb	r3, [r7, #18]
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7fe f8dc 	bl	800a248 <pbuf_remove_header>
 800c090:	e04e      	b.n	800c130 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <tcp_input+0xca>
 800c09a:	4b70      	ldr	r3, [pc, #448]	; (800c25c <tcp_input+0x280>)
 800c09c:	22c2      	movs	r2, #194	; 0xc2
 800c09e:	4977      	ldr	r1, [pc, #476]	; (800c27c <tcp_input+0x2a0>)
 800c0a0:	4870      	ldr	r0, [pc, #448]	; (800c264 <tcp_input+0x288>)
 800c0a2:	f007 f975 	bl	8013390 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c0a6:	2114      	movs	r1, #20
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7fe f8cd 	bl	800a248 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	895a      	ldrh	r2, [r3, #10]
 800c0b2:	4b71      	ldr	r3, [pc, #452]	; (800c278 <tcp_input+0x29c>)
 800c0b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c0b6:	4b6e      	ldr	r3, [pc, #440]	; (800c270 <tcp_input+0x294>)
 800c0b8:	881a      	ldrh	r2, [r3, #0]
 800c0ba:	4b6f      	ldr	r3, [pc, #444]	; (800c278 <tcp_input+0x29c>)
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c0c2:	4b6d      	ldr	r3, [pc, #436]	; (800c278 <tcp_input+0x29c>)
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7fe f8bd 	bl	800a248 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	895b      	ldrh	r3, [r3, #10]
 800c0d4:	8a3a      	ldrh	r2, [r7, #16]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	f200 836e 	bhi.w	800c7b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	4a64      	ldr	r2, [pc, #400]	; (800c274 <tcp_input+0x298>)
 800c0e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	8a3a      	ldrh	r2, [r7, #16]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe f8aa 	bl	800a248 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	891a      	ldrh	r2, [r3, #8]
 800c0f8:	8a3b      	ldrh	r3, [r7, #16]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	895b      	ldrh	r3, [r3, #10]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d005      	beq.n	800c116 <tcp_input+0x13a>
 800c10a:	4b54      	ldr	r3, [pc, #336]	; (800c25c <tcp_input+0x280>)
 800c10c:	22df      	movs	r2, #223	; 0xdf
 800c10e:	495c      	ldr	r1, [pc, #368]	; (800c280 <tcp_input+0x2a4>)
 800c110:	4854      	ldr	r0, [pc, #336]	; (800c264 <tcp_input+0x288>)
 800c112:	f007 f93d 	bl	8013390 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	891a      	ldrh	r2, [r3, #8]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	891b      	ldrh	r3, [r3, #8]
 800c120:	429a      	cmp	r2, r3
 800c122:	d005      	beq.n	800c130 <tcp_input+0x154>
 800c124:	4b4d      	ldr	r3, [pc, #308]	; (800c25c <tcp_input+0x280>)
 800c126:	22e0      	movs	r2, #224	; 0xe0
 800c128:	4956      	ldr	r1, [pc, #344]	; (800c284 <tcp_input+0x2a8>)
 800c12a:	484e      	ldr	r0, [pc, #312]	; (800c264 <tcp_input+0x288>)
 800c12c:	f007 f930 	bl	8013390 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c130:	4b4d      	ldr	r3, [pc, #308]	; (800c268 <tcp_input+0x28c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	4a4b      	ldr	r2, [pc, #300]	; (800c268 <tcp_input+0x28c>)
 800c13a:	6814      	ldr	r4, [r2, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fc fd17 	bl	8008b70 <lwip_htons>
 800c142:	4603      	mov	r3, r0
 800c144:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c146:	4b48      	ldr	r3, [pc, #288]	; (800c268 <tcp_input+0x28c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	885b      	ldrh	r3, [r3, #2]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	4a46      	ldr	r2, [pc, #280]	; (800c268 <tcp_input+0x28c>)
 800c150:	6814      	ldr	r4, [r2, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	f7fc fd0c 	bl	8008b70 <lwip_htons>
 800c158:	4603      	mov	r3, r0
 800c15a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c15c:	4b42      	ldr	r3, [pc, #264]	; (800c268 <tcp_input+0x28c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4a41      	ldr	r2, [pc, #260]	; (800c268 <tcp_input+0x28c>)
 800c164:	6814      	ldr	r4, [r2, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f7fc fd17 	bl	8008b9a <lwip_htonl>
 800c16c:	4603      	mov	r3, r0
 800c16e:	6063      	str	r3, [r4, #4]
 800c170:	6863      	ldr	r3, [r4, #4]
 800c172:	4a45      	ldr	r2, [pc, #276]	; (800c288 <tcp_input+0x2ac>)
 800c174:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c176:	4b3c      	ldr	r3, [pc, #240]	; (800c268 <tcp_input+0x28c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	4a3a      	ldr	r2, [pc, #232]	; (800c268 <tcp_input+0x28c>)
 800c17e:	6814      	ldr	r4, [r2, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f7fc fd0a 	bl	8008b9a <lwip_htonl>
 800c186:	4603      	mov	r3, r0
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	4a3f      	ldr	r2, [pc, #252]	; (800c28c <tcp_input+0x2b0>)
 800c18e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c190:	4b35      	ldr	r3, [pc, #212]	; (800c268 <tcp_input+0x28c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	89db      	ldrh	r3, [r3, #14]
 800c196:	b29b      	uxth	r3, r3
 800c198:	4a33      	ldr	r2, [pc, #204]	; (800c268 <tcp_input+0x28c>)
 800c19a:	6814      	ldr	r4, [r2, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fc fce7 	bl	8008b70 <lwip_htons>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c1a6:	4b30      	ldr	r3, [pc, #192]	; (800c268 <tcp_input+0x28c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	899b      	ldrh	r3, [r3, #12]
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fc fcde 	bl	8008b70 <lwip_htons>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	4b34      	ldr	r3, [pc, #208]	; (800c290 <tcp_input+0x2b4>)
 800c1c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	891a      	ldrh	r2, [r3, #8]
 800c1c6:	4b33      	ldr	r3, [pc, #204]	; (800c294 <tcp_input+0x2b8>)
 800c1c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c1ca:	4b31      	ldr	r3, [pc, #196]	; (800c290 <tcp_input+0x2b4>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	f003 0303 	and.w	r3, r3, #3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00c      	beq.n	800c1f0 <tcp_input+0x214>
    tcplen++;
 800c1d6:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <tcp_input+0x2b8>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	4b2d      	ldr	r3, [pc, #180]	; (800c294 <tcp_input+0x2b8>)
 800c1e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	891a      	ldrh	r2, [r3, #8]
 800c1e6:	4b2b      	ldr	r3, [pc, #172]	; (800c294 <tcp_input+0x2b8>)
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	f200 82e6 	bhi.w	800c7bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1f4:	4b28      	ldr	r3, [pc, #160]	; (800c298 <tcp_input+0x2bc>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	61fb      	str	r3, [r7, #28]
 800c1fa:	e09d      	b.n	800c338 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	7d1b      	ldrb	r3, [r3, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d105      	bne.n	800c210 <tcp_input+0x234>
 800c204:	4b15      	ldr	r3, [pc, #84]	; (800c25c <tcp_input+0x280>)
 800c206:	22fb      	movs	r2, #251	; 0xfb
 800c208:	4924      	ldr	r1, [pc, #144]	; (800c29c <tcp_input+0x2c0>)
 800c20a:	4816      	ldr	r0, [pc, #88]	; (800c264 <tcp_input+0x288>)
 800c20c:	f007 f8c0 	bl	8013390 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	7d1b      	ldrb	r3, [r3, #20]
 800c214:	2b0a      	cmp	r3, #10
 800c216:	d105      	bne.n	800c224 <tcp_input+0x248>
 800c218:	4b10      	ldr	r3, [pc, #64]	; (800c25c <tcp_input+0x280>)
 800c21a:	22fc      	movs	r2, #252	; 0xfc
 800c21c:	4920      	ldr	r1, [pc, #128]	; (800c2a0 <tcp_input+0x2c4>)
 800c21e:	4811      	ldr	r0, [pc, #68]	; (800c264 <tcp_input+0x288>)
 800c220:	f007 f8b6 	bl	8013390 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	7d1b      	ldrb	r3, [r3, #20]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d105      	bne.n	800c238 <tcp_input+0x25c>
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <tcp_input+0x280>)
 800c22e:	22fd      	movs	r2, #253	; 0xfd
 800c230:	491c      	ldr	r1, [pc, #112]	; (800c2a4 <tcp_input+0x2c8>)
 800c232:	480c      	ldr	r0, [pc, #48]	; (800c264 <tcp_input+0x288>)
 800c234:	f007 f8ac 	bl	8013390 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	7a1b      	ldrb	r3, [r3, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d033      	beq.n	800c2a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	7a1a      	ldrb	r2, [r3, #8]
 800c244:	4b09      	ldr	r3, [pc, #36]	; (800c26c <tcp_input+0x290>)
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c24c:	3301      	adds	r3, #1
 800c24e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c250:	429a      	cmp	r2, r3
 800c252:	d029      	beq.n	800c2a8 <tcp_input+0x2cc>
      prev = pcb;
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	61bb      	str	r3, [r7, #24]
      continue;
 800c258:	e06b      	b.n	800c332 <tcp_input+0x356>
 800c25a:	bf00      	nop
 800c25c:	080155a8 	.word	0x080155a8
 800c260:	080155dc 	.word	0x080155dc
 800c264:	080155f4 	.word	0x080155f4
 800c268:	2000c970 	.word	0x2000c970
 800c26c:	200091f4 	.word	0x200091f4
 800c270:	2000c974 	.word	0x2000c974
 800c274:	2000c978 	.word	0x2000c978
 800c278:	2000c976 	.word	0x2000c976
 800c27c:	0801561c 	.word	0x0801561c
 800c280:	0801562c 	.word	0x0801562c
 800c284:	08015638 	.word	0x08015638
 800c288:	2000c980 	.word	0x2000c980
 800c28c:	2000c984 	.word	0x2000c984
 800c290:	2000c98c 	.word	0x2000c98c
 800c294:	2000c98a 	.word	0x2000c98a
 800c298:	2000c954 	.word	0x2000c954
 800c29c:	08015658 	.word	0x08015658
 800c2a0:	08015680 	.word	0x08015680
 800c2a4:	080156ac 	.word	0x080156ac
    }

    if (pcb->remote_port == tcphdr->src &&
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	8b1a      	ldrh	r2, [r3, #24]
 800c2ac:	4b72      	ldr	r3, [pc, #456]	; (800c478 <tcp_input+0x49c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d13a      	bne.n	800c32e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	8ada      	ldrh	r2, [r3, #22]
 800c2bc:	4b6e      	ldr	r3, [pc, #440]	; (800c478 <tcp_input+0x49c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d132      	bne.n	800c32e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	4b6b      	ldr	r3, [pc, #428]	; (800c47c <tcp_input+0x4a0>)
 800c2ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d12c      	bne.n	800c32e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	4b68      	ldr	r3, [pc, #416]	; (800c47c <tcp_input+0x4a0>)
 800c2da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d126      	bne.n	800c32e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	69fa      	ldr	r2, [r7, #28]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d106      	bne.n	800c2f8 <tcp_input+0x31c>
 800c2ea:	4b65      	ldr	r3, [pc, #404]	; (800c480 <tcp_input+0x4a4>)
 800c2ec:	f240 120d 	movw	r2, #269	; 0x10d
 800c2f0:	4964      	ldr	r1, [pc, #400]	; (800c484 <tcp_input+0x4a8>)
 800c2f2:	4865      	ldr	r0, [pc, #404]	; (800c488 <tcp_input+0x4ac>)
 800c2f4:	f007 f84c 	bl	8013390 <iprintf>
      if (prev != NULL) {
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <tcp_input+0x338>
        prev->next = pcb->next;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c306:	4b61      	ldr	r3, [pc, #388]	; (800c48c <tcp_input+0x4b0>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c30e:	4a5f      	ldr	r2, [pc, #380]	; (800c48c <tcp_input+0x4b0>)
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d111      	bne.n	800c342 <tcp_input+0x366>
 800c31e:	4b58      	ldr	r3, [pc, #352]	; (800c480 <tcp_input+0x4a4>)
 800c320:	f240 1215 	movw	r2, #277	; 0x115
 800c324:	495a      	ldr	r1, [pc, #360]	; (800c490 <tcp_input+0x4b4>)
 800c326:	4858      	ldr	r0, [pc, #352]	; (800c488 <tcp_input+0x4ac>)
 800c328:	f007 f832 	bl	8013390 <iprintf>
      break;
 800c32c:	e009      	b.n	800c342 <tcp_input+0x366>
    }
    prev = pcb;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	61fb      	str	r3, [r7, #28]
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f47f af5e 	bne.w	800c1fc <tcp_input+0x220>
 800c340:	e000      	b.n	800c344 <tcp_input+0x368>
      break;
 800c342:	bf00      	nop
  }

  if (pcb == NULL) {
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f040 80aa 	bne.w	800c4a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c34c:	4b51      	ldr	r3, [pc, #324]	; (800c494 <tcp_input+0x4b8>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	e03f      	b.n	800c3d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	7d1b      	ldrb	r3, [r3, #20]
 800c358:	2b0a      	cmp	r3, #10
 800c35a:	d006      	beq.n	800c36a <tcp_input+0x38e>
 800c35c:	4b48      	ldr	r3, [pc, #288]	; (800c480 <tcp_input+0x4a4>)
 800c35e:	f240 121f 	movw	r2, #287	; 0x11f
 800c362:	494d      	ldr	r1, [pc, #308]	; (800c498 <tcp_input+0x4bc>)
 800c364:	4848      	ldr	r0, [pc, #288]	; (800c488 <tcp_input+0x4ac>)
 800c366:	f007 f813 	bl	8013390 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	7a1b      	ldrb	r3, [r3, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	7a1a      	ldrb	r2, [r3, #8]
 800c376:	4b41      	ldr	r3, [pc, #260]	; (800c47c <tcp_input+0x4a0>)
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c37e:	3301      	adds	r3, #1
 800c380:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c382:	429a      	cmp	r2, r3
 800c384:	d122      	bne.n	800c3cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	8b1a      	ldrh	r2, [r3, #24]
 800c38a:	4b3b      	ldr	r3, [pc, #236]	; (800c478 <tcp_input+0x49c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	b29b      	uxth	r3, r3
 800c392:	429a      	cmp	r2, r3
 800c394:	d11b      	bne.n	800c3ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	8ada      	ldrh	r2, [r3, #22]
 800c39a:	4b37      	ldr	r3, [pc, #220]	; (800c478 <tcp_input+0x49c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	885b      	ldrh	r3, [r3, #2]
 800c3a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d113      	bne.n	800c3ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	4b34      	ldr	r3, [pc, #208]	; (800c47c <tcp_input+0x4a0>)
 800c3ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d10d      	bne.n	800c3ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	4b31      	ldr	r3, [pc, #196]	; (800c47c <tcp_input+0x4a0>)
 800c3b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d107      	bne.n	800c3ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c3be:	69f8      	ldr	r0, [r7, #28]
 800c3c0:	f000 fb56 	bl	800ca70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7fd ffc5 	bl	800a354 <pbuf_free>
        return;
 800c3ca:	e1fd      	b.n	800c7c8 <tcp_input+0x7ec>
        continue;
 800c3cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	61fb      	str	r3, [r7, #28]
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1bc      	bne.n	800c354 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3de:	4b2f      	ldr	r3, [pc, #188]	; (800c49c <tcp_input+0x4c0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e02a      	b.n	800c43c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	7a1b      	ldrb	r3, [r3, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00c      	beq.n	800c408 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	7a1a      	ldrb	r2, [r3, #8]
 800c3f2:	4b22      	ldr	r3, [pc, #136]	; (800c47c <tcp_input+0x4a0>)
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d002      	beq.n	800c408 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	61bb      	str	r3, [r7, #24]
        continue;
 800c406:	e016      	b.n	800c436 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	8ada      	ldrh	r2, [r3, #22]
 800c40c:	4b1a      	ldr	r3, [pc, #104]	; (800c478 <tcp_input+0x49c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	885b      	ldrh	r3, [r3, #2]
 800c412:	b29b      	uxth	r3, r3
 800c414:	429a      	cmp	r2, r3
 800c416:	d10c      	bne.n	800c432 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	4b17      	ldr	r3, [pc, #92]	; (800c47c <tcp_input+0x4a0>)
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00f      	beq.n	800c444 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00d      	beq.n	800c446 <tcp_input+0x46a>
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d009      	beq.n	800c446 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1d1      	bne.n	800c3e6 <tcp_input+0x40a>
 800c442:	e000      	b.n	800c446 <tcp_input+0x46a>
            break;
 800c444:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d029      	beq.n	800c4a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <tcp_input+0x4c0>)
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c462:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <tcp_input+0x4c0>)
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c468:	6978      	ldr	r0, [r7, #20]
 800c46a:	f000 fa03 	bl	800c874 <tcp_listen_input>
      }
      pbuf_free(p);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7fd ff70 	bl	800a354 <pbuf_free>
      return;
 800c474:	e1a8      	b.n	800c7c8 <tcp_input+0x7ec>
 800c476:	bf00      	nop
 800c478:	2000c970 	.word	0x2000c970
 800c47c:	200091f4 	.word	0x200091f4
 800c480:	080155a8 	.word	0x080155a8
 800c484:	080156d4 	.word	0x080156d4
 800c488:	080155f4 	.word	0x080155f4
 800c48c:	2000c954 	.word	0x2000c954
 800c490:	08015700 	.word	0x08015700
 800c494:	2000c958 	.word	0x2000c958
 800c498:	0801572c 	.word	0x0801572c
 800c49c:	2000c950 	.word	0x2000c950
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 8158 	beq.w	800c758 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c4a8:	4b95      	ldr	r3, [pc, #596]	; (800c700 <tcp_input+0x724>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	891a      	ldrh	r2, [r3, #8]
 800c4b2:	4b93      	ldr	r3, [pc, #588]	; (800c700 <tcp_input+0x724>)
 800c4b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c4b6:	4a92      	ldr	r2, [pc, #584]	; (800c700 <tcp_input+0x724>)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c4bc:	4b91      	ldr	r3, [pc, #580]	; (800c704 <tcp_input+0x728>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a8f      	ldr	r2, [pc, #572]	; (800c700 <tcp_input+0x724>)
 800c4c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c4c4:	4b90      	ldr	r3, [pc, #576]	; (800c708 <tcp_input+0x72c>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c4ca:	4b90      	ldr	r3, [pc, #576]	; (800c70c <tcp_input+0x730>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c4d0:	4b8f      	ldr	r3, [pc, #572]	; (800c710 <tcp_input+0x734>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c4d6:	4b8f      	ldr	r3, [pc, #572]	; (800c714 <tcp_input+0x738>)
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7b5b      	ldrb	r3, [r3, #13]
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d017      	beq.n	800c528 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c4f8:	69f8      	ldr	r0, [r7, #28]
 800c4fa:	f7ff f929 	bl	800b750 <tcp_process_refused_data>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f113 0f0d 	cmn.w	r3, #13
 800c504:	d007      	beq.n	800c516 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00c      	beq.n	800c528 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c50e:	4b82      	ldr	r3, [pc, #520]	; (800c718 <tcp_input+0x73c>)
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d008      	beq.n	800c528 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f040 80e3 	bne.w	800c6e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c520:	69f8      	ldr	r0, [r7, #28]
 800c522:	f003 f9ad 	bl	800f880 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c526:	e0de      	b.n	800c6e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c528:	4a7c      	ldr	r2, [pc, #496]	; (800c71c <tcp_input+0x740>)
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c52e:	69f8      	ldr	r0, [r7, #28]
 800c530:	f000 fb18 	bl	800cb64 <tcp_process>
 800c534:	4603      	mov	r3, r0
 800c536:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c538:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c53c:	f113 0f0d 	cmn.w	r3, #13
 800c540:	f000 80d3 	beq.w	800c6ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c544:	4b71      	ldr	r3, [pc, #452]	; (800c70c <tcp_input+0x730>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	f003 0308 	and.w	r3, r3, #8
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d015      	beq.n	800c57c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c556:	2b00      	cmp	r3, #0
 800c558:	d008      	beq.n	800c56c <tcp_input+0x590>
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	6912      	ldr	r2, [r2, #16]
 800c564:	f06f 010d 	mvn.w	r1, #13
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c56c:	69f9      	ldr	r1, [r7, #28]
 800c56e:	486c      	ldr	r0, [pc, #432]	; (800c720 <tcp_input+0x744>)
 800c570:	f7ff fbbc 	bl	800bcec <tcp_pcb_remove>
        tcp_free(pcb);
 800c574:	69f8      	ldr	r0, [r7, #28]
 800c576:	f7fe f9a9 	bl	800a8cc <tcp_free>
 800c57a:	e0da      	b.n	800c732 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c580:	4b63      	ldr	r3, [pc, #396]	; (800c710 <tcp_input+0x734>)
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01d      	beq.n	800c5c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c588:	4b61      	ldr	r3, [pc, #388]	; (800c710 <tcp_input+0x734>)
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00a      	beq.n	800c5ae <tcp_input+0x5d2>
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c59e:	69fa      	ldr	r2, [r7, #28]
 800c5a0:	6910      	ldr	r0, [r2, #16]
 800c5a2:	89fa      	ldrh	r2, [r7, #14]
 800c5a4:	69f9      	ldr	r1, [r7, #28]
 800c5a6:	4798      	blx	r3
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	74fb      	strb	r3, [r7, #19]
 800c5ac:	e001      	b.n	800c5b2 <tcp_input+0x5d6>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c5b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c5b6:	f113 0f0d 	cmn.w	r3, #13
 800c5ba:	f000 8098 	beq.w	800c6ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c5be:	4b54      	ldr	r3, [pc, #336]	; (800c710 <tcp_input+0x734>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c5c4:	69f8      	ldr	r0, [r7, #28]
 800c5c6:	f000 f915 	bl	800c7f4 <tcp_input_delayed_close>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f040 8090 	bne.w	800c6f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c5d2:	4b4d      	ldr	r3, [pc, #308]	; (800c708 <tcp_input+0x72c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d041      	beq.n	800c65e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d006      	beq.n	800c5f0 <tcp_input+0x614>
 800c5e2:	4b50      	ldr	r3, [pc, #320]	; (800c724 <tcp_input+0x748>)
 800c5e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c5e8:	494f      	ldr	r1, [pc, #316]	; (800c728 <tcp_input+0x74c>)
 800c5ea:	4850      	ldr	r0, [pc, #320]	; (800c72c <tcp_input+0x750>)
 800c5ec:	f006 fed0 	bl	8013390 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	8b5b      	ldrh	r3, [r3, #26]
 800c5f4:	f003 0310 	and.w	r3, r3, #16
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c5fc:	4b42      	ldr	r3, [pc, #264]	; (800c708 <tcp_input+0x72c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f7fd fea7 	bl	800a354 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c606:	69f8      	ldr	r0, [r7, #28]
 800c608:	f7fe fc48 	bl	800ae9c <tcp_abort>
            goto aborted;
 800c60c:	e091      	b.n	800c732 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00c      	beq.n	800c632 <tcp_input+0x656>
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	6918      	ldr	r0, [r3, #16]
 800c622:	4b39      	ldr	r3, [pc, #228]	; (800c708 <tcp_input+0x72c>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	2300      	movs	r3, #0
 800c628:	69f9      	ldr	r1, [r7, #28]
 800c62a:	47a0      	blx	r4
 800c62c:	4603      	mov	r3, r0
 800c62e:	74fb      	strb	r3, [r7, #19]
 800c630:	e008      	b.n	800c644 <tcp_input+0x668>
 800c632:	4b35      	ldr	r3, [pc, #212]	; (800c708 <tcp_input+0x72c>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	2300      	movs	r3, #0
 800c638:	69f9      	ldr	r1, [r7, #28]
 800c63a:	2000      	movs	r0, #0
 800c63c:	f7ff f95e 	bl	800b8fc <tcp_recv_null>
 800c640:	4603      	mov	r3, r0
 800c642:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c648:	f113 0f0d 	cmn.w	r3, #13
 800c64c:	d053      	beq.n	800c6f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c64e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c656:	4b2c      	ldr	r3, [pc, #176]	; (800c708 <tcp_input+0x72c>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c65e:	4b2b      	ldr	r3, [pc, #172]	; (800c70c <tcp_input+0x730>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	f003 0320 	and.w	r3, r3, #32
 800c666:	2b00      	cmp	r3, #0
 800c668:	d030      	beq.n	800c6cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d009      	beq.n	800c686 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c676:	7b5a      	ldrb	r2, [r3, #13]
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c67c:	f042 0220 	orr.w	r2, r2, #32
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	735a      	strb	r2, [r3, #13]
 800c684:	e022      	b.n	800c6cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c68a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c68e:	d005      	beq.n	800c69c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c694:	3301      	adds	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00b      	beq.n	800c6be <tcp_input+0x6e2>
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	6918      	ldr	r0, [r3, #16]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	69f9      	ldr	r1, [r7, #28]
 800c6b6:	47a0      	blx	r4
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	74fb      	strb	r3, [r7, #19]
 800c6bc:	e001      	b.n	800c6c2 <tcp_input+0x6e6>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c6c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6c6:	f113 0f0d 	cmn.w	r3, #13
 800c6ca:	d016      	beq.n	800c6fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c6cc:	4b13      	ldr	r3, [pc, #76]	; (800c71c <tcp_input+0x740>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c6d2:	69f8      	ldr	r0, [r7, #28]
 800c6d4:	f000 f88e 	bl	800c7f4 <tcp_input_delayed_close>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d128      	bne.n	800c730 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c6de:	69f8      	ldr	r0, [r7, #28]
 800c6e0:	f002 fac8 	bl	800ec74 <tcp_output>
 800c6e4:	e025      	b.n	800c732 <tcp_input+0x756>
        goto aborted;
 800c6e6:	bf00      	nop
 800c6e8:	e023      	b.n	800c732 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c6ea:	bf00      	nop
 800c6ec:	e021      	b.n	800c732 <tcp_input+0x756>
              goto aborted;
 800c6ee:	bf00      	nop
 800c6f0:	e01f      	b.n	800c732 <tcp_input+0x756>
          goto aborted;
 800c6f2:	bf00      	nop
 800c6f4:	e01d      	b.n	800c732 <tcp_input+0x756>
            goto aborted;
 800c6f6:	bf00      	nop
 800c6f8:	e01b      	b.n	800c732 <tcp_input+0x756>
              goto aborted;
 800c6fa:	bf00      	nop
 800c6fc:	e019      	b.n	800c732 <tcp_input+0x756>
 800c6fe:	bf00      	nop
 800c700:	2000c960 	.word	0x2000c960
 800c704:	2000c970 	.word	0x2000c970
 800c708:	2000c990 	.word	0x2000c990
 800c70c:	2000c98d 	.word	0x2000c98d
 800c710:	2000c988 	.word	0x2000c988
 800c714:	2000c98c 	.word	0x2000c98c
 800c718:	2000c98a 	.word	0x2000c98a
 800c71c:	2000c994 	.word	0x2000c994
 800c720:	2000c954 	.word	0x2000c954
 800c724:	080155a8 	.word	0x080155a8
 800c728:	0801575c 	.word	0x0801575c
 800c72c:	080155f4 	.word	0x080155f4
          goto aborted;
 800c730:	bf00      	nop
    tcp_input_pcb = NULL;
 800c732:	4b27      	ldr	r3, [pc, #156]	; (800c7d0 <tcp_input+0x7f4>)
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c738:	4b26      	ldr	r3, [pc, #152]	; (800c7d4 <tcp_input+0x7f8>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <tcp_input+0x7fc>)
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d03f      	beq.n	800c7c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c746:	4b24      	ldr	r3, [pc, #144]	; (800c7d8 <tcp_input+0x7fc>)
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fd fe02 	bl	800a354 <pbuf_free>
      inseg.p = NULL;
 800c750:	4b21      	ldr	r3, [pc, #132]	; (800c7d8 <tcp_input+0x7fc>)
 800c752:	2200      	movs	r2, #0
 800c754:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c756:	e036      	b.n	800c7c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c758:	4b20      	ldr	r3, [pc, #128]	; (800c7dc <tcp_input+0x800>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	899b      	ldrh	r3, [r3, #12]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	4618      	mov	r0, r3
 800c762:	f7fc fa05 	bl	8008b70 <lwip_htons>
 800c766:	4603      	mov	r3, r0
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	f003 0304 	and.w	r3, r3, #4
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d118      	bne.n	800c7a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c772:	4b1b      	ldr	r3, [pc, #108]	; (800c7e0 <tcp_input+0x804>)
 800c774:	6819      	ldr	r1, [r3, #0]
 800c776:	4b1b      	ldr	r3, [pc, #108]	; (800c7e4 <tcp_input+0x808>)
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	4b1a      	ldr	r3, [pc, #104]	; (800c7e8 <tcp_input+0x80c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c782:	4b16      	ldr	r3, [pc, #88]	; (800c7dc <tcp_input+0x800>)
 800c784:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c786:	885b      	ldrh	r3, [r3, #2]
 800c788:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c78a:	4a14      	ldr	r2, [pc, #80]	; (800c7dc <tcp_input+0x800>)
 800c78c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c78e:	8812      	ldrh	r2, [r2, #0]
 800c790:	b292      	uxth	r2, r2
 800c792:	9202      	str	r2, [sp, #8]
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <tcp_input+0x810>)
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <tcp_input+0x814>)
 800c79c:	4602      	mov	r2, r0
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f003 f81c 	bl	800f7dc <tcp_rst>
    pbuf_free(p);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fd fdd5 	bl	800a354 <pbuf_free>
  return;
 800c7aa:	e00c      	b.n	800c7c6 <tcp_input+0x7ea>
    goto dropped;
 800c7ac:	bf00      	nop
 800c7ae:	e006      	b.n	800c7be <tcp_input+0x7e2>
    goto dropped;
 800c7b0:	bf00      	nop
 800c7b2:	e004      	b.n	800c7be <tcp_input+0x7e2>
    goto dropped;
 800c7b4:	bf00      	nop
 800c7b6:	e002      	b.n	800c7be <tcp_input+0x7e2>
      goto dropped;
 800c7b8:	bf00      	nop
 800c7ba:	e000      	b.n	800c7be <tcp_input+0x7e2>
      goto dropped;
 800c7bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7fd fdc8 	bl	800a354 <pbuf_free>
 800c7c4:	e000      	b.n	800c7c8 <tcp_input+0x7ec>
  return;
 800c7c6:	bf00      	nop
}
 800c7c8:	3724      	adds	r7, #36	; 0x24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd90      	pop	{r4, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	2000c994 	.word	0x2000c994
 800c7d4:	2000c990 	.word	0x2000c990
 800c7d8:	2000c960 	.word	0x2000c960
 800c7dc:	2000c970 	.word	0x2000c970
 800c7e0:	2000c984 	.word	0x2000c984
 800c7e4:	2000c98a 	.word	0x2000c98a
 800c7e8:	2000c980 	.word	0x2000c980
 800c7ec:	20009204 	.word	0x20009204
 800c7f0:	20009208 	.word	0x20009208

0800c7f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <tcp_input_delayed_close+0x1c>
 800c802:	4b17      	ldr	r3, [pc, #92]	; (800c860 <tcp_input_delayed_close+0x6c>)
 800c804:	f240 225a 	movw	r2, #602	; 0x25a
 800c808:	4916      	ldr	r1, [pc, #88]	; (800c864 <tcp_input_delayed_close+0x70>)
 800c80a:	4817      	ldr	r0, [pc, #92]	; (800c868 <tcp_input_delayed_close+0x74>)
 800c80c:	f006 fdc0 	bl	8013390 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <tcp_input_delayed_close+0x78>)
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d01c      	beq.n	800c856 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8b5b      	ldrh	r3, [r3, #26]
 800c820:	f003 0310 	and.w	r3, r3, #16
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10d      	bne.n	800c844 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d008      	beq.n	800c844 <tcp_input_delayed_close+0x50>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	6912      	ldr	r2, [r2, #16]
 800c83c:	f06f 010e 	mvn.w	r1, #14
 800c840:	4610      	mov	r0, r2
 800c842:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	480a      	ldr	r0, [pc, #40]	; (800c870 <tcp_input_delayed_close+0x7c>)
 800c848:	f7ff fa50 	bl	800bcec <tcp_pcb_remove>
    tcp_free(pcb);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fe f83d 	bl	800a8cc <tcp_free>
    return 1;
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	080155a8 	.word	0x080155a8
 800c864:	08015778 	.word	0x08015778
 800c868:	080155f4 	.word	0x080155f4
 800c86c:	2000c98d 	.word	0x2000c98d
 800c870:	2000c954 	.word	0x2000c954

0800c874 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c874:	b590      	push	{r4, r7, lr}
 800c876:	b08b      	sub	sp, #44	; 0x2c
 800c878:	af04      	add	r7, sp, #16
 800c87a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c87c:	4b6f      	ldr	r3, [pc, #444]	; (800ca3c <tcp_listen_input+0x1c8>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	f040 80d2 	bne.w	800ca2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <tcp_listen_input+0x2a>
 800c890:	4b6b      	ldr	r3, [pc, #428]	; (800ca40 <tcp_listen_input+0x1cc>)
 800c892:	f240 2281 	movw	r2, #641	; 0x281
 800c896:	496b      	ldr	r1, [pc, #428]	; (800ca44 <tcp_listen_input+0x1d0>)
 800c898:	486b      	ldr	r0, [pc, #428]	; (800ca48 <tcp_listen_input+0x1d4>)
 800c89a:	f006 fd79 	bl	8013390 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c89e:	4b67      	ldr	r3, [pc, #412]	; (800ca3c <tcp_listen_input+0x1c8>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	f003 0310 	and.w	r3, r3, #16
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d019      	beq.n	800c8de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8aa:	4b68      	ldr	r3, [pc, #416]	; (800ca4c <tcp_listen_input+0x1d8>)
 800c8ac:	6819      	ldr	r1, [r3, #0]
 800c8ae:	4b68      	ldr	r3, [pc, #416]	; (800ca50 <tcp_listen_input+0x1dc>)
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	4b67      	ldr	r3, [pc, #412]	; (800ca54 <tcp_listen_input+0x1e0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8ba:	4b67      	ldr	r3, [pc, #412]	; (800ca58 <tcp_listen_input+0x1e4>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8be:	885b      	ldrh	r3, [r3, #2]
 800c8c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8c2:	4a65      	ldr	r2, [pc, #404]	; (800ca58 <tcp_listen_input+0x1e4>)
 800c8c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8c6:	8812      	ldrh	r2, [r2, #0]
 800c8c8:	b292      	uxth	r2, r2
 800c8ca:	9202      	str	r2, [sp, #8]
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	4b63      	ldr	r3, [pc, #396]	; (800ca5c <tcp_listen_input+0x1e8>)
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4b63      	ldr	r3, [pc, #396]	; (800ca60 <tcp_listen_input+0x1ec>)
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 ff80 	bl	800f7dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c8dc:	e0a9      	b.n	800ca32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c8de:	4b57      	ldr	r3, [pc, #348]	; (800ca3c <tcp_listen_input+0x1c8>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 80a3 	beq.w	800ca32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	7d5b      	ldrb	r3, [r3, #21]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff f927 	bl	800bb44 <tcp_alloc>
 800c8f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d111      	bne.n	800c922 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00a      	beq.n	800c91c <tcp_listen_input+0xa8>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	6910      	ldr	r0, [r2, #16]
 800c90e:	f04f 32ff 	mov.w	r2, #4294967295
 800c912:	2100      	movs	r1, #0
 800c914:	4798      	blx	r3
 800c916:	4603      	mov	r3, r0
 800c918:	73bb      	strb	r3, [r7, #14]
      return;
 800c91a:	e08b      	b.n	800ca34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c91c:	23f0      	movs	r3, #240	; 0xf0
 800c91e:	73bb      	strb	r3, [r7, #14]
      return;
 800c920:	e088      	b.n	800ca34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c922:	4b50      	ldr	r3, [pc, #320]	; (800ca64 <tcp_listen_input+0x1f0>)
 800c924:	695a      	ldr	r2, [r3, #20]
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c92a:	4b4e      	ldr	r3, [pc, #312]	; (800ca64 <tcp_listen_input+0x1f0>)
 800c92c:	691a      	ldr	r2, [r3, #16]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8ada      	ldrh	r2, [r3, #22]
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c93a:	4b47      	ldr	r3, [pc, #284]	; (800ca58 <tcp_listen_input+0x1e4>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	b29a      	uxth	r2, r3
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2203      	movs	r2, #3
 800c94a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c94c:	4b41      	ldr	r3, [pc, #260]	; (800ca54 <tcp_listen_input+0x1e0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c95e:	6978      	ldr	r0, [r7, #20]
 800c960:	f7ff fa58 	bl	800be14 <tcp_next_iss>
 800c964:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c97e:	4b35      	ldr	r3, [pc, #212]	; (800ca54 <tcp_listen_input+0x1e0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	1e5a      	subs	r2, r3, #1
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	691a      	ldr	r2, [r3, #16]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7a5b      	ldrb	r3, [r3, #9]
 800c99a:	f003 030c 	and.w	r3, r3, #12
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	7a1a      	ldrb	r2, [r3, #8]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c9ac:	4b2e      	ldr	r3, [pc, #184]	; (800ca68 <tcp_listen_input+0x1f4>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	60da      	str	r2, [r3, #12]
 800c9b4:	4a2c      	ldr	r2, [pc, #176]	; (800ca68 <tcp_listen_input+0x1f4>)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	f003 f8d1 	bl	800fb60 <tcp_timer_needed>
 800c9be:	4b2b      	ldr	r3, [pc, #172]	; (800ca6c <tcp_listen_input+0x1f8>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c9c4:	6978      	ldr	r0, [r7, #20]
 800c9c6:	f001 fd8f 	bl	800e4e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c9ca:	4b23      	ldr	r3, [pc, #140]	; (800ca58 <tcp_listen_input+0x1e4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	89db      	ldrh	r3, [r3, #14]
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f004 fff5 	bl	80119dc <ip4_route>
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff fa30 	bl	800be60 <tcp_eff_send_mss_netif>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ca08:	2112      	movs	r1, #18
 800ca0a:	6978      	ldr	r0, [r7, #20]
 800ca0c:	f002 f844 	bl	800ea98 <tcp_enqueue_flags>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ca14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	6978      	ldr	r0, [r7, #20]
 800ca20:	f7fe f97e 	bl	800ad20 <tcp_abandon>
      return;
 800ca24:	e006      	b.n	800ca34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ca26:	6978      	ldr	r0, [r7, #20]
 800ca28:	f002 f924 	bl	800ec74 <tcp_output>
  return;
 800ca2c:	e001      	b.n	800ca32 <tcp_listen_input+0x1be>
    return;
 800ca2e:	bf00      	nop
 800ca30:	e000      	b.n	800ca34 <tcp_listen_input+0x1c0>
  return;
 800ca32:	bf00      	nop
}
 800ca34:	371c      	adds	r7, #28
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd90      	pop	{r4, r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	2000c98c 	.word	0x2000c98c
 800ca40:	080155a8 	.word	0x080155a8
 800ca44:	080157a0 	.word	0x080157a0
 800ca48:	080155f4 	.word	0x080155f4
 800ca4c:	2000c984 	.word	0x2000c984
 800ca50:	2000c98a 	.word	0x2000c98a
 800ca54:	2000c980 	.word	0x2000c980
 800ca58:	2000c970 	.word	0x2000c970
 800ca5c:	20009204 	.word	0x20009204
 800ca60:	20009208 	.word	0x20009208
 800ca64:	200091f4 	.word	0x200091f4
 800ca68:	2000c954 	.word	0x2000c954
 800ca6c:	2000c95c 	.word	0x2000c95c

0800ca70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af04      	add	r7, sp, #16
 800ca76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ca78:	4b2f      	ldr	r3, [pc, #188]	; (800cb38 <tcp_timewait_input+0xc8>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	f003 0304 	and.w	r3, r3, #4
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d153      	bne.n	800cb2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <tcp_timewait_input+0x28>
 800ca8a:	4b2c      	ldr	r3, [pc, #176]	; (800cb3c <tcp_timewait_input+0xcc>)
 800ca8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ca90:	492b      	ldr	r1, [pc, #172]	; (800cb40 <tcp_timewait_input+0xd0>)
 800ca92:	482c      	ldr	r0, [pc, #176]	; (800cb44 <tcp_timewait_input+0xd4>)
 800ca94:	f006 fc7c 	bl	8013390 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ca98:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <tcp_timewait_input+0xc8>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 0302 	and.w	r3, r3, #2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d02a      	beq.n	800cafa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800caa4:	4b28      	ldr	r3, [pc, #160]	; (800cb48 <tcp_timewait_input+0xd8>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	db2d      	blt.n	800cb0e <tcp_timewait_input+0x9e>
 800cab2:	4b25      	ldr	r3, [pc, #148]	; (800cb48 <tcp_timewait_input+0xd8>)
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cabe:	440b      	add	r3, r1
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	dc23      	bgt.n	800cb0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cac6:	4b21      	ldr	r3, [pc, #132]	; (800cb4c <tcp_timewait_input+0xdc>)
 800cac8:	6819      	ldr	r1, [r3, #0]
 800caca:	4b21      	ldr	r3, [pc, #132]	; (800cb50 <tcp_timewait_input+0xe0>)
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	4b1d      	ldr	r3, [pc, #116]	; (800cb48 <tcp_timewait_input+0xd8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cad6:	4b1f      	ldr	r3, [pc, #124]	; (800cb54 <tcp_timewait_input+0xe4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cada:	885b      	ldrh	r3, [r3, #2]
 800cadc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cade:	4a1d      	ldr	r2, [pc, #116]	; (800cb54 <tcp_timewait_input+0xe4>)
 800cae0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cae2:	8812      	ldrh	r2, [r2, #0]
 800cae4:	b292      	uxth	r2, r2
 800cae6:	9202      	str	r2, [sp, #8]
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <tcp_timewait_input+0xe8>)
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4b1b      	ldr	r3, [pc, #108]	; (800cb5c <tcp_timewait_input+0xec>)
 800caf0:	4602      	mov	r2, r0
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f002 fe72 	bl	800f7dc <tcp_rst>
      return;
 800caf8:	e01b      	b.n	800cb32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <tcp_timewait_input+0xc8>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cb06:	4b16      	ldr	r3, [pc, #88]	; (800cb60 <tcp_timewait_input+0xf0>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cb0e:	4b10      	ldr	r3, [pc, #64]	; (800cb50 <tcp_timewait_input+0xe0>)
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00c      	beq.n	800cb30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	8b5b      	ldrh	r3, [r3, #26]
 800cb1a:	f043 0302 	orr.w	r3, r3, #2
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f002 f8a5 	bl	800ec74 <tcp_output>
  }
  return;
 800cb2a:	e001      	b.n	800cb30 <tcp_timewait_input+0xc0>
    return;
 800cb2c:	bf00      	nop
 800cb2e:	e000      	b.n	800cb32 <tcp_timewait_input+0xc2>
  return;
 800cb30:	bf00      	nop
}
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	2000c98c 	.word	0x2000c98c
 800cb3c:	080155a8 	.word	0x080155a8
 800cb40:	080157c0 	.word	0x080157c0
 800cb44:	080155f4 	.word	0x080155f4
 800cb48:	2000c980 	.word	0x2000c980
 800cb4c:	2000c984 	.word	0x2000c984
 800cb50:	2000c98a 	.word	0x2000c98a
 800cb54:	2000c970 	.word	0x2000c970
 800cb58:	20009204 	.word	0x20009204
 800cb5c:	20009208 	.word	0x20009208
 800cb60:	2000c948 	.word	0x2000c948

0800cb64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b08d      	sub	sp, #52	; 0x34
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <tcp_process+0x24>
 800cb7a:	4b9d      	ldr	r3, [pc, #628]	; (800cdf0 <tcp_process+0x28c>)
 800cb7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cb80:	499c      	ldr	r1, [pc, #624]	; (800cdf4 <tcp_process+0x290>)
 800cb82:	489d      	ldr	r0, [pc, #628]	; (800cdf8 <tcp_process+0x294>)
 800cb84:	f006 fc04 	bl	8013390 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cb88:	4b9c      	ldr	r3, [pc, #624]	; (800cdfc <tcp_process+0x298>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d04e      	beq.n	800cc32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	7d1b      	ldrb	r3, [r3, #20]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d108      	bne.n	800cbae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cba0:	4b97      	ldr	r3, [pc, #604]	; (800ce00 <tcp_process+0x29c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d123      	bne.n	800cbf0 <tcp_process+0x8c>
        acceptable = 1;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	76fb      	strb	r3, [r7, #27]
 800cbac:	e020      	b.n	800cbf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbb2:	4b94      	ldr	r3, [pc, #592]	; (800ce04 <tcp_process+0x2a0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d102      	bne.n	800cbc0 <tcp_process+0x5c>
        acceptable = 1;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	76fb      	strb	r3, [r7, #27]
 800cbbe:	e017      	b.n	800cbf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cbc0:	4b90      	ldr	r3, [pc, #576]	; (800ce04 <tcp_process+0x2a0>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	db10      	blt.n	800cbf0 <tcp_process+0x8c>
 800cbce:	4b8d      	ldr	r3, [pc, #564]	; (800ce04 <tcp_process+0x2a0>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbda:	440b      	add	r3, r1
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	dc06      	bgt.n	800cbf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	8b5b      	ldrh	r3, [r3, #26]
 800cbe6:	f043 0302 	orr.w	r3, r3, #2
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cbf0:	7efb      	ldrb	r3, [r7, #27]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d01b      	beq.n	800cc2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7d1b      	ldrb	r3, [r3, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d106      	bne.n	800cc0c <tcp_process+0xa8>
 800cbfe:	4b7c      	ldr	r3, [pc, #496]	; (800cdf0 <tcp_process+0x28c>)
 800cc00:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cc04:	4980      	ldr	r1, [pc, #512]	; (800ce08 <tcp_process+0x2a4>)
 800cc06:	487c      	ldr	r0, [pc, #496]	; (800cdf8 <tcp_process+0x294>)
 800cc08:	f006 fbc2 	bl	8013390 <iprintf>
      recv_flags |= TF_RESET;
 800cc0c:	4b7f      	ldr	r3, [pc, #508]	; (800ce0c <tcp_process+0x2a8>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	f043 0308 	orr.w	r3, r3, #8
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	4b7d      	ldr	r3, [pc, #500]	; (800ce0c <tcp_process+0x2a8>)
 800cc18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	8b5b      	ldrh	r3, [r3, #26]
 800cc1e:	f023 0301 	bic.w	r3, r3, #1
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cc28:	f06f 030d 	mvn.w	r3, #13
 800cc2c:	e37a      	b.n	800d324 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e378      	b.n	800d324 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cc32:	4b72      	ldr	r3, [pc, #456]	; (800cdfc <tcp_process+0x298>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	f003 0302 	and.w	r3, r3, #2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d010      	beq.n	800cc60 <tcp_process+0xfc>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7d1b      	ldrb	r3, [r3, #20]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d00c      	beq.n	800cc60 <tcp_process+0xfc>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7d1b      	ldrb	r3, [r3, #20]
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d008      	beq.n	800cc60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8b5b      	ldrh	r3, [r3, #26]
 800cc52:	f043 0302 	orr.w	r3, r3, #2
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e361      	b.n	800d324 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8b5b      	ldrh	r3, [r3, #26]
 800cc64:	f003 0310 	and.w	r3, r3, #16
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d103      	bne.n	800cc74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cc6c:	4b68      	ldr	r3, [pc, #416]	; (800ce10 <tcp_process+0x2ac>)
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f001 fc2f 	bl	800e4e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7d1b      	ldrb	r3, [r3, #20]
 800cc8e:	3b02      	subs	r3, #2
 800cc90:	2b07      	cmp	r3, #7
 800cc92:	f200 8337 	bhi.w	800d304 <tcp_process+0x7a0>
 800cc96:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <tcp_process+0x138>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccbd 	.word	0x0800ccbd
 800cca0:	0800ceed 	.word	0x0800ceed
 800cca4:	0800d065 	.word	0x0800d065
 800cca8:	0800d08f 	.word	0x0800d08f
 800ccac:	0800d1b3 	.word	0x0800d1b3
 800ccb0:	0800d065 	.word	0x0800d065
 800ccb4:	0800d23f 	.word	0x0800d23f
 800ccb8:	0800d2cf 	.word	0x0800d2cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ccbc:	4b4f      	ldr	r3, [pc, #316]	; (800cdfc <tcp_process+0x298>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	f003 0310 	and.w	r3, r3, #16
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 80e4 	beq.w	800ce92 <tcp_process+0x32e>
 800ccca:	4b4c      	ldr	r3, [pc, #304]	; (800cdfc <tcp_process+0x298>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	f003 0302 	and.w	r3, r3, #2
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 80dd 	beq.w	800ce92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccdc:	1c5a      	adds	r2, r3, #1
 800ccde:	4b48      	ldr	r3, [pc, #288]	; (800ce00 <tcp_process+0x29c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	f040 80d5 	bne.w	800ce92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cce8:	4b46      	ldr	r3, [pc, #280]	; (800ce04 <tcp_process+0x2a0>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ccfa:	4b41      	ldr	r3, [pc, #260]	; (800ce00 <tcp_process+0x29c>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cd02:	4b44      	ldr	r3, [pc, #272]	; (800ce14 <tcp_process+0x2b0>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	89db      	ldrh	r3, [r3, #14]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cd1c:	4b39      	ldr	r3, [pc, #228]	; (800ce04 <tcp_process+0x2a0>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	1e5a      	subs	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2204      	movs	r2, #4
 800cd2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4618      	mov	r0, r3
 800cd36:	f004 fe51 	bl	80119dc <ip4_route>
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	461a      	mov	r2, r3
 800cd42:	4620      	mov	r0, r4
 800cd44:	f7ff f88c 	bl	800be60 <tcp_eff_send_mss_netif>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd54:	009a      	lsls	r2, r3, #2
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800cd60:	428b      	cmp	r3, r1
 800cd62:	bf38      	it	cc
 800cd64:	460b      	movcc	r3, r1
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d204      	bcs.n	800cd74 <tcp_process+0x210>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	e00d      	b.n	800cd90 <tcp_process+0x22c>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d904      	bls.n	800cd8c <tcp_process+0x228>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	e001      	b.n	800cd90 <tcp_process+0x22c>
 800cd8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <tcp_process+0x24a>
 800cda0:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <tcp_process+0x28c>)
 800cda2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cda6:	491c      	ldr	r1, [pc, #112]	; (800ce18 <tcp_process+0x2b4>)
 800cda8:	4813      	ldr	r0, [pc, #76]	; (800cdf8 <tcp_process+0x294>)
 800cdaa:	f006 faf1 	bl	8013390 <iprintf>
        --pcb->snd_queuelen;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d12a      	bne.n	800ce20 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <tcp_process+0x280>
 800cdd6:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <tcp_process+0x28c>)
 800cdd8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cddc:	490f      	ldr	r1, [pc, #60]	; (800ce1c <tcp_process+0x2b8>)
 800cdde:	4806      	ldr	r0, [pc, #24]	; (800cdf8 <tcp_process+0x294>)
 800cde0:	f006 fad6 	bl	8013390 <iprintf>
          pcb->unsent = rseg->next;
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	66da      	str	r2, [r3, #108]	; 0x6c
 800cdec:	e01c      	b.n	800ce28 <tcp_process+0x2c4>
 800cdee:	bf00      	nop
 800cdf0:	080155a8 	.word	0x080155a8
 800cdf4:	080157e0 	.word	0x080157e0
 800cdf8:	080155f4 	.word	0x080155f4
 800cdfc:	2000c98c 	.word	0x2000c98c
 800ce00:	2000c984 	.word	0x2000c984
 800ce04:	2000c980 	.word	0x2000c980
 800ce08:	080157fc 	.word	0x080157fc
 800ce0c:	2000c98d 	.word	0x2000c98d
 800ce10:	2000c948 	.word	0x2000c948
 800ce14:	2000c970 	.word	0x2000c970
 800ce18:	0801581c 	.word	0x0801581c
 800ce1c:	08015834 	.word	0x08015834
        } else {
          pcb->unacked = rseg->next;
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ce28:	69f8      	ldr	r0, [r7, #28]
 800ce2a:	f7fe fd22 	bl	800b872 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d104      	bne.n	800ce40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce3c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ce3e:	e006      	b.n	800ce4e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00a      	beq.n	800ce6e <tcp_process+0x30a>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	6910      	ldr	r0, [r2, #16]
 800ce62:	2200      	movs	r2, #0
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	4798      	blx	r3
 800ce68:	4603      	mov	r3, r0
 800ce6a:	76bb      	strb	r3, [r7, #26]
 800ce6c:	e001      	b.n	800ce72 <tcp_process+0x30e>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ce72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ce76:	f113 0f0d 	cmn.w	r3, #13
 800ce7a:	d102      	bne.n	800ce82 <tcp_process+0x31e>
          return ERR_ABRT;
 800ce7c:	f06f 030c 	mvn.w	r3, #12
 800ce80:	e250      	b.n	800d324 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	8b5b      	ldrh	r3, [r3, #26]
 800ce86:	f043 0302 	orr.w	r3, r3, #2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ce90:	e23a      	b.n	800d308 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ce92:	4b98      	ldr	r3, [pc, #608]	; (800d0f4 <tcp_process+0x590>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	f003 0310 	and.w	r3, r3, #16
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 8234 	beq.w	800d308 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cea0:	4b95      	ldr	r3, [pc, #596]	; (800d0f8 <tcp_process+0x594>)
 800cea2:	6819      	ldr	r1, [r3, #0]
 800cea4:	4b95      	ldr	r3, [pc, #596]	; (800d0fc <tcp_process+0x598>)
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b95      	ldr	r3, [pc, #596]	; (800d100 <tcp_process+0x59c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceb0:	4b94      	ldr	r3, [pc, #592]	; (800d104 <tcp_process+0x5a0>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceb4:	885b      	ldrh	r3, [r3, #2]
 800ceb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceb8:	4a92      	ldr	r2, [pc, #584]	; (800d104 <tcp_process+0x5a0>)
 800ceba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cebc:	8812      	ldrh	r2, [r2, #0]
 800cebe:	b292      	uxth	r2, r2
 800cec0:	9202      	str	r2, [sp, #8]
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	4b90      	ldr	r3, [pc, #576]	; (800d108 <tcp_process+0x5a4>)
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	4b90      	ldr	r3, [pc, #576]	; (800d10c <tcp_process+0x5a8>)
 800ceca:	4602      	mov	r2, r0
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f002 fc85 	bl	800f7dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ced8:	2b05      	cmp	r3, #5
 800ceda:	f200 8215 	bhi.w	800d308 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f002 fa4f 	bl	800f388 <tcp_rexmit_rto>
      break;
 800ceea:	e20d      	b.n	800d308 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ceec:	4b81      	ldr	r3, [pc, #516]	; (800d0f4 <tcp_process+0x590>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	f003 0310 	and.w	r3, r3, #16
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 80a1 	beq.w	800d03c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cefa:	4b7f      	ldr	r3, [pc, #508]	; (800d0f8 <tcp_process+0x594>)
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	3b01      	subs	r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	db7e      	blt.n	800d008 <tcp_process+0x4a4>
 800cf0a:	4b7b      	ldr	r3, [pc, #492]	; (800d0f8 <tcp_process+0x594>)
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dc77      	bgt.n	800d008 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cf26:	23fa      	movs	r3, #250	; 0xfa
 800cf28:	76bb      	strb	r3, [r7, #26]
 800cf2a:	e01d      	b.n	800cf68 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <tcp_process+0x3e0>
 800cf36:	4b76      	ldr	r3, [pc, #472]	; (800d110 <tcp_process+0x5ac>)
 800cf38:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800cf3c:	4975      	ldr	r1, [pc, #468]	; (800d114 <tcp_process+0x5b0>)
 800cf3e:	4876      	ldr	r0, [pc, #472]	; (800d118 <tcp_process+0x5b4>)
 800cf40:	f006 fa26 	bl	8013390 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf48:	699b      	ldr	r3, [r3, #24]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <tcp_process+0x400>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	6910      	ldr	r0, [r2, #16]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	6879      	ldr	r1, [r7, #4]
 800cf5c:	4798      	blx	r3
 800cf5e:	4603      	mov	r3, r0
 800cf60:	76bb      	strb	r3, [r7, #26]
 800cf62:	e001      	b.n	800cf68 <tcp_process+0x404>
 800cf64:	23f0      	movs	r3, #240	; 0xf0
 800cf66:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cf68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cf70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf74:	f113 0f0d 	cmn.w	r3, #13
 800cf78:	d002      	beq.n	800cf80 <tcp_process+0x41c>
              tcp_abort(pcb);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7fd ff8e 	bl	800ae9c <tcp_abort>
            }
            return ERR_ABRT;
 800cf80:	f06f 030c 	mvn.w	r3, #12
 800cf84:	e1ce      	b.n	800d324 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fae0 	bl	800d54c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cf8c:	4b63      	ldr	r3, [pc, #396]	; (800d11c <tcp_process+0x5b8>)
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d005      	beq.n	800cfa0 <tcp_process+0x43c>
            recv_acked--;
 800cf94:	4b61      	ldr	r3, [pc, #388]	; (800d11c <tcp_process+0x5b8>)
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	4b5f      	ldr	r3, [pc, #380]	; (800d11c <tcp_process+0x5b8>)
 800cf9e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfa4:	009a      	lsls	r2, r3, #2
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	f241 111c 	movw	r1, #4380	; 0x111c
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf38      	it	cc
 800cfb4:	460b      	movcc	r3, r1
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d204      	bcs.n	800cfc4 <tcp_process+0x460>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	e00d      	b.n	800cfe0 <tcp_process+0x47c>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	f241 121c 	movw	r2, #4380	; 0x111c
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d904      	bls.n	800cfdc <tcp_process+0x478>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	e001      	b.n	800cfe0 <tcp_process+0x47c>
 800cfdc:	f241 131c 	movw	r3, #4380	; 0x111c
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cfe6:	4b4e      	ldr	r3, [pc, #312]	; (800d120 <tcp_process+0x5bc>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d037      	beq.n	800d062 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8b5b      	ldrh	r3, [r3, #26]
 800cff6:	f043 0302 	orr.w	r3, r3, #2
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2207      	movs	r2, #7
 800d004:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d006:	e02c      	b.n	800d062 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d008:	4b3b      	ldr	r3, [pc, #236]	; (800d0f8 <tcp_process+0x594>)
 800d00a:	6819      	ldr	r1, [r3, #0]
 800d00c:	4b3b      	ldr	r3, [pc, #236]	; (800d0fc <tcp_process+0x598>)
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	4b3b      	ldr	r3, [pc, #236]	; (800d100 <tcp_process+0x59c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d018:	4b3a      	ldr	r3, [pc, #232]	; (800d104 <tcp_process+0x5a0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d01c:	885b      	ldrh	r3, [r3, #2]
 800d01e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d020:	4a38      	ldr	r2, [pc, #224]	; (800d104 <tcp_process+0x5a0>)
 800d022:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d024:	8812      	ldrh	r2, [r2, #0]
 800d026:	b292      	uxth	r2, r2
 800d028:	9202      	str	r2, [sp, #8]
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <tcp_process+0x5a4>)
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	4b36      	ldr	r3, [pc, #216]	; (800d10c <tcp_process+0x5a8>)
 800d032:	4602      	mov	r2, r0
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f002 fbd1 	bl	800f7dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d03a:	e167      	b.n	800d30c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d03c:	4b2d      	ldr	r3, [pc, #180]	; (800d0f4 <tcp_process+0x590>)
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8161 	beq.w	800d30c <tcp_process+0x7a8>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	1e5a      	subs	r2, r3, #1
 800d050:	4b2b      	ldr	r3, [pc, #172]	; (800d100 <tcp_process+0x59c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	f040 8159 	bne.w	800d30c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f002 f9b6 	bl	800f3cc <tcp_rexmit>
      break;
 800d060:	e154      	b.n	800d30c <tcp_process+0x7a8>
 800d062:	e153      	b.n	800d30c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fa71 	bl	800d54c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d06a:	4b2d      	ldr	r3, [pc, #180]	; (800d120 <tcp_process+0x5bc>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 814c 	beq.w	800d310 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	8b5b      	ldrh	r3, [r3, #26]
 800d07c:	f043 0302 	orr.w	r3, r3, #2
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2207      	movs	r2, #7
 800d08a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d08c:	e140      	b.n	800d310 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fa5c 	bl	800d54c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d094:	4b22      	ldr	r3, [pc, #136]	; (800d120 <tcp_process+0x5bc>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 0320 	and.w	r3, r3, #32
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d071      	beq.n	800d184 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0a0:	4b14      	ldr	r3, [pc, #80]	; (800d0f4 <tcp_process+0x590>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	f003 0310 	and.w	r3, r3, #16
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d060      	beq.n	800d16e <tcp_process+0x60a>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0b0:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <tcp_process+0x594>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d15a      	bne.n	800d16e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d156      	bne.n	800d16e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8b5b      	ldrh	r3, [r3, #26]
 800d0c4:	f043 0302 	orr.w	r3, r3, #2
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7fe fdbc 	bl	800bc4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d0d4:	4b13      	ldr	r3, [pc, #76]	; (800d124 <tcp_process+0x5c0>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d105      	bne.n	800d0ea <tcp_process+0x586>
 800d0de:	4b11      	ldr	r3, [pc, #68]	; (800d124 <tcp_process+0x5c0>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	4a0f      	ldr	r2, [pc, #60]	; (800d124 <tcp_process+0x5c0>)
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	e02e      	b.n	800d148 <tcp_process+0x5e4>
 800d0ea:	4b0e      	ldr	r3, [pc, #56]	; (800d124 <tcp_process+0x5c0>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	e027      	b.n	800d142 <tcp_process+0x5de>
 800d0f2:	bf00      	nop
 800d0f4:	2000c98c 	.word	0x2000c98c
 800d0f8:	2000c984 	.word	0x2000c984
 800d0fc:	2000c98a 	.word	0x2000c98a
 800d100:	2000c980 	.word	0x2000c980
 800d104:	2000c970 	.word	0x2000c970
 800d108:	20009204 	.word	0x20009204
 800d10c:	20009208 	.word	0x20009208
 800d110:	080155a8 	.word	0x080155a8
 800d114:	08015848 	.word	0x08015848
 800d118:	080155f4 	.word	0x080155f4
 800d11c:	2000c988 	.word	0x2000c988
 800d120:	2000c98d 	.word	0x2000c98d
 800d124:	2000c954 	.word	0x2000c954
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d104      	bne.n	800d13c <tcp_process+0x5d8>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	60da      	str	r2, [r3, #12]
 800d13a:	e005      	b.n	800d148 <tcp_process+0x5e4>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	617b      	str	r3, [r7, #20]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1ef      	bne.n	800d128 <tcp_process+0x5c4>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	60da      	str	r2, [r3, #12]
 800d14e:	4b77      	ldr	r3, [pc, #476]	; (800d32c <tcp_process+0x7c8>)
 800d150:	2201      	movs	r2, #1
 800d152:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	220a      	movs	r2, #10
 800d158:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d15a:	4b75      	ldr	r3, [pc, #468]	; (800d330 <tcp_process+0x7cc>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	60da      	str	r2, [r3, #12]
 800d162:	4a73      	ldr	r2, [pc, #460]	; (800d330 <tcp_process+0x7cc>)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	f002 fcfa 	bl	800fb60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d16c:	e0d2      	b.n	800d314 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	8b5b      	ldrh	r3, [r3, #26]
 800d172:	f043 0302 	orr.w	r3, r3, #2
 800d176:	b29a      	uxth	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2208      	movs	r2, #8
 800d180:	751a      	strb	r2, [r3, #20]
      break;
 800d182:	e0c7      	b.n	800d314 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d184:	4b6b      	ldr	r3, [pc, #428]	; (800d334 <tcp_process+0x7d0>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f003 0310 	and.w	r3, r3, #16
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 80c1 	beq.w	800d314 <tcp_process+0x7b0>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d196:	4b68      	ldr	r3, [pc, #416]	; (800d338 <tcp_process+0x7d4>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	f040 80ba 	bne.w	800d314 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f040 80b5 	bne.w	800d314 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2206      	movs	r2, #6
 800d1ae:	751a      	strb	r2, [r3, #20]
      break;
 800d1b0:	e0b0      	b.n	800d314 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f9ca 	bl	800d54c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d1b8:	4b60      	ldr	r3, [pc, #384]	; (800d33c <tcp_process+0x7d8>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 80a9 	beq.w	800d318 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ca:	f043 0302 	orr.w	r3, r3, #2
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7fe fd39 	bl	800bc4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d1da:	4b59      	ldr	r3, [pc, #356]	; (800d340 <tcp_process+0x7dc>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d105      	bne.n	800d1f0 <tcp_process+0x68c>
 800d1e4:	4b56      	ldr	r3, [pc, #344]	; (800d340 <tcp_process+0x7dc>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	4a55      	ldr	r2, [pc, #340]	; (800d340 <tcp_process+0x7dc>)
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	e013      	b.n	800d218 <tcp_process+0x6b4>
 800d1f0:	4b53      	ldr	r3, [pc, #332]	; (800d340 <tcp_process+0x7dc>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	613b      	str	r3, [r7, #16]
 800d1f6:	e00c      	b.n	800d212 <tcp_process+0x6ae>
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d104      	bne.n	800d20c <tcp_process+0x6a8>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68da      	ldr	r2, [r3, #12]
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	60da      	str	r2, [r3, #12]
 800d20a:	e005      	b.n	800d218 <tcp_process+0x6b4>
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	613b      	str	r3, [r7, #16]
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1ef      	bne.n	800d1f8 <tcp_process+0x694>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	4b43      	ldr	r3, [pc, #268]	; (800d32c <tcp_process+0x7c8>)
 800d220:	2201      	movs	r2, #1
 800d222:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	220a      	movs	r2, #10
 800d228:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d22a:	4b41      	ldr	r3, [pc, #260]	; (800d330 <tcp_process+0x7cc>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	60da      	str	r2, [r3, #12]
 800d232:	4a3f      	ldr	r2, [pc, #252]	; (800d330 <tcp_process+0x7cc>)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	f002 fc92 	bl	800fb60 <tcp_timer_needed>
      }
      break;
 800d23c:	e06c      	b.n	800d318 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f984 	bl	800d54c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d244:	4b3b      	ldr	r3, [pc, #236]	; (800d334 <tcp_process+0x7d0>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d065      	beq.n	800d31c <tcp_process+0x7b8>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d254:	4b38      	ldr	r3, [pc, #224]	; (800d338 <tcp_process+0x7d4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d15f      	bne.n	800d31c <tcp_process+0x7b8>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d15b      	bne.n	800d31c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7fe fcf1 	bl	800bc4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d26a:	4b35      	ldr	r3, [pc, #212]	; (800d340 <tcp_process+0x7dc>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d105      	bne.n	800d280 <tcp_process+0x71c>
 800d274:	4b32      	ldr	r3, [pc, #200]	; (800d340 <tcp_process+0x7dc>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	4a31      	ldr	r2, [pc, #196]	; (800d340 <tcp_process+0x7dc>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	e013      	b.n	800d2a8 <tcp_process+0x744>
 800d280:	4b2f      	ldr	r3, [pc, #188]	; (800d340 <tcp_process+0x7dc>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	e00c      	b.n	800d2a2 <tcp_process+0x73e>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d104      	bne.n	800d29c <tcp_process+0x738>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	68da      	ldr	r2, [r3, #12]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	60da      	str	r2, [r3, #12]
 800d29a:	e005      	b.n	800d2a8 <tcp_process+0x744>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1ef      	bne.n	800d288 <tcp_process+0x724>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	60da      	str	r2, [r3, #12]
 800d2ae:	4b1f      	ldr	r3, [pc, #124]	; (800d32c <tcp_process+0x7c8>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	220a      	movs	r2, #10
 800d2b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d2ba:	4b1d      	ldr	r3, [pc, #116]	; (800d330 <tcp_process+0x7cc>)
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	60da      	str	r2, [r3, #12]
 800d2c2:	4a1b      	ldr	r2, [pc, #108]	; (800d330 <tcp_process+0x7cc>)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	f002 fc4a 	bl	800fb60 <tcp_timer_needed>
      }
      break;
 800d2cc:	e026      	b.n	800d31c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f93c 	bl	800d54c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d2d4:	4b17      	ldr	r3, [pc, #92]	; (800d334 <tcp_process+0x7d0>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01f      	beq.n	800d320 <tcp_process+0x7bc>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2e4:	4b14      	ldr	r3, [pc, #80]	; (800d338 <tcp_process+0x7d4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d119      	bne.n	800d320 <tcp_process+0x7bc>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d115      	bne.n	800d320 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d2f4:	4b11      	ldr	r3, [pc, #68]	; (800d33c <tcp_process+0x7d8>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f043 0310 	orr.w	r3, r3, #16
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b0f      	ldr	r3, [pc, #60]	; (800d33c <tcp_process+0x7d8>)
 800d300:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d302:	e00d      	b.n	800d320 <tcp_process+0x7bc>
    default:
      break;
 800d304:	bf00      	nop
 800d306:	e00c      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d308:	bf00      	nop
 800d30a:	e00a      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d30c:	bf00      	nop
 800d30e:	e008      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d310:	bf00      	nop
 800d312:	e006      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d314:	bf00      	nop
 800d316:	e004      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d318:	bf00      	nop
 800d31a:	e002      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d31c:	bf00      	nop
 800d31e:	e000      	b.n	800d322 <tcp_process+0x7be>
      break;
 800d320:	bf00      	nop
  }
  return ERR_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3724      	adds	r7, #36	; 0x24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}
 800d32c:	2000c95c 	.word	0x2000c95c
 800d330:	2000c958 	.word	0x2000c958
 800d334:	2000c98c 	.word	0x2000c98c
 800d338:	2000c984 	.word	0x2000c984
 800d33c:	2000c98d 	.word	0x2000c98d
 800d340:	2000c954 	.word	0x2000c954

0800d344 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <tcp_oos_insert_segment+0x1e>
 800d354:	4b3b      	ldr	r3, [pc, #236]	; (800d444 <tcp_oos_insert_segment+0x100>)
 800d356:	f240 421f 	movw	r2, #1055	; 0x41f
 800d35a:	493b      	ldr	r1, [pc, #236]	; (800d448 <tcp_oos_insert_segment+0x104>)
 800d35c:	483b      	ldr	r0, [pc, #236]	; (800d44c <tcp_oos_insert_segment+0x108>)
 800d35e:	f006 f817 	bl	8013390 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	899b      	ldrh	r3, [r3, #12]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fb fc00 	bl	8008b70 <lwip_htons>
 800d370:	4603      	mov	r3, r0
 800d372:	b2db      	uxtb	r3, r3
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d028      	beq.n	800d3ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d37c:	6838      	ldr	r0, [r7, #0]
 800d37e:	f7fe fa63 	bl	800b848 <tcp_segs_free>
    next = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	e056      	b.n	800d436 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	899b      	ldrh	r3, [r3, #12]
 800d38e:	b29b      	uxth	r3, r3
 800d390:	4618      	mov	r0, r3
 800d392:	f7fb fbed 	bl	8008b70 <lwip_htons>
 800d396:	4603      	mov	r3, r0
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00d      	beq.n	800d3be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	899b      	ldrh	r3, [r3, #12]
 800d3a8:	b29c      	uxth	r4, r3
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	f7fb fbe0 	bl	8008b70 <lwip_htons>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	4322      	orrs	r2, r4
 800d3ba:	b292      	uxth	r2, r2
 800d3bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7fe fa52 	bl	800b872 <tcp_seg_free>
    while (next &&
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00e      	beq.n	800d3f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	891b      	ldrh	r3, [r3, #8]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4b1d      	ldr	r3, [pc, #116]	; (800d450 <tcp_oos_insert_segment+0x10c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	441a      	add	r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	6839      	ldr	r1, [r7, #0]
 800d3e8:	8909      	ldrh	r1, [r1, #8]
 800d3ea:	440b      	add	r3, r1
 800d3ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	daca      	bge.n	800d388 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01e      	beq.n	800d436 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	891b      	ldrh	r3, [r3, #8]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4b14      	ldr	r3, [pc, #80]	; (800d450 <tcp_oos_insert_segment+0x10c>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	441a      	add	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	dd12      	ble.n	800d436 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	b29a      	uxth	r2, r3
 800d418:	4b0d      	ldr	r3, [pc, #52]	; (800d450 <tcp_oos_insert_segment+0x10c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	b29a      	uxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	891b      	ldrh	r3, [r3, #8]
 800d42e:	4619      	mov	r1, r3
 800d430:	4610      	mov	r0, r2
 800d432:	f7fc fe09 	bl	800a048 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	601a      	str	r2, [r3, #0]
}
 800d43c:	bf00      	nop
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	bd90      	pop	{r4, r7, pc}
 800d444:	080155a8 	.word	0x080155a8
 800d448:	08015868 	.word	0x08015868
 800d44c:	080155f4 	.word	0x080155f4
 800d450:	2000c980 	.word	0x2000c980

0800d454 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d454:	b5b0      	push	{r4, r5, r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d462:	e03e      	b.n	800d4e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	4618      	mov	r0, r3
 800d474:	f7fc fffc 	bl	800a470 <pbuf_clen>
 800d478:	4603      	mov	r3, r0
 800d47a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d482:	8a7a      	ldrh	r2, [r7, #18]
 800d484:	429a      	cmp	r2, r3
 800d486:	d906      	bls.n	800d496 <tcp_free_acked_segments+0x42>
 800d488:	4b2a      	ldr	r3, [pc, #168]	; (800d534 <tcp_free_acked_segments+0xe0>)
 800d48a:	f240 4257 	movw	r2, #1111	; 0x457
 800d48e:	492a      	ldr	r1, [pc, #168]	; (800d538 <tcp_free_acked_segments+0xe4>)
 800d490:	482a      	ldr	r0, [pc, #168]	; (800d53c <tcp_free_acked_segments+0xe8>)
 800d492:	f005 ff7d 	bl	8013390 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d49c:	8a7b      	ldrh	r3, [r7, #18]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	891a      	ldrh	r2, [r3, #8]
 800d4ac:	4b24      	ldr	r3, [pc, #144]	; (800d540 <tcp_free_acked_segments+0xec>)
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	4b22      	ldr	r3, [pc, #136]	; (800d540 <tcp_free_acked_segments+0xec>)
 800d4b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d4b8:	6978      	ldr	r0, [r7, #20]
 800d4ba:	f7fe f9da 	bl	800b872 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00c      	beq.n	800d4e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d109      	bne.n	800d4e2 <tcp_free_acked_segments+0x8e>
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d106      	bne.n	800d4e2 <tcp_free_acked_segments+0x8e>
 800d4d4:	4b17      	ldr	r3, [pc, #92]	; (800d534 <tcp_free_acked_segments+0xe0>)
 800d4d6:	f240 4261 	movw	r2, #1121	; 0x461
 800d4da:	491a      	ldr	r1, [pc, #104]	; (800d544 <tcp_free_acked_segments+0xf0>)
 800d4dc:	4817      	ldr	r0, [pc, #92]	; (800d53c <tcp_free_acked_segments+0xe8>)
 800d4de:	f005 ff57 	bl	8013390 <iprintf>
  while (seg_list != NULL &&
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d020      	beq.n	800d52a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fb fb53 	bl	8008b9a <lwip_htonl>
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	891b      	ldrh	r3, [r3, #8]
 800d4fa:	461d      	mov	r5, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	899b      	ldrh	r3, [r3, #12]
 800d502:	b29b      	uxth	r3, r3
 800d504:	4618      	mov	r0, r3
 800d506:	f7fb fb33 	bl	8008b70 <lwip_htons>
 800d50a:	4603      	mov	r3, r0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 0303 	and.w	r3, r3, #3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <tcp_free_acked_segments+0xc6>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <tcp_free_acked_segments+0xc8>
 800d51a:	2300      	movs	r3, #0
 800d51c:	442b      	add	r3, r5
 800d51e:	18e2      	adds	r2, r4, r3
 800d520:	4b09      	ldr	r3, [pc, #36]	; (800d548 <tcp_free_acked_segments+0xf4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d526:	2b00      	cmp	r3, #0
 800d528:	dd9c      	ble.n	800d464 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d52a:	68bb      	ldr	r3, [r7, #8]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bdb0      	pop	{r4, r5, r7, pc}
 800d534:	080155a8 	.word	0x080155a8
 800d538:	08015890 	.word	0x08015890
 800d53c:	080155f4 	.word	0x080155f4
 800d540:	2000c988 	.word	0x2000c988
 800d544:	080158b8 	.word	0x080158b8
 800d548:	2000c984 	.word	0x2000c984

0800d54c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b094      	sub	sp, #80	; 0x50
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <tcp_receive+0x20>
 800d55e:	4b91      	ldr	r3, [pc, #580]	; (800d7a4 <tcp_receive+0x258>)
 800d560:	f240 427b 	movw	r2, #1147	; 0x47b
 800d564:	4990      	ldr	r1, [pc, #576]	; (800d7a8 <tcp_receive+0x25c>)
 800d566:	4891      	ldr	r0, [pc, #580]	; (800d7ac <tcp_receive+0x260>)
 800d568:	f005 ff12 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	7d1b      	ldrb	r3, [r3, #20]
 800d570:	2b03      	cmp	r3, #3
 800d572:	d806      	bhi.n	800d582 <tcp_receive+0x36>
 800d574:	4b8b      	ldr	r3, [pc, #556]	; (800d7a4 <tcp_receive+0x258>)
 800d576:	f240 427c 	movw	r2, #1148	; 0x47c
 800d57a:	498d      	ldr	r1, [pc, #564]	; (800d7b0 <tcp_receive+0x264>)
 800d57c:	488b      	ldr	r0, [pc, #556]	; (800d7ac <tcp_receive+0x260>)
 800d57e:	f005 ff07 	bl	8013390 <iprintf>

  if (flags & TCP_ACK) {
 800d582:	4b8c      	ldr	r3, [pc, #560]	; (800d7b4 <tcp_receive+0x268>)
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	f003 0310 	and.w	r3, r3, #16
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f000 8264 	beq.w	800da58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d596:	461a      	mov	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d59c:	4413      	add	r3, r2
 800d59e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5a4:	4b84      	ldr	r3, [pc, #528]	; (800d7b8 <tcp_receive+0x26c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	db1b      	blt.n	800d5e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5b2:	4b81      	ldr	r3, [pc, #516]	; (800d7b8 <tcp_receive+0x26c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d106      	bne.n	800d5c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5be:	4b7f      	ldr	r3, [pc, #508]	; (800d7bc <tcp_receive+0x270>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	db0e      	blt.n	800d5e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5cc:	4b7b      	ldr	r3, [pc, #492]	; (800d7bc <tcp_receive+0x270>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d125      	bne.n	800d620 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d5d4:	4b7a      	ldr	r3, [pc, #488]	; (800d7c0 <tcp_receive+0x274>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	89db      	ldrh	r3, [r3, #14]
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d91c      	bls.n	800d620 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d5e6:	4b76      	ldr	r3, [pc, #472]	; (800d7c0 <tcp_receive+0x274>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	89db      	ldrh	r3, [r3, #14]
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d600:	429a      	cmp	r2, r3
 800d602:	d205      	bcs.n	800d610 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d610:	4b69      	ldr	r3, [pc, #420]	; (800d7b8 <tcp_receive+0x26c>)
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d618:	4b68      	ldr	r3, [pc, #416]	; (800d7bc <tcp_receive+0x270>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d620:	4b66      	ldr	r3, [pc, #408]	; (800d7bc <tcp_receive+0x270>)
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dc58      	bgt.n	800d6e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d62e:	4b65      	ldr	r3, [pc, #404]	; (800d7c4 <tcp_receive+0x278>)
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d14b      	bne.n	800d6ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d640:	4413      	add	r3, r2
 800d642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d644:	429a      	cmp	r2, r3
 800d646:	d142      	bne.n	800d6ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d64e:	2b00      	cmp	r3, #0
 800d650:	db3d      	blt.n	800d6ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d656:	4b59      	ldr	r3, [pc, #356]	; (800d7bc <tcp_receive+0x270>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d137      	bne.n	800d6ce <tcp_receive+0x182>
              found_dupack = 1;
 800d65e:	2301      	movs	r3, #1
 800d660:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d668:	2bff      	cmp	r3, #255	; 0xff
 800d66a:	d007      	beq.n	800d67c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d672:	3301      	adds	r3, #1
 800d674:	b2da      	uxtb	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d682:	2b03      	cmp	r3, #3
 800d684:	d91b      	bls.n	800d6be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d690:	4413      	add	r3, r2
 800d692:	b29a      	uxth	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d30a      	bcc.n	800d6b4 <tcp_receive+0x168>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6a8:	4413      	add	r3, r2
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d6b2:	e004      	b.n	800d6be <tcp_receive+0x172>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d902      	bls.n	800d6ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 feeb 	bl	800f4a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f040 8161 	bne.w	800d998 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6de:	e15b      	b.n	800d998 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d6e0:	4b36      	ldr	r3, [pc, #216]	; (800d7bc <tcp_receive+0x270>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f2c0 814e 	blt.w	800d98e <tcp_receive+0x442>
 800d6f2:	4b32      	ldr	r3, [pc, #200]	; (800d7bc <tcp_receive+0x270>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f300 8146 	bgt.w	800d98e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	8b5b      	ldrh	r3, [r3, #26]
 800d706:	f003 0304 	and.w	r3, r3, #4
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d010      	beq.n	800d730 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	8b5b      	ldrh	r3, [r3, #26]
 800d712:	f023 0304 	bic.w	r3, r3, #4
 800d716:	b29a      	uxth	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d73e:	10db      	asrs	r3, r3, #3
 800d740:	b21b      	sxth	r3, r3
 800d742:	b29a      	uxth	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4413      	add	r3, r2
 800d74e:	b29b      	uxth	r3, r3
 800d750:	b21a      	sxth	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d758:	4b18      	ldr	r3, [pc, #96]	; (800d7bc <tcp_receive+0x270>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d762:	b29b      	uxth	r3, r3
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d770:	4b12      	ldr	r3, [pc, #72]	; (800d7bc <tcp_receive+0x270>)
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7d1b      	ldrb	r3, [r3, #20]
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	f240 8097 	bls.w	800d8b0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d78e:	429a      	cmp	r2, r3
 800d790:	d245      	bcs.n	800d81e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	8b5b      	ldrh	r3, [r3, #26]
 800d796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d014      	beq.n	800d7c8 <tcp_receive+0x27c>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e013      	b.n	800d7ca <tcp_receive+0x27e>
 800d7a2:	bf00      	nop
 800d7a4:	080155a8 	.word	0x080155a8
 800d7a8:	080158d8 	.word	0x080158d8
 800d7ac:	080155f4 	.word	0x080155f4
 800d7b0:	080158f4 	.word	0x080158f4
 800d7b4:	2000c98c 	.word	0x2000c98c
 800d7b8:	2000c980 	.word	0x2000c980
 800d7bc:	2000c984 	.word	0x2000c984
 800d7c0:	2000c970 	.word	0x2000c970
 800d7c4:	2000c98a 	.word	0x2000c98a
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d7ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7d8:	fb12 f303 	smulbb	r3, r2, r3
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	bf28      	it	cs
 800d7e4:	4613      	movcs	r3, r2
 800d7e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d7f0:	4413      	add	r3, r2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d309      	bcc.n	800d812 <tcp_receive+0x2c6>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d804:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d806:	4413      	add	r3, r2
 800d808:	b29a      	uxth	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d810:	e04e      	b.n	800d8b0 <tcp_receive+0x364>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d81c:	e048      	b.n	800d8b0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d824:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d826:	4413      	add	r3, r2
 800d828:	b29a      	uxth	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d830:	429a      	cmp	r2, r3
 800d832:	d309      	bcc.n	800d848 <tcp_receive+0x2fc>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d83a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d83c:	4413      	add	r3, r2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d846:	e004      	b.n	800d852 <tcp_receive+0x306>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d84e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d85e:	429a      	cmp	r2, r3
 800d860:	d326      	bcc.n	800d8b0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	b29a      	uxth	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d882:	4413      	add	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d30a      	bcc.n	800d8a6 <tcp_receive+0x35a>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d89a:	4413      	add	r3, r2
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8a4:	e004      	b.n	800d8b0 <tcp_receive+0x364>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b8:	4a98      	ldr	r2, [pc, #608]	; (800db1c <tcp_receive+0x5d0>)
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff fdca 	bl	800d454 <tcp_free_acked_segments>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ce:	4a94      	ldr	r2, [pc, #592]	; (800db20 <tcp_receive+0x5d4>)
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff fdbf 	bl	800d454 <tcp_free_acked_segments>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d104      	bne.n	800d8ee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ea:	861a      	strh	r2, [r3, #48]	; 0x30
 800d8ec:	e002      	b.n	800d8f4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d103      	bne.n	800d90a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d910:	4b84      	ldr	r3, [pc, #528]	; (800db24 <tcp_receive+0x5d8>)
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	4413      	add	r3, r2
 800d916:	b29a      	uxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	8b5b      	ldrh	r3, [r3, #26]
 800d922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d926:	2b00      	cmp	r3, #0
 800d928:	d035      	beq.n	800d996 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d118      	bne.n	800d964 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00c      	beq.n	800d954 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	4618      	mov	r0, r3
 800d948:	f7fb f927 	bl	8008b9a <lwip_htonl>
 800d94c:	4603      	mov	r3, r0
 800d94e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d950:	2b00      	cmp	r3, #0
 800d952:	dc20      	bgt.n	800d996 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	8b5b      	ldrh	r3, [r3, #26]
 800d958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d962:	e018      	b.n	800d996 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	f7fb f912 	bl	8008b9a <lwip_htonl>
 800d976:	4603      	mov	r3, r0
 800d978:	1ae3      	subs	r3, r4, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	dc0b      	bgt.n	800d996 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	8b5b      	ldrh	r3, [r3, #26]
 800d982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d98c:	e003      	b.n	800d996 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f001 ff76 	bl	800f880 <tcp_send_empty_ack>
 800d994:	e000      	b.n	800d998 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d996:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d05b      	beq.n	800da58 <tcp_receive+0x50c>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9a4:	4b60      	ldr	r3, [pc, #384]	; (800db28 <tcp_receive+0x5dc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	da54      	bge.n	800da58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d9ae:	4b5f      	ldr	r3, [pc, #380]	; (800db2c <tcp_receive+0x5e0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d9c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d9cc:	10db      	asrs	r3, r3, #3
 800d9ce:	b21b      	sxth	r3, r3
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	b21a      	sxth	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d9f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	da05      	bge.n	800da04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d9f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d9fc:	425b      	negs	r3, r3
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800da04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da0e:	109b      	asrs	r3, r3, #2
 800da10:	b21b      	sxth	r3, r3
 800da12:	b29b      	uxth	r3, r3
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	b29b      	uxth	r3, r3
 800da18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da22:	b29a      	uxth	r2, r3
 800da24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da28:	4413      	add	r3, r2
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	b21a      	sxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da38:	10db      	asrs	r3, r3, #3
 800da3a:	b21b      	sxth	r3, r3
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da44:	b29b      	uxth	r3, r3
 800da46:	4413      	add	r3, r2
 800da48:	b29b      	uxth	r3, r3
 800da4a:	b21a      	sxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800da58:	4b35      	ldr	r3, [pc, #212]	; (800db30 <tcp_receive+0x5e4>)
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 84e2 	beq.w	800e426 <tcp_receive+0xeda>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7d1b      	ldrb	r3, [r3, #20]
 800da66:	2b06      	cmp	r3, #6
 800da68:	f200 84dd 	bhi.w	800e426 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da70:	4b30      	ldr	r3, [pc, #192]	; (800db34 <tcp_receive+0x5e8>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	3b01      	subs	r3, #1
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f2c0 808f 	blt.w	800db9c <tcp_receive+0x650>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da82:	4b2b      	ldr	r3, [pc, #172]	; (800db30 <tcp_receive+0x5e4>)
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	4619      	mov	r1, r3
 800da88:	4b2a      	ldr	r3, [pc, #168]	; (800db34 <tcp_receive+0x5e8>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	440b      	add	r3, r1
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	3301      	adds	r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	f300 8082 	bgt.w	800db9c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800da98:	4b27      	ldr	r3, [pc, #156]	; (800db38 <tcp_receive+0x5ec>)
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daa2:	4b24      	ldr	r3, [pc, #144]	; (800db34 <tcp_receive+0x5e8>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800daaa:	4b23      	ldr	r3, [pc, #140]	; (800db38 <tcp_receive+0x5ec>)
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d106      	bne.n	800dac0 <tcp_receive+0x574>
 800dab2:	4b22      	ldr	r3, [pc, #136]	; (800db3c <tcp_receive+0x5f0>)
 800dab4:	f240 5294 	movw	r2, #1428	; 0x594
 800dab8:	4921      	ldr	r1, [pc, #132]	; (800db40 <tcp_receive+0x5f4>)
 800daba:	4822      	ldr	r0, [pc, #136]	; (800db44 <tcp_receive+0x5f8>)
 800dabc:	f005 fc68 	bl	8013390 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d906      	bls.n	800dad8 <tcp_receive+0x58c>
 800daca:	4b1c      	ldr	r3, [pc, #112]	; (800db3c <tcp_receive+0x5f0>)
 800dacc:	f240 5295 	movw	r2, #1429	; 0x595
 800dad0:	491d      	ldr	r1, [pc, #116]	; (800db48 <tcp_receive+0x5fc>)
 800dad2:	481c      	ldr	r0, [pc, #112]	; (800db44 <tcp_receive+0x5f8>)
 800dad4:	f005 fc5c 	bl	8013390 <iprintf>
      off = (u16_t)off32;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dade:	4b16      	ldr	r3, [pc, #88]	; (800db38 <tcp_receive+0x5ec>)
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	891b      	ldrh	r3, [r3, #8]
 800dae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dae8:	429a      	cmp	r2, r3
 800daea:	d906      	bls.n	800dafa <tcp_receive+0x5ae>
 800daec:	4b13      	ldr	r3, [pc, #76]	; (800db3c <tcp_receive+0x5f0>)
 800daee:	f240 5297 	movw	r2, #1431	; 0x597
 800daf2:	4916      	ldr	r1, [pc, #88]	; (800db4c <tcp_receive+0x600>)
 800daf4:	4813      	ldr	r0, [pc, #76]	; (800db44 <tcp_receive+0x5f8>)
 800daf6:	f005 fc4b 	bl	8013390 <iprintf>
      inseg.len -= off;
 800dafa:	4b0f      	ldr	r3, [pc, #60]	; (800db38 <tcp_receive+0x5ec>)
 800dafc:	891a      	ldrh	r2, [r3, #8]
 800dafe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	b29a      	uxth	r2, r3
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <tcp_receive+0x5ec>)
 800db08:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800db0a:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <tcp_receive+0x5ec>)
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	891a      	ldrh	r2, [r3, #8]
 800db10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800db18:	e02a      	b.n	800db70 <tcp_receive+0x624>
 800db1a:	bf00      	nop
 800db1c:	08015910 	.word	0x08015910
 800db20:	08015918 	.word	0x08015918
 800db24:	2000c988 	.word	0x2000c988
 800db28:	2000c984 	.word	0x2000c984
 800db2c:	2000c948 	.word	0x2000c948
 800db30:	2000c98a 	.word	0x2000c98a
 800db34:	2000c980 	.word	0x2000c980
 800db38:	2000c960 	.word	0x2000c960
 800db3c:	080155a8 	.word	0x080155a8
 800db40:	08015920 	.word	0x08015920
 800db44:	080155f4 	.word	0x080155f4
 800db48:	08015930 	.word	0x08015930
 800db4c:	08015940 	.word	0x08015940
        off -= p->len;
 800db50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db52:	895b      	ldrh	r3, [r3, #10]
 800db54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800db5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800db64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db66:	2200      	movs	r2, #0
 800db68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800db6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800db70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db72:	895b      	ldrh	r3, [r3, #10]
 800db74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800db78:	429a      	cmp	r2, r3
 800db7a:	d8e9      	bhi.n	800db50 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800db7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db80:	4619      	mov	r1, r3
 800db82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800db84:	f7fc fb60 	bl	800a248 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	4a91      	ldr	r2, [pc, #580]	; (800ddd4 <tcp_receive+0x888>)
 800db8e:	6013      	str	r3, [r2, #0]
 800db90:	4b91      	ldr	r3, [pc, #580]	; (800ddd8 <tcp_receive+0x88c>)
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	4a8f      	ldr	r2, [pc, #572]	; (800ddd4 <tcp_receive+0x888>)
 800db96:	6812      	ldr	r2, [r2, #0]
 800db98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800db9a:	e00d      	b.n	800dbb8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800db9c:	4b8d      	ldr	r3, [pc, #564]	; (800ddd4 <tcp_receive+0x888>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da06      	bge.n	800dbb8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8b5b      	ldrh	r3, [r3, #26]
 800dbae:	f043 0302 	orr.w	r3, r3, #2
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dbb8:	4b86      	ldr	r3, [pc, #536]	; (800ddd4 <tcp_receive+0x888>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f2c0 842a 	blt.w	800e41c <tcp_receive+0xed0>
 800dbc8:	4b82      	ldr	r3, [pc, #520]	; (800ddd4 <tcp_receive+0x888>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbd4:	440b      	add	r3, r1
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	3301      	adds	r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f300 841e 	bgt.w	800e41c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbe4:	4b7b      	ldr	r3, [pc, #492]	; (800ddd4 <tcp_receive+0x888>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	f040 829a 	bne.w	800e122 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dbee:	4b7a      	ldr	r3, [pc, #488]	; (800ddd8 <tcp_receive+0x88c>)
 800dbf0:	891c      	ldrh	r4, [r3, #8]
 800dbf2:	4b79      	ldr	r3, [pc, #484]	; (800ddd8 <tcp_receive+0x88c>)
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	899b      	ldrh	r3, [r3, #12]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fa ffb8 	bl	8008b70 <lwip_htons>
 800dc00:	4603      	mov	r3, r0
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 0303 	and.w	r3, r3, #3
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <tcp_receive+0x6c4>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e000      	b.n	800dc12 <tcp_receive+0x6c6>
 800dc10:	2300      	movs	r3, #0
 800dc12:	4423      	add	r3, r4
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	4b71      	ldr	r3, [pc, #452]	; (800dddc <tcp_receive+0x890>)
 800dc18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc1e:	4b6f      	ldr	r3, [pc, #444]	; (800dddc <tcp_receive+0x890>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d275      	bcs.n	800dd12 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc26:	4b6c      	ldr	r3, [pc, #432]	; (800ddd8 <tcp_receive+0x88c>)
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	899b      	ldrh	r3, [r3, #12]
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fa ff9e 	bl	8008b70 <lwip_htons>
 800dc34:	4603      	mov	r3, r0
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d01f      	beq.n	800dc80 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dc40:	4b65      	ldr	r3, [pc, #404]	; (800ddd8 <tcp_receive+0x88c>)
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	899b      	ldrh	r3, [r3, #12]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	b21b      	sxth	r3, r3
 800dc4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dc4e:	b21c      	sxth	r4, r3
 800dc50:	4b61      	ldr	r3, [pc, #388]	; (800ddd8 <tcp_receive+0x88c>)
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fa ff89 	bl	8008b70 <lwip_htons>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fa ff80 	bl	8008b70 <lwip_htons>
 800dc70:	4603      	mov	r3, r0
 800dc72:	b21b      	sxth	r3, r3
 800dc74:	4323      	orrs	r3, r4
 800dc76:	b21a      	sxth	r2, r3
 800dc78:	4b57      	ldr	r3, [pc, #348]	; (800ddd8 <tcp_receive+0x88c>)
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	b292      	uxth	r2, r2
 800dc7e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc84:	4b54      	ldr	r3, [pc, #336]	; (800ddd8 <tcp_receive+0x88c>)
 800dc86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dc88:	4b53      	ldr	r3, [pc, #332]	; (800ddd8 <tcp_receive+0x88c>)
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	899b      	ldrh	r3, [r3, #12]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fa ff6d 	bl	8008b70 <lwip_htons>
 800dc96:	4603      	mov	r3, r0
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <tcp_receive+0x762>
            inseg.len -= 1;
 800dca2:	4b4d      	ldr	r3, [pc, #308]	; (800ddd8 <tcp_receive+0x88c>)
 800dca4:	891b      	ldrh	r3, [r3, #8]
 800dca6:	3b01      	subs	r3, #1
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	4b4b      	ldr	r3, [pc, #300]	; (800ddd8 <tcp_receive+0x88c>)
 800dcac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dcae:	4b4a      	ldr	r3, [pc, #296]	; (800ddd8 <tcp_receive+0x88c>)
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	4a49      	ldr	r2, [pc, #292]	; (800ddd8 <tcp_receive+0x88c>)
 800dcb4:	8912      	ldrh	r2, [r2, #8]
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fc f9c5 	bl	800a048 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dcbe:	4b46      	ldr	r3, [pc, #280]	; (800ddd8 <tcp_receive+0x88c>)
 800dcc0:	891c      	ldrh	r4, [r3, #8]
 800dcc2:	4b45      	ldr	r3, [pc, #276]	; (800ddd8 <tcp_receive+0x88c>)
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	899b      	ldrh	r3, [r3, #12]
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fa ff50 	bl	8008b70 <lwip_htons>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 0303 	and.w	r3, r3, #3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <tcp_receive+0x794>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e000      	b.n	800dce2 <tcp_receive+0x796>
 800dce0:	2300      	movs	r3, #0
 800dce2:	4423      	add	r3, r4
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	4b3d      	ldr	r3, [pc, #244]	; (800dddc <tcp_receive+0x890>)
 800dce8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dcea:	4b3c      	ldr	r3, [pc, #240]	; (800dddc <tcp_receive+0x890>)
 800dcec:	881b      	ldrh	r3, [r3, #0]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	4b38      	ldr	r3, [pc, #224]	; (800ddd4 <tcp_receive+0x888>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfa:	6879      	ldr	r1, [r7, #4]
 800dcfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcfe:	440b      	add	r3, r1
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d006      	beq.n	800dd12 <tcp_receive+0x7c6>
 800dd04:	4b36      	ldr	r3, [pc, #216]	; (800dde0 <tcp_receive+0x894>)
 800dd06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800dd0a:	4936      	ldr	r1, [pc, #216]	; (800dde4 <tcp_receive+0x898>)
 800dd0c:	4836      	ldr	r0, [pc, #216]	; (800dde8 <tcp_receive+0x89c>)
 800dd0e:	f005 fb3f 	bl	8013390 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 80e7 	beq.w	800deea <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd1c:	4b2e      	ldr	r3, [pc, #184]	; (800ddd8 <tcp_receive+0x88c>)
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	899b      	ldrh	r3, [r3, #12]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fa ff23 	bl	8008b70 <lwip_htons>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d010      	beq.n	800dd58 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800dd36:	e00a      	b.n	800dd4e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7fd fd92 	bl	800b872 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1f0      	bne.n	800dd38 <tcp_receive+0x7ec>
 800dd56:	e0c8      	b.n	800deea <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800dd5e:	e052      	b.n	800de06 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	899b      	ldrh	r3, [r3, #12]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fa ff01 	bl	8008b70 <lwip_htons>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d03d      	beq.n	800ddf6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dd7a:	4b17      	ldr	r3, [pc, #92]	; (800ddd8 <tcp_receive+0x88c>)
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fa fef4 	bl	8008b70 <lwip_htons>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d130      	bne.n	800ddf6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dd94:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <tcp_receive+0x88c>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	899b      	ldrh	r3, [r3, #12]
 800dd9a:	b29c      	uxth	r4, r3
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	f7fa fee7 	bl	8008b70 <lwip_htons>
 800dda2:	4603      	mov	r3, r0
 800dda4:	461a      	mov	r2, r3
 800dda6:	4b0c      	ldr	r3, [pc, #48]	; (800ddd8 <tcp_receive+0x88c>)
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	4322      	orrs	r2, r4
 800ddac:	b292      	uxth	r2, r2
 800ddae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ddb0:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <tcp_receive+0x88c>)
 800ddb2:	891c      	ldrh	r4, [r3, #8]
 800ddb4:	4b08      	ldr	r3, [pc, #32]	; (800ddd8 <tcp_receive+0x88c>)
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	899b      	ldrh	r3, [r3, #12]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fa fed7 	bl	8008b70 <lwip_htons>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	f003 0303 	and.w	r3, r3, #3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <tcp_receive+0x8a0>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e00d      	b.n	800ddee <tcp_receive+0x8a2>
 800ddd2:	bf00      	nop
 800ddd4:	2000c980 	.word	0x2000c980
 800ddd8:	2000c960 	.word	0x2000c960
 800dddc:	2000c98a 	.word	0x2000c98a
 800dde0:	080155a8 	.word	0x080155a8
 800dde4:	08015950 	.word	0x08015950
 800dde8:	080155f4 	.word	0x080155f4
 800ddec:	2300      	movs	r3, #0
 800ddee:	4423      	add	r3, r4
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	4b98      	ldr	r3, [pc, #608]	; (800e054 <tcp_receive+0xb08>)
 800ddf4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ddf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800de00:	6938      	ldr	r0, [r7, #16]
 800de02:	f7fd fd36 	bl	800b872 <tcp_seg_free>
            while (next &&
 800de06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00e      	beq.n	800de2a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800de0c:	4b91      	ldr	r3, [pc, #580]	; (800e054 <tcp_receive+0xb08>)
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	461a      	mov	r2, r3
 800de12:	4b91      	ldr	r3, [pc, #580]	; (800e058 <tcp_receive+0xb0c>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	441a      	add	r2, r3
 800de18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de20:	8909      	ldrh	r1, [r1, #8]
 800de22:	440b      	add	r3, r1
 800de24:	1ad3      	subs	r3, r2, r3
            while (next &&
 800de26:	2b00      	cmp	r3, #0
 800de28:	da9a      	bge.n	800dd60 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800de2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d059      	beq.n	800dee4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800de30:	4b88      	ldr	r3, [pc, #544]	; (800e054 <tcp_receive+0xb08>)
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	4b88      	ldr	r3, [pc, #544]	; (800e058 <tcp_receive+0xb0c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	441a      	add	r2, r3
 800de3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	1ad3      	subs	r3, r2, r3
            if (next &&
 800de44:	2b00      	cmp	r3, #0
 800de46:	dd4d      	ble.n	800dee4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	b29a      	uxth	r2, r3
 800de50:	4b81      	ldr	r3, [pc, #516]	; (800e058 <tcp_receive+0xb0c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	b29b      	uxth	r3, r3
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	b29a      	uxth	r2, r3
 800de5a:	4b80      	ldr	r3, [pc, #512]	; (800e05c <tcp_receive+0xb10>)
 800de5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de5e:	4b7f      	ldr	r3, [pc, #508]	; (800e05c <tcp_receive+0xb10>)
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	899b      	ldrh	r3, [r3, #12]
 800de64:	b29b      	uxth	r3, r3
 800de66:	4618      	mov	r0, r3
 800de68:	f7fa fe82 	bl	8008b70 <lwip_htons>
 800de6c:	4603      	mov	r3, r0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 0302 	and.w	r3, r3, #2
 800de74:	2b00      	cmp	r3, #0
 800de76:	d005      	beq.n	800de84 <tcp_receive+0x938>
                inseg.len -= 1;
 800de78:	4b78      	ldr	r3, [pc, #480]	; (800e05c <tcp_receive+0xb10>)
 800de7a:	891b      	ldrh	r3, [r3, #8]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	4b76      	ldr	r3, [pc, #472]	; (800e05c <tcp_receive+0xb10>)
 800de82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800de84:	4b75      	ldr	r3, [pc, #468]	; (800e05c <tcp_receive+0xb10>)
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	4a74      	ldr	r2, [pc, #464]	; (800e05c <tcp_receive+0xb10>)
 800de8a:	8912      	ldrh	r2, [r2, #8]
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fc f8da 	bl	800a048 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800de94:	4b71      	ldr	r3, [pc, #452]	; (800e05c <tcp_receive+0xb10>)
 800de96:	891c      	ldrh	r4, [r3, #8]
 800de98:	4b70      	ldr	r3, [pc, #448]	; (800e05c <tcp_receive+0xb10>)
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	899b      	ldrh	r3, [r3, #12]
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fa fe65 	bl	8008b70 <lwip_htons>
 800dea6:	4603      	mov	r3, r0
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	f003 0303 	and.w	r3, r3, #3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <tcp_receive+0x96a>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e000      	b.n	800deb8 <tcp_receive+0x96c>
 800deb6:	2300      	movs	r3, #0
 800deb8:	4423      	add	r3, r4
 800deba:	b29a      	uxth	r2, r3
 800debc:	4b65      	ldr	r3, [pc, #404]	; (800e054 <tcp_receive+0xb08>)
 800debe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dec0:	4b64      	ldr	r3, [pc, #400]	; (800e054 <tcp_receive+0xb08>)
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	461a      	mov	r2, r3
 800dec6:	4b64      	ldr	r3, [pc, #400]	; (800e058 <tcp_receive+0xb0c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	441a      	add	r2, r3
 800decc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d006      	beq.n	800dee4 <tcp_receive+0x998>
 800ded6:	4b62      	ldr	r3, [pc, #392]	; (800e060 <tcp_receive+0xb14>)
 800ded8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dedc:	4961      	ldr	r1, [pc, #388]	; (800e064 <tcp_receive+0xb18>)
 800dede:	4862      	ldr	r0, [pc, #392]	; (800e068 <tcp_receive+0xb1c>)
 800dee0:	f005 fa56 	bl	8013390 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dee8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800deea:	4b5a      	ldr	r3, [pc, #360]	; (800e054 <tcp_receive+0xb08>)
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	4b59      	ldr	r3, [pc, #356]	; (800e058 <tcp_receive+0xb0c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	441a      	add	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800defe:	4b55      	ldr	r3, [pc, #340]	; (800e054 <tcp_receive+0xb08>)
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d206      	bcs.n	800df14 <tcp_receive+0x9c8>
 800df06:	4b56      	ldr	r3, [pc, #344]	; (800e060 <tcp_receive+0xb14>)
 800df08:	f240 6207 	movw	r2, #1543	; 0x607
 800df0c:	4957      	ldr	r1, [pc, #348]	; (800e06c <tcp_receive+0xb20>)
 800df0e:	4856      	ldr	r0, [pc, #344]	; (800e068 <tcp_receive+0xb1c>)
 800df10:	f005 fa3e 	bl	8013390 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df18:	4b4e      	ldr	r3, [pc, #312]	; (800e054 <tcp_receive+0xb08>)
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	b29a      	uxth	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7fc ffc5 	bl	800aeb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800df2a:	4b4c      	ldr	r3, [pc, #304]	; (800e05c <tcp_receive+0xb10>)
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	891b      	ldrh	r3, [r3, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d006      	beq.n	800df42 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800df34:	4b49      	ldr	r3, [pc, #292]	; (800e05c <tcp_receive+0xb10>)
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	4a4d      	ldr	r2, [pc, #308]	; (800e070 <tcp_receive+0xb24>)
 800df3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800df3c:	4b47      	ldr	r3, [pc, #284]	; (800e05c <tcp_receive+0xb10>)
 800df3e:	2200      	movs	r2, #0
 800df40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df42:	4b46      	ldr	r3, [pc, #280]	; (800e05c <tcp_receive+0xb10>)
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	899b      	ldrh	r3, [r3, #12]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fa fe10 	bl	8008b70 <lwip_htons>
 800df50:	4603      	mov	r3, r0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 80b8 	beq.w	800e0ce <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800df5e:	4b45      	ldr	r3, [pc, #276]	; (800e074 <tcp_receive+0xb28>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	f043 0320 	orr.w	r3, r3, #32
 800df66:	b2da      	uxtb	r2, r3
 800df68:	4b42      	ldr	r3, [pc, #264]	; (800e074 <tcp_receive+0xb28>)
 800df6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800df6c:	e0af      	b.n	800e0ce <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4a36      	ldr	r2, [pc, #216]	; (800e058 <tcp_receive+0xb0c>)
 800df7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	891b      	ldrh	r3, [r3, #8]
 800df84:	461c      	mov	r4, r3
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	899b      	ldrh	r3, [r3, #12]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fa fdee 	bl	8008b70 <lwip_htons>
 800df94:	4603      	mov	r3, r0
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f003 0303 	and.w	r3, r3, #3
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <tcp_receive+0xa58>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e000      	b.n	800dfa6 <tcp_receive+0xa5a>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	191a      	adds	r2, r3, r4
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfac:	441a      	add	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfb6:	461c      	mov	r4, r3
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	891b      	ldrh	r3, [r3, #8]
 800dfbc:	461d      	mov	r5, r3
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fa fdd2 	bl	8008b70 <lwip_htons>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	f003 0303 	and.w	r3, r3, #3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <tcp_receive+0xa90>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e000      	b.n	800dfde <tcp_receive+0xa92>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	442b      	add	r3, r5
 800dfe0:	429c      	cmp	r4, r3
 800dfe2:	d206      	bcs.n	800dff2 <tcp_receive+0xaa6>
 800dfe4:	4b1e      	ldr	r3, [pc, #120]	; (800e060 <tcp_receive+0xb14>)
 800dfe6:	f240 622b 	movw	r2, #1579	; 0x62b
 800dfea:	4923      	ldr	r1, [pc, #140]	; (800e078 <tcp_receive+0xb2c>)
 800dfec:	481e      	ldr	r0, [pc, #120]	; (800e068 <tcp_receive+0xb1c>)
 800dfee:	f005 f9cf 	bl	8013390 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	891b      	ldrh	r3, [r3, #8]
 800dff6:	461c      	mov	r4, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	899b      	ldrh	r3, [r3, #12]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	4618      	mov	r0, r3
 800e002:	f7fa fdb5 	bl	8008b70 <lwip_htons>
 800e006:	4603      	mov	r3, r0
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	f003 0303 	and.w	r3, r3, #3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <tcp_receive+0xaca>
 800e012:	2301      	movs	r3, #1
 800e014:	e000      	b.n	800e018 <tcp_receive+0xacc>
 800e016:	2300      	movs	r3, #0
 800e018:	1919      	adds	r1, r3, r4
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e01e:	b28b      	uxth	r3, r1
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	b29a      	uxth	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7fc ff43 	bl	800aeb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	891b      	ldrh	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d028      	beq.n	800e08a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <tcp_receive+0xb24>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d01d      	beq.n	800e07c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <tcp_receive+0xb24>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f7fc fa50 	bl	800a4f0 <pbuf_cat>
 800e050:	e018      	b.n	800e084 <tcp_receive+0xb38>
 800e052:	bf00      	nop
 800e054:	2000c98a 	.word	0x2000c98a
 800e058:	2000c980 	.word	0x2000c980
 800e05c:	2000c960 	.word	0x2000c960
 800e060:	080155a8 	.word	0x080155a8
 800e064:	08015988 	.word	0x08015988
 800e068:	080155f4 	.word	0x080155f4
 800e06c:	080159c4 	.word	0x080159c4
 800e070:	2000c990 	.word	0x2000c990
 800e074:	2000c98d 	.word	0x2000c98d
 800e078:	080159e4 	.word	0x080159e4
            } else {
              recv_data = cseg->p;
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	4a70      	ldr	r2, [pc, #448]	; (800e244 <tcp_receive+0xcf8>)
 800e082:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2200      	movs	r2, #0
 800e088:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	899b      	ldrh	r3, [r3, #12]
 800e090:	b29b      	uxth	r3, r3
 800e092:	4618      	mov	r0, r3
 800e094:	f7fa fd6c 	bl	8008b70 <lwip_htons>
 800e098:	4603      	mov	r3, r0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00d      	beq.n	800e0c0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e0a4:	4b68      	ldr	r3, [pc, #416]	; (800e248 <tcp_receive+0xcfc>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	f043 0320 	orr.w	r3, r3, #32
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	4b66      	ldr	r3, [pc, #408]	; (800e248 <tcp_receive+0xcfc>)
 800e0b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	7d1b      	ldrb	r3, [r3, #20]
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d102      	bne.n	800e0c0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2207      	movs	r2, #7
 800e0be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e0c8:	68b8      	ldr	r0, [r7, #8]
 800e0ca:	f7fd fbd2 	bl	800b872 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d008      	beq.n	800e0e8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	f43f af43 	beq.w	800df6e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	8b5b      	ldrh	r3, [r3, #26]
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00e      	beq.n	800e112 <tcp_receive+0xbc6>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	8b5b      	ldrh	r3, [r3, #26]
 800e0f8:	f023 0301 	bic.w	r3, r3, #1
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	835a      	strh	r2, [r3, #26]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	8b5b      	ldrh	r3, [r3, #26]
 800e106:	f043 0302 	orr.w	r3, r3, #2
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e110:	e188      	b.n	800e424 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	8b5b      	ldrh	r3, [r3, #26]
 800e116:	f043 0301 	orr.w	r3, r3, #1
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e120:	e180      	b.n	800e424 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e12a:	4848      	ldr	r0, [pc, #288]	; (800e24c <tcp_receive+0xd00>)
 800e12c:	f7fd fbba 	bl	800b8a4 <tcp_seg_copy>
 800e130:	4602      	mov	r2, r0
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	675a      	str	r2, [r3, #116]	; 0x74
 800e136:	e16d      	b.n	800e414 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e138:	2300      	movs	r3, #0
 800e13a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e140:	63bb      	str	r3, [r7, #56]	; 0x38
 800e142:	e157      	b.n	800e3f4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	4b41      	ldr	r3, [pc, #260]	; (800e250 <tcp_receive+0xd04>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d11d      	bne.n	800e18e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e152:	4b3e      	ldr	r3, [pc, #248]	; (800e24c <tcp_receive+0xd00>)
 800e154:	891a      	ldrh	r2, [r3, #8]
 800e156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e158:	891b      	ldrh	r3, [r3, #8]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	f240 814f 	bls.w	800e3fe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e160:	483a      	ldr	r0, [pc, #232]	; (800e24c <tcp_receive+0xd00>)
 800e162:	f7fd fb9f 	bl	800b8a4 <tcp_seg_copy>
 800e166:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 8149 	beq.w	800e402 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e172:	2b00      	cmp	r3, #0
 800e174:	d003      	beq.n	800e17e <tcp_receive+0xc32>
                    prev->next = cseg;
 800e176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	e002      	b.n	800e184 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e186:	6978      	ldr	r0, [r7, #20]
 800e188:	f7ff f8dc 	bl	800d344 <tcp_oos_insert_segment>
                }
                break;
 800e18c:	e139      	b.n	800e402 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e190:	2b00      	cmp	r3, #0
 800e192:	d117      	bne.n	800e1c4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e194:	4b2e      	ldr	r3, [pc, #184]	; (800e250 <tcp_receive+0xd04>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	da57      	bge.n	800e254 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e1a4:	4829      	ldr	r0, [pc, #164]	; (800e24c <tcp_receive+0xd00>)
 800e1a6:	f7fd fb7d 	bl	800b8a4 <tcp_seg_copy>
 800e1aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 8129 	beq.w	800e406 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e1ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1bc:	69b8      	ldr	r0, [r7, #24]
 800e1be:	f7ff f8c1 	bl	800d344 <tcp_oos_insert_segment>
                  }
                  break;
 800e1c2:	e120      	b.n	800e406 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e1c4:	4b22      	ldr	r3, [pc, #136]	; (800e250 <tcp_receive+0xd04>)
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	db3e      	blt.n	800e254 <tcp_receive+0xd08>
 800e1d6:	4b1e      	ldr	r3, [pc, #120]	; (800e250 <tcp_receive+0xd04>)
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dc35      	bgt.n	800e254 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e1e8:	4818      	ldr	r0, [pc, #96]	; (800e24c <tcp_receive+0xd00>)
 800e1ea:	f7fd fb5b 	bl	800b8a4 <tcp_seg_copy>
 800e1ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f000 8109 	beq.w	800e40a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e200:	8912      	ldrh	r2, [r2, #8]
 800e202:	441a      	add	r2, r3
 800e204:	4b12      	ldr	r3, [pc, #72]	; (800e250 <tcp_receive+0xd04>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	dd12      	ble.n	800e234 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e20e:	4b10      	ldr	r3, [pc, #64]	; (800e250 <tcp_receive+0xd04>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	b29a      	uxth	r2, r3
 800e214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	b29a      	uxth	r2, r3
 800e220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e222:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22a:	891b      	ldrh	r3, [r3, #8]
 800e22c:	4619      	mov	r1, r3
 800e22e:	4610      	mov	r0, r2
 800e230:	f7fb ff0a 	bl	800a048 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e23a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e23c:	69f8      	ldr	r0, [r7, #28]
 800e23e:	f7ff f881 	bl	800d344 <tcp_oos_insert_segment>
                  }
                  break;
 800e242:	e0e2      	b.n	800e40a <tcp_receive+0xebe>
 800e244:	2000c990 	.word	0x2000c990
 800e248:	2000c98d 	.word	0x2000c98d
 800e24c:	2000c960 	.word	0x2000c960
 800e250:	2000c980 	.word	0x2000c980
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f040 80c6 	bne.w	800e3ee <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e262:	4b80      	ldr	r3, [pc, #512]	; (800e464 <tcp_receive+0xf18>)
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f340 80bd 	ble.w	800e3ee <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fa fc77 	bl	8008b70 <lwip_htons>
 800e282:	4603      	mov	r3, r0
 800e284:	b2db      	uxtb	r3, r3
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f040 80bf 	bne.w	800e40e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e290:	4875      	ldr	r0, [pc, #468]	; (800e468 <tcp_receive+0xf1c>)
 800e292:	f7fd fb07 	bl	800b8a4 <tcp_seg_copy>
 800e296:	4602      	mov	r2, r0
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80b6 	beq.w	800e412 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ae:	8912      	ldrh	r2, [r2, #8]
 800e2b0:	441a      	add	r2, r3
 800e2b2:	4b6c      	ldr	r3, [pc, #432]	; (800e464 <tcp_receive+0xf18>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	dd12      	ble.n	800e2e2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e2bc:	4b69      	ldr	r3, [pc, #420]	; (800e464 <tcp_receive+0xf18>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	891b      	ldrh	r3, [r3, #8]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4610      	mov	r0, r2
 800e2de:	f7fb feb3 	bl	800a048 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e2e2:	4b62      	ldr	r3, [pc, #392]	; (800e46c <tcp_receive+0xf20>)
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	4b5e      	ldr	r3, [pc, #376]	; (800e464 <tcp_receive+0xf18>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	441a      	add	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f2:	6879      	ldr	r1, [r7, #4]
 800e2f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e2f6:	440b      	add	r3, r1
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f340 8089 	ble.w	800e412 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	899b      	ldrh	r3, [r3, #12]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fa fc30 	bl	8008b70 <lwip_htons>
 800e310:	4603      	mov	r3, r0
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d022      	beq.n	800e362 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	899b      	ldrh	r3, [r3, #12]
 800e324:	b29b      	uxth	r3, r3
 800e326:	b21b      	sxth	r3, r3
 800e328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e32c:	b21c      	sxth	r4, r3
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	899b      	ldrh	r3, [r3, #12]
 800e336:	b29b      	uxth	r3, r3
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fa fc19 	bl	8008b70 <lwip_htons>
 800e33e:	4603      	mov	r3, r0
 800e340:	b2db      	uxtb	r3, r3
 800e342:	b29b      	uxth	r3, r3
 800e344:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e348:	b29b      	uxth	r3, r3
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fa fc10 	bl	8008b70 <lwip_htons>
 800e350:	4603      	mov	r3, r0
 800e352:	b21b      	sxth	r3, r3
 800e354:	4323      	orrs	r3, r4
 800e356:	b21a      	sxth	r2, r3
 800e358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	b292      	uxth	r2, r2
 800e360:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e366:	b29a      	uxth	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e36c:	4413      	add	r3, r2
 800e36e:	b299      	uxth	r1, r3
 800e370:	4b3c      	ldr	r3, [pc, #240]	; (800e464 <tcp_receive+0xf18>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	b29a      	uxth	r2, r3
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	1a8a      	subs	r2, r1, r2
 800e37c:	b292      	uxth	r2, r2
 800e37e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	891b      	ldrh	r3, [r3, #8]
 800e38c:	4619      	mov	r1, r3
 800e38e:	4610      	mov	r0, r2
 800e390:	f7fb fe5a 	bl	800a048 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	891c      	ldrh	r4, [r3, #8]
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	899b      	ldrh	r3, [r3, #12]
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fa fbe3 	bl	8008b70 <lwip_htons>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	f003 0303 	and.w	r3, r3, #3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <tcp_receive+0xe6e>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e000      	b.n	800e3bc <tcp_receive+0xe70>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	4423      	add	r3, r4
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	4b2a      	ldr	r3, [pc, #168]	; (800e46c <tcp_receive+0xf20>)
 800e3c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e3c4:	4b29      	ldr	r3, [pc, #164]	; (800e46c <tcp_receive+0xf20>)
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4b26      	ldr	r3, [pc, #152]	; (800e464 <tcp_receive+0xf18>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	441a      	add	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3d8:	440b      	add	r3, r1
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d019      	beq.n	800e412 <tcp_receive+0xec6>
 800e3de:	4b24      	ldr	r3, [pc, #144]	; (800e470 <tcp_receive+0xf24>)
 800e3e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e3e4:	4923      	ldr	r1, [pc, #140]	; (800e474 <tcp_receive+0xf28>)
 800e3e6:	4824      	ldr	r0, [pc, #144]	; (800e478 <tcp_receive+0xf2c>)
 800e3e8:	f004 ffd2 	bl	8013390 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e3ec:	e011      	b.n	800e412 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f47f aea4 	bne.w	800e144 <tcp_receive+0xbf8>
 800e3fc:	e00a      	b.n	800e414 <tcp_receive+0xec8>
                break;
 800e3fe:	bf00      	nop
 800e400:	e008      	b.n	800e414 <tcp_receive+0xec8>
                break;
 800e402:	bf00      	nop
 800e404:	e006      	b.n	800e414 <tcp_receive+0xec8>
                  break;
 800e406:	bf00      	nop
 800e408:	e004      	b.n	800e414 <tcp_receive+0xec8>
                  break;
 800e40a:	bf00      	nop
 800e40c:	e002      	b.n	800e414 <tcp_receive+0xec8>
                  break;
 800e40e:	bf00      	nop
 800e410:	e000      	b.n	800e414 <tcp_receive+0xec8>
                break;
 800e412:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 fa33 	bl	800f880 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e41a:	e003      	b.n	800e424 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f001 fa2f 	bl	800f880 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e422:	e01a      	b.n	800e45a <tcp_receive+0xf0e>
 800e424:	e019      	b.n	800e45a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <tcp_receive+0xf18>)
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	db0a      	blt.n	800e44a <tcp_receive+0xefe>
 800e434:	4b0b      	ldr	r3, [pc, #44]	; (800e464 <tcp_receive+0xf18>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	6879      	ldr	r1, [r7, #4]
 800e43e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e440:	440b      	add	r3, r1
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	3301      	adds	r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	dd07      	ble.n	800e45a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8b5b      	ldrh	r3, [r3, #26]
 800e44e:	f043 0302 	orr.w	r3, r3, #2
 800e452:	b29a      	uxth	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e458:	e7ff      	b.n	800e45a <tcp_receive+0xf0e>
 800e45a:	bf00      	nop
 800e45c:	3750      	adds	r7, #80	; 0x50
 800e45e:	46bd      	mov	sp, r7
 800e460:	bdb0      	pop	{r4, r5, r7, pc}
 800e462:	bf00      	nop
 800e464:	2000c980 	.word	0x2000c980
 800e468:	2000c960 	.word	0x2000c960
 800e46c:	2000c98a 	.word	0x2000c98a
 800e470:	080155a8 	.word	0x080155a8
 800e474:	08015950 	.word	0x08015950
 800e478:	080155f4 	.word	0x080155f4

0800e47c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e482:	4b15      	ldr	r3, [pc, #84]	; (800e4d8 <tcp_get_next_optbyte+0x5c>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	b291      	uxth	r1, r2
 800e48a:	4a13      	ldr	r2, [pc, #76]	; (800e4d8 <tcp_get_next_optbyte+0x5c>)
 800e48c:	8011      	strh	r1, [r2, #0]
 800e48e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e490:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <tcp_get_next_optbyte+0x60>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d004      	beq.n	800e4a2 <tcp_get_next_optbyte+0x26>
 800e498:	4b11      	ldr	r3, [pc, #68]	; (800e4e0 <tcp_get_next_optbyte+0x64>)
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	88fa      	ldrh	r2, [r7, #6]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d208      	bcs.n	800e4b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e4a2:	4b10      	ldr	r3, [pc, #64]	; (800e4e4 <tcp_get_next_optbyte+0x68>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3314      	adds	r3, #20
 800e4a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e4aa:	88fb      	ldrh	r3, [r7, #6]
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	e00b      	b.n	800e4cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <tcp_get_next_optbyte+0x64>)
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e4c2:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <tcp_get_next_optbyte+0x60>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	797b      	ldrb	r3, [r7, #5]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr
 800e4d8:	2000c97c 	.word	0x2000c97c
 800e4dc:	2000c978 	.word	0x2000c978
 800e4e0:	2000c976 	.word	0x2000c976
 800e4e4:	2000c970 	.word	0x2000c970

0800e4e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <tcp_parseopt+0x1c>
 800e4f6:	4b32      	ldr	r3, [pc, #200]	; (800e5c0 <tcp_parseopt+0xd8>)
 800e4f8:	f240 727d 	movw	r2, #1917	; 0x77d
 800e4fc:	4931      	ldr	r1, [pc, #196]	; (800e5c4 <tcp_parseopt+0xdc>)
 800e4fe:	4832      	ldr	r0, [pc, #200]	; (800e5c8 <tcp_parseopt+0xe0>)
 800e500:	f004 ff46 	bl	8013390 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e504:	4b31      	ldr	r3, [pc, #196]	; (800e5cc <tcp_parseopt+0xe4>)
 800e506:	881b      	ldrh	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d055      	beq.n	800e5b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e50c:	4b30      	ldr	r3, [pc, #192]	; (800e5d0 <tcp_parseopt+0xe8>)
 800e50e:	2200      	movs	r2, #0
 800e510:	801a      	strh	r2, [r3, #0]
 800e512:	e045      	b.n	800e5a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e514:	f7ff ffb2 	bl	800e47c <tcp_get_next_optbyte>
 800e518:	4603      	mov	r3, r0
 800e51a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d006      	beq.n	800e530 <tcp_parseopt+0x48>
 800e522:	2b02      	cmp	r3, #2
 800e524:	dc2b      	bgt.n	800e57e <tcp_parseopt+0x96>
 800e526:	2b00      	cmp	r3, #0
 800e528:	d041      	beq.n	800e5ae <tcp_parseopt+0xc6>
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d127      	bne.n	800e57e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e52e:	e037      	b.n	800e5a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e530:	f7ff ffa4 	bl	800e47c <tcp_get_next_optbyte>
 800e534:	4603      	mov	r3, r0
 800e536:	2b04      	cmp	r3, #4
 800e538:	d13b      	bne.n	800e5b2 <tcp_parseopt+0xca>
 800e53a:	4b25      	ldr	r3, [pc, #148]	; (800e5d0 <tcp_parseopt+0xe8>)
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	3301      	adds	r3, #1
 800e540:	4a22      	ldr	r2, [pc, #136]	; (800e5cc <tcp_parseopt+0xe4>)
 800e542:	8812      	ldrh	r2, [r2, #0]
 800e544:	4293      	cmp	r3, r2
 800e546:	da34      	bge.n	800e5b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e548:	f7ff ff98 	bl	800e47c <tcp_get_next_optbyte>
 800e54c:	4603      	mov	r3, r0
 800e54e:	b29b      	uxth	r3, r3
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e554:	f7ff ff92 	bl	800e47c <tcp_get_next_optbyte>
 800e558:	4603      	mov	r3, r0
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	89bb      	ldrh	r3, [r7, #12]
 800e55e:	4313      	orrs	r3, r2
 800e560:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e562:	89bb      	ldrh	r3, [r7, #12]
 800e564:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e568:	d804      	bhi.n	800e574 <tcp_parseopt+0x8c>
 800e56a:	89bb      	ldrh	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <tcp_parseopt+0x8c>
 800e570:	89ba      	ldrh	r2, [r7, #12]
 800e572:	e001      	b.n	800e578 <tcp_parseopt+0x90>
 800e574:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e57c:	e010      	b.n	800e5a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e57e:	f7ff ff7d 	bl	800e47c <tcp_get_next_optbyte>
 800e582:	4603      	mov	r3, r0
 800e584:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e586:	7afb      	ldrb	r3, [r7, #11]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d914      	bls.n	800e5b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e58c:	7afb      	ldrb	r3, [r7, #11]
 800e58e:	b29a      	uxth	r2, r3
 800e590:	4b0f      	ldr	r3, [pc, #60]	; (800e5d0 <tcp_parseopt+0xe8>)
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	4413      	add	r3, r2
 800e596:	b29b      	uxth	r3, r3
 800e598:	3b02      	subs	r3, #2
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	4b0c      	ldr	r3, [pc, #48]	; (800e5d0 <tcp_parseopt+0xe8>)
 800e59e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <tcp_parseopt+0xe8>)
 800e5a2:	881a      	ldrh	r2, [r3, #0]
 800e5a4:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <tcp_parseopt+0xe4>)
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d3b3      	bcc.n	800e514 <tcp_parseopt+0x2c>
 800e5ac:	e004      	b.n	800e5b8 <tcp_parseopt+0xd0>
          return;
 800e5ae:	bf00      	nop
 800e5b0:	e002      	b.n	800e5b8 <tcp_parseopt+0xd0>
            return;
 800e5b2:	bf00      	nop
 800e5b4:	e000      	b.n	800e5b8 <tcp_parseopt+0xd0>
            return;
 800e5b6:	bf00      	nop
      }
    }
  }
}
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	080155a8 	.word	0x080155a8
 800e5c4:	08015a0c 	.word	0x08015a0c
 800e5c8:	080155f4 	.word	0x080155f4
 800e5cc:	2000c974 	.word	0x2000c974
 800e5d0:	2000c97c 	.word	0x2000c97c

0800e5d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e5d8:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <tcp_trigger_input_pcb_close+0x1c>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f043 0310 	orr.w	r3, r3, #16
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	4b03      	ldr	r3, [pc, #12]	; (800e5f0 <tcp_trigger_input_pcb_close+0x1c>)
 800e5e4:	701a      	strb	r2, [r3, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	2000c98d 	.word	0x2000c98d

0800e5f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00a      	beq.n	800e61c <tcp_route+0x28>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	7a1b      	ldrb	r3, [r3, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d006      	beq.n	800e61c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	7a1b      	ldrb	r3, [r3, #8]
 800e612:	4618      	mov	r0, r3
 800e614:	f7fb fb10 	bl	8009c38 <netif_get_by_index>
 800e618:	4603      	mov	r3, r0
 800e61a:	e003      	b.n	800e624 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f003 f9dd 	bl	80119dc <ip4_route>
 800e622:	4603      	mov	r3, r0
  }
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	603b      	str	r3, [r7, #0]
 800e638:	4613      	mov	r3, r2
 800e63a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d105      	bne.n	800e64e <tcp_create_segment+0x22>
 800e642:	4b44      	ldr	r3, [pc, #272]	; (800e754 <tcp_create_segment+0x128>)
 800e644:	22a3      	movs	r2, #163	; 0xa3
 800e646:	4944      	ldr	r1, [pc, #272]	; (800e758 <tcp_create_segment+0x12c>)
 800e648:	4844      	ldr	r0, [pc, #272]	; (800e75c <tcp_create_segment+0x130>)
 800e64a:	f004 fea1 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d105      	bne.n	800e660 <tcp_create_segment+0x34>
 800e654:	4b3f      	ldr	r3, [pc, #252]	; (800e754 <tcp_create_segment+0x128>)
 800e656:	22a4      	movs	r2, #164	; 0xa4
 800e658:	4941      	ldr	r1, [pc, #260]	; (800e760 <tcp_create_segment+0x134>)
 800e65a:	4840      	ldr	r0, [pc, #256]	; (800e75c <tcp_create_segment+0x130>)
 800e65c:	f004 fe98 	bl	8013390 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	b2db      	uxtb	r3, r3
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e66e:	2003      	movs	r0, #3
 800e670:	f7fa ff56 	bl	8009520 <memp_malloc>
 800e674:	6138      	str	r0, [r7, #16]
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d104      	bne.n	800e686 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	f7fb fe69 	bl	800a354 <pbuf_free>
    return NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	e061      	b.n	800e74a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e68c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2200      	movs	r2, #0
 800e692:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	891a      	ldrh	r2, [r3, #8]
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d205      	bcs.n	800e6b2 <tcp_create_segment+0x86>
 800e6a6:	4b2b      	ldr	r3, [pc, #172]	; (800e754 <tcp_create_segment+0x128>)
 800e6a8:	22b0      	movs	r2, #176	; 0xb0
 800e6aa:	492e      	ldr	r1, [pc, #184]	; (800e764 <tcp_create_segment+0x138>)
 800e6ac:	482b      	ldr	r0, [pc, #172]	; (800e75c <tcp_create_segment+0x130>)
 800e6ae:	f004 fe6f 	bl	8013390 <iprintf>
  seg->len = p->tot_len - optlen;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	891a      	ldrh	r2, [r3, #8]
 800e6b6:	7dfb      	ldrb	r3, [r7, #23]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e6c2:	2114      	movs	r1, #20
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f7fb fdaf 	bl	800a228 <pbuf_add_header>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e6d0:	6938      	ldr	r0, [r7, #16]
 800e6d2:	f7fd f8ce 	bl	800b872 <tcp_seg_free>
    return NULL;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e037      	b.n	800e74a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	685a      	ldr	r2, [r3, #4]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8ada      	ldrh	r2, [r3, #22]
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	68dc      	ldr	r4, [r3, #12]
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	f7fa fa3f 	bl	8008b70 <lwip_htons>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	8b1a      	ldrh	r2, [r3, #24]
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	68dc      	ldr	r4, [r3, #12]
 800e6fe:	4610      	mov	r0, r2
 800e700:	f7fa fa36 	bl	8008b70 <lwip_htons>
 800e704:	4603      	mov	r3, r0
 800e706:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	68dc      	ldr	r4, [r3, #12]
 800e70c:	6838      	ldr	r0, [r7, #0]
 800e70e:	f7fa fa44 	bl	8008b9a <lwip_htonl>
 800e712:	4603      	mov	r3, r0
 800e714:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e716:	7dfb      	ldrb	r3, [r7, #23]
 800e718:	089b      	lsrs	r3, r3, #2
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3305      	adds	r3, #5
 800e720:	b29b      	uxth	r3, r3
 800e722:	031b      	lsls	r3, r3, #12
 800e724:	b29a      	uxth	r2, r3
 800e726:	79fb      	ldrb	r3, [r7, #7]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	4313      	orrs	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	68dc      	ldr	r4, [r3, #12]
 800e732:	4610      	mov	r0, r2
 800e734:	f7fa fa1c 	bl	8008b70 <lwip_htons>
 800e738:	4603      	mov	r3, r0
 800e73a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	749a      	strb	r2, [r3, #18]
 800e744:	2200      	movs	r2, #0
 800e746:	74da      	strb	r2, [r3, #19]
  return seg;
 800e748:	693b      	ldr	r3, [r7, #16]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	371c      	adds	r7, #28
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd90      	pop	{r4, r7, pc}
 800e752:	bf00      	nop
 800e754:	08015a28 	.word	0x08015a28
 800e758:	08015a5c 	.word	0x08015a5c
 800e75c:	08015a7c 	.word	0x08015a7c
 800e760:	08015aa4 	.word	0x08015aa4
 800e764:	08015ac8 	.word	0x08015ac8

0800e768 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b08b      	sub	sp, #44	; 0x2c
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	460b      	mov	r3, r1
 800e772:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e774:	2300      	movs	r3, #0
 800e776:	61fb      	str	r3, [r7, #28]
 800e778:	2300      	movs	r3, #0
 800e77a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d106      	bne.n	800e794 <tcp_split_unsent_seg+0x2c>
 800e786:	4b95      	ldr	r3, [pc, #596]	; (800e9dc <tcp_split_unsent_seg+0x274>)
 800e788:	f240 324b 	movw	r2, #843	; 0x34b
 800e78c:	4994      	ldr	r1, [pc, #592]	; (800e9e0 <tcp_split_unsent_seg+0x278>)
 800e78e:	4895      	ldr	r0, [pc, #596]	; (800e9e4 <tcp_split_unsent_seg+0x27c>)
 800e790:	f004 fdfe 	bl	8013390 <iprintf>

  useg = pcb->unsent;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e798:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a4:	e116      	b.n	800e9d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e7a6:	887b      	ldrh	r3, [r7, #2]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e7ac:	4b8b      	ldr	r3, [pc, #556]	; (800e9dc <tcp_split_unsent_seg+0x274>)
 800e7ae:	f240 3253 	movw	r2, #851	; 0x353
 800e7b2:	498d      	ldr	r1, [pc, #564]	; (800e9e8 <tcp_split_unsent_seg+0x280>)
 800e7b4:	488b      	ldr	r0, [pc, #556]	; (800e9e4 <tcp_split_unsent_seg+0x27c>)
 800e7b6:	f004 fdeb 	bl	8013390 <iprintf>
    return ERR_VAL;
 800e7ba:	f06f 0305 	mvn.w	r3, #5
 800e7be:	e109      	b.n	800e9d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	891b      	ldrh	r3, [r3, #8]
 800e7c4:	887a      	ldrh	r2, [r7, #2]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d301      	bcc.n	800e7ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e102      	b.n	800e9d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7d2:	887a      	ldrh	r2, [r7, #2]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d906      	bls.n	800e7e6 <tcp_split_unsent_seg+0x7e>
 800e7d8:	4b80      	ldr	r3, [pc, #512]	; (800e9dc <tcp_split_unsent_seg+0x274>)
 800e7da:	f240 325b 	movw	r2, #859	; 0x35b
 800e7de:	4983      	ldr	r1, [pc, #524]	; (800e9ec <tcp_split_unsent_seg+0x284>)
 800e7e0:	4880      	ldr	r0, [pc, #512]	; (800e9e4 <tcp_split_unsent_seg+0x27c>)
 800e7e2:	f004 fdd5 	bl	8013390 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	891b      	ldrh	r3, [r3, #8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d106      	bne.n	800e7fc <tcp_split_unsent_seg+0x94>
 800e7ee:	4b7b      	ldr	r3, [pc, #492]	; (800e9dc <tcp_split_unsent_seg+0x274>)
 800e7f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e7f4:	497e      	ldr	r1, [pc, #504]	; (800e9f0 <tcp_split_unsent_seg+0x288>)
 800e7f6:	487b      	ldr	r0, [pc, #492]	; (800e9e4 <tcp_split_unsent_seg+0x27c>)
 800e7f8:	f004 fdca 	bl	8013390 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	7a9b      	ldrb	r3, [r3, #10]
 800e800:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	b2db      	uxtb	r3, r3
 800e808:	f003 0304 	and.w	r3, r3, #4
 800e80c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	891a      	ldrh	r2, [r3, #8]
 800e812:	887b      	ldrh	r3, [r7, #2]
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e818:	7bbb      	ldrb	r3, [r7, #14]
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	89bb      	ldrh	r3, [r7, #12]
 800e81e:	4413      	add	r3, r2
 800e820:	b29b      	uxth	r3, r3
 800e822:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e826:	4619      	mov	r1, r3
 800e828:	2036      	movs	r0, #54	; 0x36
 800e82a:	f7fb faaf 	bl	8009d8c <pbuf_alloc>
 800e82e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 80b7 	beq.w	800e9a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	891a      	ldrh	r2, [r3, #8]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	891b      	ldrh	r3, [r3, #8]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	b29a      	uxth	r2, r3
 800e846:	887b      	ldrh	r3, [r7, #2]
 800e848:	4413      	add	r3, r2
 800e84a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	6858      	ldr	r0, [r3, #4]
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	7bbb      	ldrb	r3, [r7, #14]
 800e856:	18d1      	adds	r1, r2, r3
 800e858:	897b      	ldrh	r3, [r7, #10]
 800e85a:	89ba      	ldrh	r2, [r7, #12]
 800e85c:	f7fb ff80 	bl	800a760 <pbuf_copy_partial>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	89bb      	ldrh	r3, [r7, #12]
 800e866:	4293      	cmp	r3, r2
 800e868:	f040 809f 	bne.w	800e9aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	899b      	ldrh	r3, [r3, #12]
 800e872:	b29b      	uxth	r3, r3
 800e874:	4618      	mov	r0, r3
 800e876:	f7fa f97b 	bl	8008b70 <lwip_htons>
 800e87a:	4603      	mov	r3, r0
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e882:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e884:	2300      	movs	r3, #0
 800e886:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e888:	7efb      	ldrb	r3, [r7, #27]
 800e88a:	f003 0308 	and.w	r3, r3, #8
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d007      	beq.n	800e8a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e892:	7efb      	ldrb	r3, [r7, #27]
 800e894:	f023 0308 	bic.w	r3, r3, #8
 800e898:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e89a:	7ebb      	ldrb	r3, [r7, #26]
 800e89c:	f043 0308 	orr.w	r3, r3, #8
 800e8a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e8a2:	7efb      	ldrb	r3, [r7, #27]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d007      	beq.n	800e8bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e8ac:	7efb      	ldrb	r3, [r7, #27]
 800e8ae:	f023 0301 	bic.w	r3, r3, #1
 800e8b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e8b4:	7ebb      	ldrb	r3, [r7, #26]
 800e8b6:	f043 0301 	orr.w	r3, r3, #1
 800e8ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fa f969 	bl	8008b9a <lwip_htonl>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	887b      	ldrh	r3, [r7, #2]
 800e8cc:	18d1      	adds	r1, r2, r3
 800e8ce:	7eba      	ldrb	r2, [r7, #26]
 800e8d0:	7bfb      	ldrb	r3, [r7, #15]
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	6939      	ldr	r1, [r7, #16]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff fea7 	bl	800e62c <tcp_create_segment>
 800e8de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d063      	beq.n	800e9ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fb fdc0 	bl	800a470 <pbuf_clen>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	6858      	ldr	r0, [r3, #4]
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	891a      	ldrh	r2, [r3, #8]
 800e90e:	89bb      	ldrh	r3, [r7, #12]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	b29b      	uxth	r3, r3
 800e914:	4619      	mov	r1, r3
 800e916:	f7fb fb97 	bl	800a048 <pbuf_realloc>
  useg->len -= remainder;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	891a      	ldrh	r2, [r3, #8]
 800e91e:	89bb      	ldrh	r3, [r7, #12]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	b29a      	uxth	r2, r3
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	899b      	ldrh	r3, [r3, #12]
 800e92e:	b29c      	uxth	r4, r3
 800e930:	7efb      	ldrb	r3, [r7, #27]
 800e932:	b29b      	uxth	r3, r3
 800e934:	4618      	mov	r0, r3
 800e936:	f7fa f91b 	bl	8008b70 <lwip_htons>
 800e93a:	4603      	mov	r3, r0
 800e93c:	461a      	mov	r2, r3
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	4322      	orrs	r2, r4
 800e944:	b292      	uxth	r2, r2
 800e946:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fb fd8f 	bl	800a470 <pbuf_clen>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e95c:	4413      	add	r3, r2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fb fd80 	bl	800a470 <pbuf_clen>
 800e970:	4603      	mov	r3, r0
 800e972:	461a      	mov	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e97a:	4413      	add	r3, r2
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	69fa      	ldr	r2, [r7, #28]
 800e990:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d103      	bne.n	800e9a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e016      	b.n	800e9d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e9a6:	bf00      	nop
 800e9a8:	e002      	b.n	800e9b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e9aa:	bf00      	nop
 800e9ac:	e000      	b.n	800e9b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e9ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d006      	beq.n	800e9c4 <tcp_split_unsent_seg+0x25c>
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <tcp_split_unsent_seg+0x274>)
 800e9b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e9bc:	490d      	ldr	r1, [pc, #52]	; (800e9f4 <tcp_split_unsent_seg+0x28c>)
 800e9be:	4809      	ldr	r0, [pc, #36]	; (800e9e4 <tcp_split_unsent_seg+0x27c>)
 800e9c0:	f004 fce6 	bl	8013390 <iprintf>
  if (p != NULL) {
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e9ca:	6938      	ldr	r0, [r7, #16]
 800e9cc:	f7fb fcc2 	bl	800a354 <pbuf_free>
  }

  return ERR_MEM;
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3724      	adds	r7, #36	; 0x24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd90      	pop	{r4, r7, pc}
 800e9dc:	08015a28 	.word	0x08015a28
 800e9e0:	08015dbc 	.word	0x08015dbc
 800e9e4:	08015a7c 	.word	0x08015a7c
 800e9e8:	08015de0 	.word	0x08015de0
 800e9ec:	08015e04 	.word	0x08015e04
 800e9f0:	08015e14 	.word	0x08015e14
 800e9f4:	08015e24 	.word	0x08015e24

0800e9f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e9f8:	b590      	push	{r4, r7, lr}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d106      	bne.n	800ea14 <tcp_send_fin+0x1c>
 800ea06:	4b21      	ldr	r3, [pc, #132]	; (800ea8c <tcp_send_fin+0x94>)
 800ea08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ea0c:	4920      	ldr	r1, [pc, #128]	; (800ea90 <tcp_send_fin+0x98>)
 800ea0e:	4821      	ldr	r0, [pc, #132]	; (800ea94 <tcp_send_fin+0x9c>)
 800ea10:	f004 fcbe 	bl	8013390 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d02e      	beq.n	800ea7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	e002      	b.n	800ea2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1f8      	bne.n	800ea24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	899b      	ldrh	r3, [r3, #12]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fa f898 	bl	8008b70 <lwip_htons>
 800ea40:	4603      	mov	r3, r0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 0307 	and.w	r3, r3, #7
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d116      	bne.n	800ea7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	899b      	ldrh	r3, [r3, #12]
 800ea52:	b29c      	uxth	r4, r3
 800ea54:	2001      	movs	r0, #1
 800ea56:	f7fa f88b 	bl	8008b70 <lwip_htons>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4322      	orrs	r2, r4
 800ea64:	b292      	uxth	r2, r2
 800ea66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	8b5b      	ldrh	r3, [r3, #26]
 800ea6c:	f043 0320 	orr.w	r3, r3, #32
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	e004      	b.n	800ea84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f80b 	bl	800ea98 <tcp_enqueue_flags>
 800ea82:	4603      	mov	r3, r0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3714      	adds	r7, #20
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd90      	pop	{r4, r7, pc}
 800ea8c:	08015a28 	.word	0x08015a28
 800ea90:	08015e30 	.word	0x08015e30
 800ea94:	08015a7c 	.word	0x08015a7c

0800ea98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08a      	sub	sp, #40	; 0x28
 800ea9c:	af02      	add	r7, sp, #8
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eaac:	78fb      	ldrb	r3, [r7, #3]
 800eaae:	f003 0303 	and.w	r3, r3, #3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <tcp_enqueue_flags+0x2c>
 800eab6:	4b67      	ldr	r3, [pc, #412]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800eab8:	f240 4211 	movw	r2, #1041	; 0x411
 800eabc:	4966      	ldr	r1, [pc, #408]	; (800ec58 <tcp_enqueue_flags+0x1c0>)
 800eabe:	4867      	ldr	r0, [pc, #412]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800eac0:	f004 fc66 	bl	8013390 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <tcp_enqueue_flags+0x40>
 800eaca:	4b62      	ldr	r3, [pc, #392]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800eacc:	f240 4213 	movw	r2, #1043	; 0x413
 800ead0:	4963      	ldr	r1, [pc, #396]	; (800ec60 <tcp_enqueue_flags+0x1c8>)
 800ead2:	4862      	ldr	r0, [pc, #392]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800ead4:	f004 fc5c 	bl	8013390 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ead8:	78fb      	ldrb	r3, [r7, #3]
 800eada:	f003 0302 	and.w	r3, r3, #2
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800eae2:	2301      	movs	r3, #1
 800eae4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eae6:	7ffb      	ldrb	r3, [r7, #31]
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eafa:	4619      	mov	r1, r3
 800eafc:	2036      	movs	r0, #54	; 0x36
 800eafe:	f7fb f945 	bl	8009d8c <pbuf_alloc>
 800eb02:	6138      	str	r0, [r7, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8b5b      	ldrh	r3, [r3, #26]
 800eb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb18:	f04f 33ff 	mov.w	r3, #4294967295
 800eb1c:	e095      	b.n	800ec4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	895a      	ldrh	r2, [r3, #10]
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d206      	bcs.n	800eb38 <tcp_enqueue_flags+0xa0>
 800eb2a:	4b4a      	ldr	r3, [pc, #296]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800eb2c:	f240 4239 	movw	r2, #1081	; 0x439
 800eb30:	494c      	ldr	r1, [pc, #304]	; (800ec64 <tcp_enqueue_flags+0x1cc>)
 800eb32:	484a      	ldr	r0, [pc, #296]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800eb34:	f004 fc2c 	bl	8013390 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800eb3c:	78fa      	ldrb	r2, [r7, #3]
 800eb3e:	7ffb      	ldrb	r3, [r7, #31]
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	460b      	mov	r3, r1
 800eb44:	6939      	ldr	r1, [r7, #16]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff fd70 	bl	800e62c <tcp_create_segment>
 800eb4c:	60f8      	str	r0, [r7, #12]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d109      	bne.n	800eb68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	8b5b      	ldrh	r3, [r3, #26]
 800eb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb62:	f04f 33ff 	mov.w	r3, #4294967295
 800eb66:	e070      	b.n	800ec4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	f003 0303 	and.w	r3, r3, #3
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d006      	beq.n	800eb82 <tcp_enqueue_flags+0xea>
 800eb74:	4b37      	ldr	r3, [pc, #220]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800eb76:	f240 4242 	movw	r2, #1090	; 0x442
 800eb7a:	493b      	ldr	r1, [pc, #236]	; (800ec68 <tcp_enqueue_flags+0x1d0>)
 800eb7c:	4837      	ldr	r0, [pc, #220]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800eb7e:	f004 fc07 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	891b      	ldrh	r3, [r3, #8]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d006      	beq.n	800eb98 <tcp_enqueue_flags+0x100>
 800eb8a:	4b32      	ldr	r3, [pc, #200]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800eb8c:	f240 4243 	movw	r2, #1091	; 0x443
 800eb90:	4936      	ldr	r1, [pc, #216]	; (800ec6c <tcp_enqueue_flags+0x1d4>)
 800eb92:	4832      	ldr	r0, [pc, #200]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800eb94:	f004 fbfc 	bl	8013390 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d103      	bne.n	800eba8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	66da      	str	r2, [r3, #108]	; 0x6c
 800eba6:	e00d      	b.n	800ebc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebac:	61bb      	str	r3, [r7, #24]
 800ebae:	e002      	b.n	800ebb6 <tcp_enqueue_flags+0x11e>
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	61bb      	str	r3, [r7, #24]
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1f8      	bne.n	800ebb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	f003 0302 	and.w	r3, r3, #2
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d104      	bne.n	800ebe0 <tcp_enqueue_flags+0x148>
 800ebd6:	78fb      	ldrb	r3, [r7, #3]
 800ebd8:	f003 0301 	and.w	r3, r3, #1
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d004      	beq.n	800ebea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	f003 0301 	and.w	r3, r3, #1
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d006      	beq.n	800ec02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	8b5b      	ldrh	r3, [r3, #26]
 800ebf8:	f043 0320 	orr.w	r3, r3, #32
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fb fc32 	bl	800a470 <pbuf_clen>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	461a      	mov	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec16:	4413      	add	r3, r2
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00e      	beq.n	800ec48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10a      	bne.n	800ec48 <tcp_enqueue_flags+0x1b0>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <tcp_enqueue_flags+0x1b0>
 800ec3a:	4b06      	ldr	r3, [pc, #24]	; (800ec54 <tcp_enqueue_flags+0x1bc>)
 800ec3c:	f240 4265 	movw	r2, #1125	; 0x465
 800ec40:	490b      	ldr	r1, [pc, #44]	; (800ec70 <tcp_enqueue_flags+0x1d8>)
 800ec42:	4806      	ldr	r0, [pc, #24]	; (800ec5c <tcp_enqueue_flags+0x1c4>)
 800ec44:	f004 fba4 	bl	8013390 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3720      	adds	r7, #32
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	08015a28 	.word	0x08015a28
 800ec58:	08015e4c 	.word	0x08015e4c
 800ec5c:	08015a7c 	.word	0x08015a7c
 800ec60:	08015ea4 	.word	0x08015ea4
 800ec64:	08015ec4 	.word	0x08015ec4
 800ec68:	08015f00 	.word	0x08015f00
 800ec6c:	08015f18 	.word	0x08015f18
 800ec70:	08015f44 	.word	0x08015f44

0800ec74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ec74:	b5b0      	push	{r4, r5, r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d106      	bne.n	800ec90 <tcp_output+0x1c>
 800ec82:	4b8a      	ldr	r3, [pc, #552]	; (800eeac <tcp_output+0x238>)
 800ec84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ec88:	4989      	ldr	r1, [pc, #548]	; (800eeb0 <tcp_output+0x23c>)
 800ec8a:	488a      	ldr	r0, [pc, #552]	; (800eeb4 <tcp_output+0x240>)
 800ec8c:	f004 fb80 	bl	8013390 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	7d1b      	ldrb	r3, [r3, #20]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d106      	bne.n	800eca6 <tcp_output+0x32>
 800ec98:	4b84      	ldr	r3, [pc, #528]	; (800eeac <tcp_output+0x238>)
 800ec9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ec9e:	4986      	ldr	r1, [pc, #536]	; (800eeb8 <tcp_output+0x244>)
 800eca0:	4884      	ldr	r0, [pc, #528]	; (800eeb4 <tcp_output+0x240>)
 800eca2:	f004 fb75 	bl	8013390 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eca6:	4b85      	ldr	r3, [pc, #532]	; (800eebc <tcp_output+0x248>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d101      	bne.n	800ecb4 <tcp_output+0x40>
    return ERR_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e1ce      	b.n	800f052 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	bf28      	it	cs
 800ecc4:	4613      	movcs	r3, r2
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10b      	bne.n	800ecee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	8b5b      	ldrh	r3, [r3, #26]
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 81aa 	beq.w	800f038 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fdcb 	bl	800f880 <tcp_send_empty_ack>
 800ecea:	4603      	mov	r3, r0
 800ecec:	e1b1      	b.n	800f052 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7ff fc7c 	bl	800e5f4 <tcp_route>
 800ecfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <tcp_output+0x96>
    return ERR_RTE;
 800ed04:	f06f 0303 	mvn.w	r3, #3
 800ed08:	e1a3      	b.n	800f052 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <tcp_output+0xa4>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d111      	bne.n	800ed3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <tcp_output+0xb0>
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	3304      	adds	r3, #4
 800ed22:	e000      	b.n	800ed26 <tcp_output+0xb2>
 800ed24:	2300      	movs	r3, #0
 800ed26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <tcp_output+0xc0>
      return ERR_RTE;
 800ed2e:	f06f 0303 	mvn.w	r3, #3
 800ed32:	e18e      	b.n	800f052 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ed3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7f9 ff29 	bl	8008b9a <lwip_htonl>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed52:	8912      	ldrh	r2, [r2, #8]
 800ed54:	4413      	add	r3, r2
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d227      	bcs.n	800edac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed62:	461a      	mov	r2, r3
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d114      	bne.n	800ed94 <tcp_output+0x120>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d110      	bne.n	800ed94 <tcp_output+0x120>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10b      	bne.n	800ed94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	8b5b      	ldrh	r3, [r3, #26]
 800ed98:	f003 0302 	and.w	r3, r3, #2
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 814d 	beq.w	800f03c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fd6c 	bl	800f880 <tcp_send_empty_ack>
 800eda8:	4603      	mov	r3, r0
 800edaa:	e152      	b.n	800f052 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 811c 	beq.w	800effa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800edc2:	e002      	b.n	800edca <tcp_output+0x156>
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	623b      	str	r3, [r7, #32]
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1f8      	bne.n	800edc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800edd2:	e112      	b.n	800effa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800edd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	899b      	ldrh	r3, [r3, #12]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f9 fec7 	bl	8008b70 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f003 0304 	and.w	r3, r3, #4
 800edea:	2b00      	cmp	r3, #0
 800edec:	d006      	beq.n	800edfc <tcp_output+0x188>
 800edee:	4b2f      	ldr	r3, [pc, #188]	; (800eeac <tcp_output+0x238>)
 800edf0:	f240 5236 	movw	r2, #1334	; 0x536
 800edf4:	4932      	ldr	r1, [pc, #200]	; (800eec0 <tcp_output+0x24c>)
 800edf6:	482f      	ldr	r0, [pc, #188]	; (800eeb4 <tcp_output+0x240>)
 800edf8:	f004 faca 	bl	8013390 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d01f      	beq.n	800ee44 <tcp_output+0x1d0>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8b5b      	ldrh	r3, [r3, #26]
 800ee08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d119      	bne.n	800ee44 <tcp_output+0x1d0>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <tcp_output+0x1bc>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d110      	bne.n	800ee44 <tcp_output+0x1d0>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee26:	891a      	ldrh	r2, [r3, #8]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d209      	bcs.n	800ee44 <tcp_output+0x1d0>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d004      	beq.n	800ee44 <tcp_output+0x1d0>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d901      	bls.n	800ee48 <tcp_output+0x1d4>
 800ee44:	2301      	movs	r3, #1
 800ee46:	e000      	b.n	800ee4a <tcp_output+0x1d6>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d106      	bne.n	800ee5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	8b5b      	ldrh	r3, [r3, #26]
 800ee52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f000 80e4 	beq.w	800f024 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	7d1b      	ldrb	r3, [r3, #20]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d00d      	beq.n	800ee80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	899b      	ldrh	r3, [r3, #12]
 800ee6a:	b29c      	uxth	r4, r3
 800ee6c:	2010      	movs	r0, #16
 800ee6e:	f7f9 fe7f 	bl	8008b70 <lwip_htons>
 800ee72:	4603      	mov	r3, r0
 800ee74:	461a      	mov	r2, r3
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	4322      	orrs	r2, r4
 800ee7c:	b292      	uxth	r2, r2
 800ee7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	6879      	ldr	r1, [r7, #4]
 800ee84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee86:	f000 f909 	bl	800f09c <tcp_output_segment>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ee8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d016      	beq.n	800eec4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8b5b      	ldrh	r3, [r3, #26]
 800ee9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	835a      	strh	r2, [r3, #26]
      return err;
 800eea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea8:	e0d3      	b.n	800f052 <tcp_output+0x3de>
 800eeaa:	bf00      	nop
 800eeac:	08015a28 	.word	0x08015a28
 800eeb0:	08015f6c 	.word	0x08015f6c
 800eeb4:	08015a7c 	.word	0x08015a7c
 800eeb8:	08015f84 	.word	0x08015f84
 800eebc:	2000c994 	.word	0x2000c994
 800eec0:	08015fac 	.word	0x08015fac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d006      	beq.n	800eee2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f023 0303 	bic.w	r3, r3, #3
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f9 fe56 	bl	8008b9a <lwip_htonl>
 800eeee:	4604      	mov	r4, r0
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	891b      	ldrh	r3, [r3, #8]
 800eef4:	461d      	mov	r5, r3
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	899b      	ldrh	r3, [r3, #12]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7f9 fe36 	bl	8008b70 <lwip_htons>
 800ef04:	4603      	mov	r3, r0
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	f003 0303 	and.w	r3, r3, #3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <tcp_output+0x2a0>
 800ef10:	2301      	movs	r3, #1
 800ef12:	e000      	b.n	800ef16 <tcp_output+0x2a2>
 800ef14:	2300      	movs	r3, #0
 800ef16:	442b      	add	r3, r5
 800ef18:	4423      	add	r3, r4
 800ef1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	da02      	bge.n	800ef2e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	891b      	ldrh	r3, [r3, #8]
 800ef32:	461c      	mov	r4, r3
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f9 fe17 	bl	8008b70 <lwip_htons>
 800ef42:	4603      	mov	r3, r0
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	f003 0303 	and.w	r3, r3, #3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <tcp_output+0x2de>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <tcp_output+0x2e0>
 800ef52:	2300      	movs	r3, #0
 800ef54:	4423      	add	r3, r4
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d049      	beq.n	800efee <tcp_output+0x37a>
      seg->next = NULL;
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d105      	bne.n	800ef74 <tcp_output+0x300>
        pcb->unacked = seg;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef6c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	623b      	str	r3, [r7, #32]
 800ef72:	e03f      	b.n	800eff4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7f9 fe0d 	bl	8008b9a <lwip_htonl>
 800ef80:	4604      	mov	r4, r0
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7f9 fe06 	bl	8008b9a <lwip_htonl>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	1ae3      	subs	r3, r4, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	da24      	bge.n	800efe0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3370      	adds	r3, #112	; 0x70
 800ef9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ef9c:	e002      	b.n	800efa4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d011      	beq.n	800efd0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f9 fdf0 	bl	8008b9a <lwip_htonl>
 800efba:	4604      	mov	r4, r0
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7f9 fde9 	bl	8008b9a <lwip_htonl>
 800efc8:	4603      	mov	r3, r0
 800efca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dbe6      	blt.n	800ef9e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	e009      	b.n	800eff4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800efe0:	6a3b      	ldr	r3, [r7, #32]
 800efe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	623b      	str	r3, [r7, #32]
 800efec:	e002      	b.n	800eff4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800efee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eff0:	f7fc fc3f 	bl	800b872 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	d012      	beq.n	800f026 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	f7f9 fdc7 	bl	8008b9a <lwip_htonl>
 800f00c:	4602      	mov	r2, r0
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f016:	8912      	ldrh	r2, [r2, #8]
 800f018:	4413      	add	r3, r2
  while (seg != NULL &&
 800f01a:	69ba      	ldr	r2, [r7, #24]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	f4bf aed9 	bcs.w	800edd4 <tcp_output+0x160>
 800f022:	e000      	b.n	800f026 <tcp_output+0x3b2>
      break;
 800f024:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d108      	bne.n	800f040 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f036:	e004      	b.n	800f042 <tcp_output+0x3ce>
    goto output_done;
 800f038:	bf00      	nop
 800f03a:	e002      	b.n	800f042 <tcp_output+0x3ce>
    goto output_done;
 800f03c:	bf00      	nop
 800f03e:	e000      	b.n	800f042 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f040:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	8b5b      	ldrh	r3, [r3, #26]
 800f046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3728      	adds	r7, #40	; 0x28
 800f056:	46bd      	mov	sp, r7
 800f058:	bdb0      	pop	{r4, r5, r7, pc}
 800f05a:	bf00      	nop

0800f05c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d106      	bne.n	800f078 <tcp_output_segment_busy+0x1c>
 800f06a:	4b09      	ldr	r3, [pc, #36]	; (800f090 <tcp_output_segment_busy+0x34>)
 800f06c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f070:	4908      	ldr	r1, [pc, #32]	; (800f094 <tcp_output_segment_busy+0x38>)
 800f072:	4809      	ldr	r0, [pc, #36]	; (800f098 <tcp_output_segment_busy+0x3c>)
 800f074:	f004 f98c 	bl	8013390 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	7b9b      	ldrb	r3, [r3, #14]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d001      	beq.n	800f086 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	08015a28 	.word	0x08015a28
 800f094:	08015fc4 	.word	0x08015fc4
 800f098:	08015a7c 	.word	0x08015a7c

0800f09c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f09c:	b5b0      	push	{r4, r5, r7, lr}
 800f09e:	b08c      	sub	sp, #48	; 0x30
 800f0a0:	af04      	add	r7, sp, #16
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d106      	bne.n	800f0bc <tcp_output_segment+0x20>
 800f0ae:	4b63      	ldr	r3, [pc, #396]	; (800f23c <tcp_output_segment+0x1a0>)
 800f0b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f0b4:	4962      	ldr	r1, [pc, #392]	; (800f240 <tcp_output_segment+0x1a4>)
 800f0b6:	4863      	ldr	r0, [pc, #396]	; (800f244 <tcp_output_segment+0x1a8>)
 800f0b8:	f004 f96a 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d106      	bne.n	800f0d0 <tcp_output_segment+0x34>
 800f0c2:	4b5e      	ldr	r3, [pc, #376]	; (800f23c <tcp_output_segment+0x1a0>)
 800f0c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f0c8:	495f      	ldr	r1, [pc, #380]	; (800f248 <tcp_output_segment+0x1ac>)
 800f0ca:	485e      	ldr	r0, [pc, #376]	; (800f244 <tcp_output_segment+0x1a8>)
 800f0cc:	f004 f960 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d106      	bne.n	800f0e4 <tcp_output_segment+0x48>
 800f0d6:	4b59      	ldr	r3, [pc, #356]	; (800f23c <tcp_output_segment+0x1a0>)
 800f0d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f0dc:	495b      	ldr	r1, [pc, #364]	; (800f24c <tcp_output_segment+0x1b0>)
 800f0de:	4859      	ldr	r0, [pc, #356]	; (800f244 <tcp_output_segment+0x1a8>)
 800f0e0:	f004 f956 	bl	8013390 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7ff ffb9 	bl	800f05c <tcp_output_segment_busy>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e09f      	b.n	800f234 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	68dc      	ldr	r4, [r3, #12]
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f7f9 fd4c 	bl	8008b9a <lwip_htonl>
 800f102:	4603      	mov	r3, r0
 800f104:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	68dc      	ldr	r4, [r3, #12]
 800f10e:	4610      	mov	r0, r2
 800f110:	f7f9 fd2e 	bl	8008b70 <lwip_htons>
 800f114:	4603      	mov	r3, r0
 800f116:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f120:	441a      	add	r2, r3
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	3314      	adds	r3, #20
 800f12c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	7a9b      	ldrb	r3, [r3, #10]
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d015      	beq.n	800f166 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	3304      	adds	r3, #4
 800f13e:	461a      	mov	r2, r3
 800f140:	6879      	ldr	r1, [r7, #4]
 800f142:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f146:	f7fc fe8b 	bl	800be60 <tcp_eff_send_mss_netif>
 800f14a:	4603      	mov	r3, r0
 800f14c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f14e:	8b7b      	ldrh	r3, [r7, #26]
 800f150:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f154:	4618      	mov	r0, r3
 800f156:	f7f9 fd20 	bl	8008b9a <lwip_htonl>
 800f15a:	4602      	mov	r2, r0
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	3304      	adds	r3, #4
 800f164:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	da02      	bge.n	800f176 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2200      	movs	r2, #0
 800f174:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d10c      	bne.n	800f198 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f17e:	4b34      	ldr	r3, [pc, #208]	; (800f250 <tcp_output_segment+0x1b4>)
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f9 fd04 	bl	8008b9a <lwip_htonl>
 800f192:	4602      	mov	r2, r0
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68da      	ldr	r2, [r3, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	8959      	ldrh	r1, [r3, #10]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	8b3a      	ldrh	r2, [r7, #24]
 800f1b2:	1a8a      	subs	r2, r1, r2
 800f1b4:	b292      	uxth	r2, r2
 800f1b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	8919      	ldrh	r1, [r3, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	8b3a      	ldrh	r2, [r7, #24]
 800f1c4:	1a8a      	subs	r2, r1, r2
 800f1c6:	b292      	uxth	r2, r2
 800f1c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	68d2      	ldr	r2, [r2, #12]
 800f1d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	741a      	strb	r2, [r3, #16]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	f103 0214 	add.w	r2, r3, #20
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	7a9b      	ldrb	r3, [r3, #10]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	f003 0304 	and.w	r3, r3, #4
 800f1f2:	4413      	add	r3, r2
 800f1f4:	69fa      	ldr	r2, [r7, #28]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d006      	beq.n	800f208 <tcp_output_segment+0x16c>
 800f1fa:	4b10      	ldr	r3, [pc, #64]	; (800f23c <tcp_output_segment+0x1a0>)
 800f1fc:	f240 621c 	movw	r2, #1564	; 0x61c
 800f200:	4914      	ldr	r1, [pc, #80]	; (800f254 <tcp_output_segment+0x1b8>)
 800f202:	4810      	ldr	r0, [pc, #64]	; (800f244 <tcp_output_segment+0x1a8>)
 800f204:	f004 f8c4 	bl	8013390 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6858      	ldr	r0, [r3, #4]
 800f20c:	68b9      	ldr	r1, [r7, #8]
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	1d1c      	adds	r4, r3, #4
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	7add      	ldrb	r5, [r3, #11]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	7a9b      	ldrb	r3, [r3, #10]
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	9202      	str	r2, [sp, #8]
 800f21e:	2206      	movs	r2, #6
 800f220:	9201      	str	r2, [sp, #4]
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	462b      	mov	r3, r5
 800f226:	4622      	mov	r2, r4
 800f228:	f002 fd96 	bl	8011d58 <ip4_output_if>
 800f22c:	4603      	mov	r3, r0
 800f22e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f230:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3720      	adds	r7, #32
 800f238:	46bd      	mov	sp, r7
 800f23a:	bdb0      	pop	{r4, r5, r7, pc}
 800f23c:	08015a28 	.word	0x08015a28
 800f240:	08015fec 	.word	0x08015fec
 800f244:	08015a7c 	.word	0x08015a7c
 800f248:	0801600c 	.word	0x0801600c
 800f24c:	0801602c 	.word	0x0801602c
 800f250:	2000c948 	.word	0x2000c948
 800f254:	08016050 	.word	0x08016050

0800f258 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f258:	b5b0      	push	{r4, r5, r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d106      	bne.n	800f274 <tcp_rexmit_rto_prepare+0x1c>
 800f266:	4b31      	ldr	r3, [pc, #196]	; (800f32c <tcp_rexmit_rto_prepare+0xd4>)
 800f268:	f240 6263 	movw	r2, #1635	; 0x663
 800f26c:	4930      	ldr	r1, [pc, #192]	; (800f330 <tcp_rexmit_rto_prepare+0xd8>)
 800f26e:	4831      	ldr	r0, [pc, #196]	; (800f334 <tcp_rexmit_rto_prepare+0xdc>)
 800f270:	f004 f88e 	bl	8013390 <iprintf>

  if (pcb->unacked == NULL) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d102      	bne.n	800f282 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f27c:	f06f 0305 	mvn.w	r3, #5
 800f280:	e050      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	e00b      	b.n	800f2a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f7ff fee6 	bl	800f05c <tcp_output_segment_busy>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f296:	f06f 0305 	mvn.w	r3, #5
 800f29a:	e043      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1ef      	bne.n	800f28a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff fed6 	bl	800f05c <tcp_output_segment_busy>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f2b6:	f06f 0305 	mvn.w	r3, #5
 800f2ba:	e033      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8b5b      	ldrh	r3, [r3, #26]
 800f2d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f9 fc57 	bl	8008b9a <lwip_htonl>
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	891b      	ldrh	r3, [r3, #8]
 800f2f2:	461d      	mov	r5, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	899b      	ldrh	r3, [r3, #12]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7f9 fc37 	bl	8008b70 <lwip_htons>
 800f302:	4603      	mov	r3, r0
 800f304:	b2db      	uxtb	r3, r3
 800f306:	f003 0303 	and.w	r3, r3, #3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <tcp_rexmit_rto_prepare+0xba>
 800f30e:	2301      	movs	r3, #1
 800f310:	e000      	b.n	800f314 <tcp_rexmit_rto_prepare+0xbc>
 800f312:	2300      	movs	r3, #0
 800f314:	442b      	add	r3, r5
 800f316:	18e2      	adds	r2, r4, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bdb0      	pop	{r4, r5, r7, pc}
 800f32c:	08015a28 	.word	0x08015a28
 800f330:	08016064 	.word	0x08016064
 800f334:	08015a7c 	.word	0x08015a7c

0800f338 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d106      	bne.n	800f354 <tcp_rexmit_rto_commit+0x1c>
 800f346:	4b0d      	ldr	r3, [pc, #52]	; (800f37c <tcp_rexmit_rto_commit+0x44>)
 800f348:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f34c:	490c      	ldr	r1, [pc, #48]	; (800f380 <tcp_rexmit_rto_commit+0x48>)
 800f34e:	480d      	ldr	r0, [pc, #52]	; (800f384 <tcp_rexmit_rto_commit+0x4c>)
 800f350:	f004 f81e 	bl	8013390 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f35a:	2bff      	cmp	r3, #255	; 0xff
 800f35c:	d007      	beq.n	800f36e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f364:	3301      	adds	r3, #1
 800f366:	b2da      	uxtb	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fc80 	bl	800ec74 <tcp_output>
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	08015a28 	.word	0x08015a28
 800f380:	08016088 	.word	0x08016088
 800f384:	08015a7c 	.word	0x08015a7c

0800f388 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d106      	bne.n	800f3a4 <tcp_rexmit_rto+0x1c>
 800f396:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <tcp_rexmit_rto+0x38>)
 800f398:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f39c:	4909      	ldr	r1, [pc, #36]	; (800f3c4 <tcp_rexmit_rto+0x3c>)
 800f39e:	480a      	ldr	r0, [pc, #40]	; (800f3c8 <tcp_rexmit_rto+0x40>)
 800f3a0:	f003 fff6 	bl	8013390 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff ff57 	bl	800f258 <tcp_rexmit_rto_prepare>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d102      	bne.n	800f3b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff ffc1 	bl	800f338 <tcp_rexmit_rto_commit>
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	08015a28 	.word	0x08015a28
 800f3c4:	080160ac 	.word	0x080160ac
 800f3c8:	08015a7c 	.word	0x08015a7c

0800f3cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f3cc:	b590      	push	{r4, r7, lr}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d106      	bne.n	800f3e8 <tcp_rexmit+0x1c>
 800f3da:	4b2f      	ldr	r3, [pc, #188]	; (800f498 <tcp_rexmit+0xcc>)
 800f3dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f3e0:	492e      	ldr	r1, [pc, #184]	; (800f49c <tcp_rexmit+0xd0>)
 800f3e2:	482f      	ldr	r0, [pc, #188]	; (800f4a0 <tcp_rexmit+0xd4>)
 800f3e4:	f003 ffd4 	bl	8013390 <iprintf>

  if (pcb->unacked == NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d102      	bne.n	800f3f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f3f0:	f06f 0305 	mvn.w	r3, #5
 800f3f4:	e04c      	b.n	800f490 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f7ff fe2d 	bl	800f05c <tcp_output_segment_busy>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f408:	f06f 0305 	mvn.w	r3, #5
 800f40c:	e040      	b.n	800f490 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	336c      	adds	r3, #108	; 0x6c
 800f41a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f41c:	e002      	b.n	800f424 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d011      	beq.n	800f450 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	4618      	mov	r0, r3
 800f436:	f7f9 fbb0 	bl	8008b9a <lwip_htonl>
 800f43a:	4604      	mov	r4, r0
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f7f9 fba9 	bl	8008b9a <lwip_htonl>
 800f448:	4603      	mov	r3, r0
 800f44a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	dbe6      	blt.n	800f41e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d103      	bne.n	800f46e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f474:	2bff      	cmp	r3, #255	; 0xff
 800f476:	d007      	beq.n	800f488 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f47e:	3301      	adds	r3, #1
 800f480:	b2da      	uxtb	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	bd90      	pop	{r4, r7, pc}
 800f498:	08015a28 	.word	0x08015a28
 800f49c:	080160c8 	.word	0x080160c8
 800f4a0:	08015a7c 	.word	0x08015a7c

0800f4a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <tcp_rexmit_fast+0x1c>
 800f4b2:	4b2a      	ldr	r3, [pc, #168]	; (800f55c <tcp_rexmit_fast+0xb8>)
 800f4b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f4b8:	4929      	ldr	r1, [pc, #164]	; (800f560 <tcp_rexmit_fast+0xbc>)
 800f4ba:	482a      	ldr	r0, [pc, #168]	; (800f564 <tcp_rexmit_fast+0xc0>)
 800f4bc:	f003 ff68 	bl	8013390 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d044      	beq.n	800f552 <tcp_rexmit_fast+0xae>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	8b5b      	ldrh	r3, [r3, #26]
 800f4cc:	f003 0304 	and.w	r3, r3, #4
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d13e      	bne.n	800f552 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7ff ff79 	bl	800f3cc <tcp_rexmit>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d138      	bne.n	800f552 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	bf28      	it	cs
 800f4f0:	4613      	movcs	r3, r2
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	0fda      	lsrs	r2, r3, #31
 800f4f6:	4413      	add	r3, r2
 800f4f8:	105b      	asrs	r3, r3, #1
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f508:	461a      	mov	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f50e:	005b      	lsls	r3, r3, #1
 800f510:	429a      	cmp	r2, r3
 800f512:	d206      	bcs.n	800f522 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f52c:	4619      	mov	r1, r3
 800f52e:	0049      	lsls	r1, r1, #1
 800f530:	440b      	add	r3, r1
 800f532:	b29b      	uxth	r3, r3
 800f534:	4413      	add	r3, r2
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8b5b      	ldrh	r3, [r3, #26]
 800f542:	f043 0304 	orr.w	r3, r3, #4
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f552:	bf00      	nop
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	08015a28 	.word	0x08015a28
 800f560:	080160e0 	.word	0x080160e0
 800f564:	08015a7c 	.word	0x08015a7c

0800f568 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	607b      	str	r3, [r7, #4]
 800f572:	460b      	mov	r3, r1
 800f574:	817b      	strh	r3, [r7, #10]
 800f576:	4613      	mov	r3, r2
 800f578:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f57a:	897a      	ldrh	r2, [r7, #10]
 800f57c:	893b      	ldrh	r3, [r7, #8]
 800f57e:	4413      	add	r3, r2
 800f580:	b29b      	uxth	r3, r3
 800f582:	3314      	adds	r3, #20
 800f584:	b29b      	uxth	r3, r3
 800f586:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f58a:	4619      	mov	r1, r3
 800f58c:	2022      	movs	r0, #34	; 0x22
 800f58e:	f7fa fbfd 	bl	8009d8c <pbuf_alloc>
 800f592:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d04d      	beq.n	800f636 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f59a:	897b      	ldrh	r3, [r7, #10]
 800f59c:	3313      	adds	r3, #19
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	8952      	ldrh	r2, [r2, #10]
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	db06      	blt.n	800f5b4 <tcp_output_alloc_header_common+0x4c>
 800f5a6:	4b26      	ldr	r3, [pc, #152]	; (800f640 <tcp_output_alloc_header_common+0xd8>)
 800f5a8:	f240 7223 	movw	r2, #1827	; 0x723
 800f5ac:	4925      	ldr	r1, [pc, #148]	; (800f644 <tcp_output_alloc_header_common+0xdc>)
 800f5ae:	4826      	ldr	r0, [pc, #152]	; (800f648 <tcp_output_alloc_header_common+0xe0>)
 800f5b0:	f003 feee 	bl	8013390 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f5ba:	8c3b      	ldrh	r3, [r7, #32]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7f9 fad7 	bl	8008b70 <lwip_htons>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f5ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7f9 facf 	bl	8008b70 <lwip_htons>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f7f9 fada 	bl	8008b9a <lwip_htonl>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f5ec:	897b      	ldrh	r3, [r7, #10]
 800f5ee:	089b      	lsrs	r3, r3, #2
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	3305      	adds	r3, #5
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	031b      	lsls	r3, r3, #12
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4313      	orrs	r3, r2
 800f602:	b29b      	uxth	r3, r3
 800f604:	4618      	mov	r0, r3
 800f606:	f7f9 fab3 	bl	8008b70 <lwip_htons>
 800f60a:	4603      	mov	r3, r0
 800f60c:	461a      	mov	r2, r3
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f612:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f614:	4618      	mov	r0, r3
 800f616:	f7f9 faab 	bl	8008b70 <lwip_htons>
 800f61a:	4603      	mov	r3, r0
 800f61c:	461a      	mov	r2, r3
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	2200      	movs	r2, #0
 800f626:	741a      	strb	r2, [r3, #16]
 800f628:	2200      	movs	r2, #0
 800f62a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	2200      	movs	r2, #0
 800f630:	749a      	strb	r2, [r3, #18]
 800f632:	2200      	movs	r2, #0
 800f634:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f636:	697b      	ldr	r3, [r7, #20]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	08015a28 	.word	0x08015a28
 800f644:	08016100 	.word	0x08016100
 800f648:	08015a7c 	.word	0x08015a7c

0800f64c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f64c:	b5b0      	push	{r4, r5, r7, lr}
 800f64e:	b08a      	sub	sp, #40	; 0x28
 800f650:	af04      	add	r7, sp, #16
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	460b      	mov	r3, r1
 800f658:	817b      	strh	r3, [r7, #10]
 800f65a:	4613      	mov	r3, r2
 800f65c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d106      	bne.n	800f672 <tcp_output_alloc_header+0x26>
 800f664:	4b15      	ldr	r3, [pc, #84]	; (800f6bc <tcp_output_alloc_header+0x70>)
 800f666:	f240 7242 	movw	r2, #1858	; 0x742
 800f66a:	4915      	ldr	r1, [pc, #84]	; (800f6c0 <tcp_output_alloc_header+0x74>)
 800f66c:	4815      	ldr	r0, [pc, #84]	; (800f6c4 <tcp_output_alloc_header+0x78>)
 800f66e:	f003 fe8f 	bl	8013390 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	8adb      	ldrh	r3, [r3, #22]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	8b12      	ldrh	r2, [r2, #24]
 800f67e:	68f9      	ldr	r1, [r7, #12]
 800f680:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f682:	893d      	ldrh	r5, [r7, #8]
 800f684:	897c      	ldrh	r4, [r7, #10]
 800f686:	9103      	str	r1, [sp, #12]
 800f688:	2110      	movs	r1, #16
 800f68a:	9102      	str	r1, [sp, #8]
 800f68c:	9201      	str	r2, [sp, #4]
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	462a      	mov	r2, r5
 800f694:	4621      	mov	r1, r4
 800f696:	f7ff ff67 	bl	800f568 <tcp_output_alloc_header_common>
 800f69a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f6aa:	441a      	add	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f6b0:	697b      	ldr	r3, [r7, #20]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bdb0      	pop	{r4, r5, r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	08015a28 	.word	0x08015a28
 800f6c0:	08016130 	.word	0x08016130
 800f6c4:	08015a7c 	.word	0x08015a7c

0800f6c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b088      	sub	sp, #32
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	71fb      	strb	r3, [r7, #7]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d106      	bne.n	800f6f6 <tcp_output_fill_options+0x2e>
 800f6e8:	4b13      	ldr	r3, [pc, #76]	; (800f738 <tcp_output_fill_options+0x70>)
 800f6ea:	f240 7256 	movw	r2, #1878	; 0x756
 800f6ee:	4913      	ldr	r1, [pc, #76]	; (800f73c <tcp_output_fill_options+0x74>)
 800f6f0:	4813      	ldr	r0, [pc, #76]	; (800f740 <tcp_output_fill_options+0x78>)
 800f6f2:	f003 fe4d 	bl	8013390 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	3314      	adds	r3, #20
 800f700:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	f103 0214 	add.w	r2, r3, #20
 800f708:	8bfb      	ldrh	r3, [r7, #30]
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4619      	mov	r1, r3
 800f70e:	79fb      	ldrb	r3, [r7, #7]
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	f003 0304 	and.w	r3, r3, #4
 800f716:	440b      	add	r3, r1
 800f718:	4413      	add	r3, r2
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d006      	beq.n	800f72e <tcp_output_fill_options+0x66>
 800f720:	4b05      	ldr	r3, [pc, #20]	; (800f738 <tcp_output_fill_options+0x70>)
 800f722:	f240 7275 	movw	r2, #1909	; 0x775
 800f726:	4907      	ldr	r1, [pc, #28]	; (800f744 <tcp_output_fill_options+0x7c>)
 800f728:	4805      	ldr	r0, [pc, #20]	; (800f740 <tcp_output_fill_options+0x78>)
 800f72a:	f003 fe31 	bl	8013390 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f72e:	bf00      	nop
 800f730:	3720      	adds	r7, #32
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	08015a28 	.word	0x08015a28
 800f73c:	08016158 	.word	0x08016158
 800f740:	08015a7c 	.word	0x08015a7c
 800f744:	08016050 	.word	0x08016050

0800f748 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08a      	sub	sp, #40	; 0x28
 800f74c:	af04      	add	r7, sp, #16
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d106      	bne.n	800f76a <tcp_output_control_segment+0x22>
 800f75c:	4b1c      	ldr	r3, [pc, #112]	; (800f7d0 <tcp_output_control_segment+0x88>)
 800f75e:	f240 7287 	movw	r2, #1927	; 0x787
 800f762:	491c      	ldr	r1, [pc, #112]	; (800f7d4 <tcp_output_control_segment+0x8c>)
 800f764:	481c      	ldr	r0, [pc, #112]	; (800f7d8 <tcp_output_control_segment+0x90>)
 800f766:	f003 fe13 	bl	8013390 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	6879      	ldr	r1, [r7, #4]
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f7fe ff40 	bl	800e5f4 <tcp_route>
 800f774:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d102      	bne.n	800f782 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f77c:	23fc      	movs	r3, #252	; 0xfc
 800f77e:	75fb      	strb	r3, [r7, #23]
 800f780:	e01c      	b.n	800f7bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d006      	beq.n	800f796 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	7adb      	ldrb	r3, [r3, #11]
 800f78c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	7a9b      	ldrb	r3, [r3, #10]
 800f792:	757b      	strb	r3, [r7, #21]
 800f794:	e003      	b.n	800f79e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f796:	23ff      	movs	r3, #255	; 0xff
 800f798:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f79e:	7dba      	ldrb	r2, [r7, #22]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	9302      	str	r3, [sp, #8]
 800f7a4:	2306      	movs	r3, #6
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	7d7b      	ldrb	r3, [r7, #21]
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	683a      	ldr	r2, [r7, #0]
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	68b8      	ldr	r0, [r7, #8]
 800f7b4:	f002 fad0 	bl	8011d58 <ip4_output_if>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f7bc:	68b8      	ldr	r0, [r7, #8]
 800f7be:	f7fa fdc9 	bl	800a354 <pbuf_free>
  return err;
 800f7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	08015a28 	.word	0x08015a28
 800f7d4:	08016180 	.word	0x08016180
 800f7d8:	08015a7c 	.word	0x08015a7c

0800f7dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f7dc:	b590      	push	{r4, r7, lr}
 800f7de:	b08b      	sub	sp, #44	; 0x2c
 800f7e0:	af04      	add	r7, sp, #16
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d106      	bne.n	800f7fe <tcp_rst+0x22>
 800f7f0:	4b1f      	ldr	r3, [pc, #124]	; (800f870 <tcp_rst+0x94>)
 800f7f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f7f6:	491f      	ldr	r1, [pc, #124]	; (800f874 <tcp_rst+0x98>)
 800f7f8:	481f      	ldr	r0, [pc, #124]	; (800f878 <tcp_rst+0x9c>)
 800f7fa:	f003 fdc9 	bl	8013390 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f800:	2b00      	cmp	r3, #0
 800f802:	d106      	bne.n	800f812 <tcp_rst+0x36>
 800f804:	4b1a      	ldr	r3, [pc, #104]	; (800f870 <tcp_rst+0x94>)
 800f806:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f80a:	491c      	ldr	r1, [pc, #112]	; (800f87c <tcp_rst+0xa0>)
 800f80c:	481a      	ldr	r0, [pc, #104]	; (800f878 <tcp_rst+0x9c>)
 800f80e:	f003 fdbf 	bl	8013390 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f812:	2300      	movs	r3, #0
 800f814:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f816:	f246 0308 	movw	r3, #24584	; 0x6008
 800f81a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f81c:	7dfb      	ldrb	r3, [r7, #23]
 800f81e:	b29c      	uxth	r4, r3
 800f820:	68b8      	ldr	r0, [r7, #8]
 800f822:	f7f9 f9ba 	bl	8008b9a <lwip_htonl>
 800f826:	4602      	mov	r2, r0
 800f828:	8abb      	ldrh	r3, [r7, #20]
 800f82a:	9303      	str	r3, [sp, #12]
 800f82c:	2314      	movs	r3, #20
 800f82e:	9302      	str	r3, [sp, #8]
 800f830:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	4613      	mov	r3, r2
 800f83a:	2200      	movs	r2, #0
 800f83c:	4621      	mov	r1, r4
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff fe92 	bl	800f568 <tcp_output_alloc_header_common>
 800f844:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f84c:	7dfb      	ldrb	r3, [r7, #23]
 800f84e:	2200      	movs	r2, #0
 800f850:	6939      	ldr	r1, [r7, #16]
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7ff ff38 	bl	800f6c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	6939      	ldr	r1, [r7, #16]
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7ff ff72 	bl	800f748 <tcp_output_control_segment>
 800f864:	e000      	b.n	800f868 <tcp_rst+0x8c>
    return;
 800f866:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f868:	371c      	adds	r7, #28
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd90      	pop	{r4, r7, pc}
 800f86e:	bf00      	nop
 800f870:	08015a28 	.word	0x08015a28
 800f874:	080161ac 	.word	0x080161ac
 800f878:	08015a7c 	.word	0x08015a7c
 800f87c:	080161c8 	.word	0x080161c8

0800f880 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f880:	b590      	push	{r4, r7, lr}
 800f882:	b087      	sub	sp, #28
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d106      	bne.n	800f8a4 <tcp_send_empty_ack+0x24>
 800f896:	4b28      	ldr	r3, [pc, #160]	; (800f938 <tcp_send_empty_ack+0xb8>)
 800f898:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f89c:	4927      	ldr	r1, [pc, #156]	; (800f93c <tcp_send_empty_ack+0xbc>)
 800f89e:	4828      	ldr	r0, [pc, #160]	; (800f940 <tcp_send_empty_ack+0xc0>)
 800f8a0:	f003 fd76 	bl	8013390 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f003 0304 	and.w	r3, r3, #4
 800f8ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f8b0:	7d7b      	ldrb	r3, [r7, #21]
 800f8b2:	b29c      	uxth	r4, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f9 f96e 	bl	8008b9a <lwip_htonl>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff fec1 	bl	800f64c <tcp_output_alloc_header>
 800f8ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	8b5b      	ldrh	r3, [r3, #26]
 800f8d6:	f043 0303 	orr.w	r3, r3, #3
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f8e0:	f06f 0301 	mvn.w	r3, #1
 800f8e4:	e023      	b.n	800f92e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f8e6:	7dbb      	ldrb	r3, [r7, #22]
 800f8e8:	7dfa      	ldrb	r2, [r7, #23]
 800f8ea:	6939      	ldr	r1, [r7, #16]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff feeb 	bl	800f6c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	6939      	ldr	r1, [r7, #16]
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7ff ff24 	bl	800f748 <tcp_output_control_segment>
 800f900:	4603      	mov	r3, r0
 800f902:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d007      	beq.n	800f91c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	8b5b      	ldrh	r3, [r3, #26]
 800f910:	f043 0303 	orr.w	r3, r3, #3
 800f914:	b29a      	uxth	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	835a      	strh	r2, [r3, #26]
 800f91a:	e006      	b.n	800f92a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	8b5b      	ldrh	r3, [r3, #26]
 800f920:	f023 0303 	bic.w	r3, r3, #3
 800f924:	b29a      	uxth	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	371c      	adds	r7, #28
 800f932:	46bd      	mov	sp, r7
 800f934:	bd90      	pop	{r4, r7, pc}
 800f936:	bf00      	nop
 800f938:	08015a28 	.word	0x08015a28
 800f93c:	080161e4 	.word	0x080161e4
 800f940:	08015a7c 	.word	0x08015a7c

0800f944 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b087      	sub	sp, #28
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f94c:	2300      	movs	r3, #0
 800f94e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <tcp_keepalive+0x20>
 800f956:	4b18      	ldr	r3, [pc, #96]	; (800f9b8 <tcp_keepalive+0x74>)
 800f958:	f640 0224 	movw	r2, #2084	; 0x824
 800f95c:	4917      	ldr	r1, [pc, #92]	; (800f9bc <tcp_keepalive+0x78>)
 800f95e:	4818      	ldr	r0, [pc, #96]	; (800f9c0 <tcp_keepalive+0x7c>)
 800f960:	f003 fd16 	bl	8013390 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	b29c      	uxth	r4, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f96c:	3b01      	subs	r3, #1
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f9 f913 	bl	8008b9a <lwip_htonl>
 800f974:	4603      	mov	r3, r0
 800f976:	2200      	movs	r2, #0
 800f978:	4621      	mov	r1, r4
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff fe66 	bl	800f64c <tcp_output_alloc_header>
 800f980:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d102      	bne.n	800f98e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f988:	f04f 33ff 	mov.w	r3, #4294967295
 800f98c:	e010      	b.n	800f9b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f98e:	7dfb      	ldrb	r3, [r7, #23]
 800f990:	2200      	movs	r2, #0
 800f992:	6939      	ldr	r1, [r7, #16]
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7ff fe97 	bl	800f6c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3304      	adds	r3, #4
 800f9a0:	6939      	ldr	r1, [r7, #16]
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff fed0 	bl	800f748 <tcp_output_control_segment>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	371c      	adds	r7, #28
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd90      	pop	{r4, r7, pc}
 800f9b8:	08015a28 	.word	0x08015a28
 800f9bc:	08016204 	.word	0x08016204
 800f9c0:	08015a7c 	.word	0x08015a7c

0800f9c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f9c4:	b590      	push	{r4, r7, lr}
 800f9c6:	b08b      	sub	sp, #44	; 0x2c
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d106      	bne.n	800f9e6 <tcp_zero_window_probe+0x22>
 800f9d8:	4b4c      	ldr	r3, [pc, #304]	; (800fb0c <tcp_zero_window_probe+0x148>)
 800f9da:	f640 024f 	movw	r2, #2127	; 0x84f
 800f9de:	494c      	ldr	r1, [pc, #304]	; (800fb10 <tcp_zero_window_probe+0x14c>)
 800f9e0:	484c      	ldr	r0, [pc, #304]	; (800fb14 <tcp_zero_window_probe+0x150>)
 800f9e2:	f003 fcd5 	bl	8013390 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d101      	bne.n	800f9f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	e086      	b.n	800fb04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f9fc:	2bff      	cmp	r3, #255	; 0xff
 800f9fe:	d007      	beq.n	800fa10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa06:	3301      	adds	r3, #1
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	899b      	ldrh	r3, [r3, #12]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f9 f8a9 	bl	8008b70 <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <tcp_zero_window_probe+0x72>
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	891b      	ldrh	r3, [r3, #8]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d101      	bne.n	800fa36 <tcp_zero_window_probe+0x72>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e000      	b.n	800fa38 <tcp_zero_window_probe+0x74>
 800fa36:	2300      	movs	r3, #0
 800fa38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fa3a:	7ffb      	ldrb	r3, [r7, #31]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	bf0c      	ite	eq
 800fa40:	2301      	moveq	r3, #1
 800fa42:	2300      	movne	r3, #0
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa4c:	b299      	uxth	r1, r3
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	8bba      	ldrh	r2, [r7, #28]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff fdf8 	bl	800f64c <tcp_output_alloc_header>
 800fa5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d102      	bne.n	800fa6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fa64:	f04f 33ff 	mov.w	r3, #4294967295
 800fa68:	e04c      	b.n	800fb04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fa70:	7ffb      	ldrb	r3, [r7, #31]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d011      	beq.n	800fa9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	899b      	ldrh	r3, [r3, #12]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	b21b      	sxth	r3, r3
 800fa7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa82:	b21c      	sxth	r4, r3
 800fa84:	2011      	movs	r0, #17
 800fa86:	f7f9 f873 	bl	8008b70 <lwip_htons>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	b21b      	sxth	r3, r3
 800fa8e:	4323      	orrs	r3, r4
 800fa90:	b21b      	sxth	r3, r3
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	819a      	strh	r2, [r3, #12]
 800fa98:	e010      	b.n	800fabc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	3314      	adds	r3, #20
 800faa0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800faa2:	6a3b      	ldr	r3, [r7, #32]
 800faa4:	6858      	ldr	r0, [r3, #4]
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	891a      	ldrh	r2, [r3, #8]
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	891b      	ldrh	r3, [r3, #8]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	2201      	movs	r2, #1
 800fab6:	6939      	ldr	r1, [r7, #16]
 800fab8:	f7fa fe52 	bl	800a760 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f9 f869 	bl	8008b9a <lwip_htonl>
 800fac8:	4603      	mov	r3, r0
 800faca:	3301      	adds	r3, #1
 800facc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	da02      	bge.n	800fae0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fae4:	2200      	movs	r2, #0
 800fae6:	69b9      	ldr	r1, [r7, #24]
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff fded 	bl	800f6c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3304      	adds	r3, #4
 800faf4:	69b9      	ldr	r1, [r7, #24]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff fe26 	bl	800f748 <tcp_output_control_segment>
 800fafc:	4603      	mov	r3, r0
 800fafe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fb00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	372c      	adds	r7, #44	; 0x2c
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd90      	pop	{r4, r7, pc}
 800fb0c:	08015a28 	.word	0x08015a28
 800fb10:	08016220 	.word	0x08016220
 800fb14:	08015a7c 	.word	0x08015a7c

0800fb18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fb20:	f7fa ff0c 	bl	800a93c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fb24:	4b0a      	ldr	r3, [pc, #40]	; (800fb50 <tcpip_tcp_timer+0x38>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d103      	bne.n	800fb34 <tcpip_tcp_timer+0x1c>
 800fb2c:	4b09      	ldr	r3, [pc, #36]	; (800fb54 <tcpip_tcp_timer+0x3c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d005      	beq.n	800fb40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb34:	2200      	movs	r2, #0
 800fb36:	4908      	ldr	r1, [pc, #32]	; (800fb58 <tcpip_tcp_timer+0x40>)
 800fb38:	20fa      	movs	r0, #250	; 0xfa
 800fb3a:	f000 f8f3 	bl	800fd24 <sys_timeout>
 800fb3e:	e003      	b.n	800fb48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fb40:	4b06      	ldr	r3, [pc, #24]	; (800fb5c <tcpip_tcp_timer+0x44>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
  }
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	2000c954 	.word	0x2000c954
 800fb54:	2000c958 	.word	0x2000c958
 800fb58:	0800fb19 	.word	0x0800fb19
 800fb5c:	2000c9a0 	.word	0x2000c9a0

0800fb60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fb64:	4b0a      	ldr	r3, [pc, #40]	; (800fb90 <tcp_timer_needed+0x30>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10f      	bne.n	800fb8c <tcp_timer_needed+0x2c>
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <tcp_timer_needed+0x34>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <tcp_timer_needed+0x1c>
 800fb74:	4b08      	ldr	r3, [pc, #32]	; (800fb98 <tcp_timer_needed+0x38>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d007      	beq.n	800fb8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fb7c:	4b04      	ldr	r3, [pc, #16]	; (800fb90 <tcp_timer_needed+0x30>)
 800fb7e:	2201      	movs	r2, #1
 800fb80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb82:	2200      	movs	r2, #0
 800fb84:	4905      	ldr	r1, [pc, #20]	; (800fb9c <tcp_timer_needed+0x3c>)
 800fb86:	20fa      	movs	r0, #250	; 0xfa
 800fb88:	f000 f8cc 	bl	800fd24 <sys_timeout>
  }
}
 800fb8c:	bf00      	nop
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	2000c9a0 	.word	0x2000c9a0
 800fb94:	2000c954 	.word	0x2000c954
 800fb98:	2000c958 	.word	0x2000c958
 800fb9c:	0800fb19 	.word	0x0800fb19

0800fba0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fbac:	200a      	movs	r0, #10
 800fbae:	f7f9 fcb7 	bl	8009520 <memp_malloc>
 800fbb2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d109      	bne.n	800fbce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d151      	bne.n	800fc64 <sys_timeout_abs+0xc4>
 800fbc0:	4b2a      	ldr	r3, [pc, #168]	; (800fc6c <sys_timeout_abs+0xcc>)
 800fbc2:	22be      	movs	r2, #190	; 0xbe
 800fbc4:	492a      	ldr	r1, [pc, #168]	; (800fc70 <sys_timeout_abs+0xd0>)
 800fbc6:	482b      	ldr	r0, [pc, #172]	; (800fc74 <sys_timeout_abs+0xd4>)
 800fbc8:	f003 fbe2 	bl	8013390 <iprintf>
    return;
 800fbcc:	e04a      	b.n	800fc64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fbe6:	4b24      	ldr	r3, [pc, #144]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d103      	bne.n	800fbf6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fbee:	4a22      	ldr	r2, [pc, #136]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	6013      	str	r3, [r2, #0]
    return;
 800fbf4:	e037      	b.n	800fc66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	685a      	ldr	r2, [r3, #4]
 800fbfa:	4b1f      	ldr	r3, [pc, #124]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	0fdb      	lsrs	r3, r3, #31
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d007      	beq.n	800fc1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fc0e:	4b1a      	ldr	r3, [pc, #104]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fc16:	4a18      	ldr	r2, [pc, #96]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	e023      	b.n	800fc66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc1e:	4b16      	ldr	r3, [pc, #88]	; (800fc78 <sys_timeout_abs+0xd8>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	617b      	str	r3, [r7, #20]
 800fc24:	e01a      	b.n	800fc5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00b      	beq.n	800fc46 <sys_timeout_abs+0xa6>
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	0fdb      	lsrs	r3, r3, #31
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d007      	beq.n	800fc56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	601a      	str	r2, [r3, #0]
        break;
 800fc54:	e007      	b.n	800fc66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1e1      	bne.n	800fc26 <sys_timeout_abs+0x86>
 800fc62:	e000      	b.n	800fc66 <sys_timeout_abs+0xc6>
    return;
 800fc64:	bf00      	nop
      }
    }
  }
}
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	08016244 	.word	0x08016244
 800fc70:	08016278 	.word	0x08016278
 800fc74:	080162b8 	.word	0x080162b8
 800fc78:	2000c998 	.word	0x2000c998

0800fc7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	4798      	blx	r3

  now = sys_now();
 800fc8e:	f7f5 fca1 	bl	80055d4 <sys_now>
 800fc92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <lwip_cyclic_timer+0x5c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	0fdb      	lsrs	r3, r3, #31
 800fca8:	f003 0301 	and.w	r3, r3, #1
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d009      	beq.n	800fcc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	4413      	add	r3, r2
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	4907      	ldr	r1, [pc, #28]	; (800fcdc <lwip_cyclic_timer+0x60>)
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff ff6e 	bl	800fba0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fcc4:	e004      	b.n	800fcd0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	4904      	ldr	r1, [pc, #16]	; (800fcdc <lwip_cyclic_timer+0x60>)
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7ff ff68 	bl	800fba0 <sys_timeout_abs>
}
 800fcd0:	bf00      	nop
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	2000c99c 	.word	0x2000c99c
 800fcdc:	0800fc7d 	.word	0x0800fc7d

0800fce0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fce6:	2301      	movs	r3, #1
 800fce8:	607b      	str	r3, [r7, #4]
 800fcea:	e00e      	b.n	800fd0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fcec:	4a0b      	ldr	r2, [pc, #44]	; (800fd1c <sys_timeouts_init+0x3c>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	00db      	lsls	r3, r3, #3
 800fcf8:	4a08      	ldr	r2, [pc, #32]	; (800fd1c <sys_timeouts_init+0x3c>)
 800fcfa:	4413      	add	r3, r2
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	4908      	ldr	r1, [pc, #32]	; (800fd20 <sys_timeouts_init+0x40>)
 800fd00:	f000 f810 	bl	800fd24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3301      	adds	r3, #1
 800fd08:	607b      	str	r3, [r7, #4]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b02      	cmp	r3, #2
 800fd0e:	d9ed      	bls.n	800fcec <sys_timeouts_init+0xc>
  }
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08016e78 	.word	0x08016e78
 800fd20:	0800fc7d 	.word	0x0800fc7d

0800fd24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd36:	d306      	bcc.n	800fd46 <sys_timeout+0x22>
 800fd38:	4b0a      	ldr	r3, [pc, #40]	; (800fd64 <sys_timeout+0x40>)
 800fd3a:	f240 1229 	movw	r2, #297	; 0x129
 800fd3e:	490a      	ldr	r1, [pc, #40]	; (800fd68 <sys_timeout+0x44>)
 800fd40:	480a      	ldr	r0, [pc, #40]	; (800fd6c <sys_timeout+0x48>)
 800fd42:	f003 fb25 	bl	8013390 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fd46:	f7f5 fc45 	bl	80055d4 <sys_now>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	4413      	add	r3, r2
 800fd50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	6978      	ldr	r0, [r7, #20]
 800fd58:	f7ff ff22 	bl	800fba0 <sys_timeout_abs>
#endif
}
 800fd5c:	bf00      	nop
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	08016244 	.word	0x08016244
 800fd68:	080162e0 	.word	0x080162e0
 800fd6c:	080162b8 	.word	0x080162b8

0800fd70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fd76:	f7f5 fc2d 	bl	80055d4 <sys_now>
 800fd7a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800fd7c:	4b17      	ldr	r3, [pc, #92]	; (800fddc <sys_check_timeouts+0x6c>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d022      	beq.n	800fdce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	1ad3      	subs	r3, r2, r3
 800fd90:	0fdb      	lsrs	r3, r3, #31
 800fd92:	f003 0301 	and.w	r3, r3, #1
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d11a      	bne.n	800fdd2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a0e      	ldr	r2, [pc, #56]	; (800fddc <sys_check_timeouts+0x6c>)
 800fda2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	4a0a      	ldr	r2, [pc, #40]	; (800fde0 <sys_check_timeouts+0x70>)
 800fdb6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fdb8:	68b9      	ldr	r1, [r7, #8]
 800fdba:	200a      	movs	r0, #10
 800fdbc:	f7f9 fc26 	bl	800960c <memp_free>
    if (handler != NULL) {
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d0da      	beq.n	800fd7c <sys_check_timeouts+0xc>
      handler(arg);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6838      	ldr	r0, [r7, #0]
 800fdca:	4798      	blx	r3
  do {
 800fdcc:	e7d6      	b.n	800fd7c <sys_check_timeouts+0xc>
      return;
 800fdce:	bf00      	nop
 800fdd0:	e000      	b.n	800fdd4 <sys_check_timeouts+0x64>
      return;
 800fdd2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	2000c998 	.word	0x2000c998
 800fde0:	2000c99c 	.word	0x2000c99c

0800fde4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800fdea:	4b16      	ldr	r3, [pc, #88]	; (800fe44 <sys_timeouts_sleeptime+0x60>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d102      	bne.n	800fdf8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800fdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdf6:	e020      	b.n	800fe3a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800fdf8:	f7f5 fbec 	bl	80055d4 <sys_now>
 800fdfc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800fdfe:	4b11      	ldr	r3, [pc, #68]	; (800fe44 <sys_timeouts_sleeptime+0x60>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	685a      	ldr	r2, [r3, #4]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	0fdb      	lsrs	r3, r3, #31
 800fe0a:	f003 0301 	and.w	r3, r3, #1
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <sys_timeouts_sleeptime+0x34>
    return 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	e010      	b.n	800fe3a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800fe18:	4b0a      	ldr	r3, [pc, #40]	; (800fe44 <sys_timeouts_sleeptime+0x60>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	685a      	ldr	r2, [r3, #4]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	da06      	bge.n	800fe38 <sys_timeouts_sleeptime+0x54>
 800fe2a:	4b07      	ldr	r3, [pc, #28]	; (800fe48 <sys_timeouts_sleeptime+0x64>)
 800fe2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fe30:	4906      	ldr	r1, [pc, #24]	; (800fe4c <sys_timeouts_sleeptime+0x68>)
 800fe32:	4807      	ldr	r0, [pc, #28]	; (800fe50 <sys_timeouts_sleeptime+0x6c>)
 800fe34:	f003 faac 	bl	8013390 <iprintf>
    return ret;
 800fe38:	683b      	ldr	r3, [r7, #0]
  }
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	2000c998 	.word	0x2000c998
 800fe48:	08016244 	.word	0x08016244
 800fe4c:	08016318 	.word	0x08016318
 800fe50:	080162b8 	.word	0x080162b8

0800fe54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fe58:	f003 fab2 	bl	80133c0 <rand>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	4b01      	ldr	r3, [pc, #4]	; (800fe74 <udp_init+0x20>)
 800fe6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fe70:	bf00      	nop
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	2000002c 	.word	0x2000002c

0800fe78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fe82:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <udp_new_port+0x68>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	1c5a      	adds	r2, r3, #1
 800fe88:	b291      	uxth	r1, r2
 800fe8a:	4a15      	ldr	r2, [pc, #84]	; (800fee0 <udp_new_port+0x68>)
 800fe8c:	8011      	strh	r1, [r2, #0]
 800fe8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d103      	bne.n	800fe9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fe96:	4b12      	ldr	r3, [pc, #72]	; (800fee0 <udp_new_port+0x68>)
 800fe98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fe9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe9e:	4b11      	ldr	r3, [pc, #68]	; (800fee4 <udp_new_port+0x6c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	e011      	b.n	800feca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	8a5a      	ldrh	r2, [r3, #18]
 800feaa:	4b0d      	ldr	r3, [pc, #52]	; (800fee0 <udp_new_port+0x68>)
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d108      	bne.n	800fec4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800feb2:	88fb      	ldrh	r3, [r7, #6]
 800feb4:	3301      	adds	r3, #1
 800feb6:	80fb      	strh	r3, [r7, #6]
 800feb8:	88fb      	ldrh	r3, [r7, #6]
 800feba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800febe:	d3e0      	bcc.n	800fe82 <udp_new_port+0xa>
        return 0;
 800fec0:	2300      	movs	r3, #0
 800fec2:	e007      	b.n	800fed4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	603b      	str	r3, [r7, #0]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1ea      	bne.n	800fea6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fed0:	4b03      	ldr	r3, [pc, #12]	; (800fee0 <udp_new_port+0x68>)
 800fed2:	881b      	ldrh	r3, [r3, #0]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	2000002c 	.word	0x2000002c
 800fee4:	2000c9a4 	.word	0x2000c9a4

0800fee8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d105      	bne.n	800ff08 <udp_input_local_match+0x20>
 800fefc:	4b27      	ldr	r3, [pc, #156]	; (800ff9c <udp_input_local_match+0xb4>)
 800fefe:	2287      	movs	r2, #135	; 0x87
 800ff00:	4927      	ldr	r1, [pc, #156]	; (800ffa0 <udp_input_local_match+0xb8>)
 800ff02:	4828      	ldr	r0, [pc, #160]	; (800ffa4 <udp_input_local_match+0xbc>)
 800ff04:	f003 fa44 	bl	8013390 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d105      	bne.n	800ff1a <udp_input_local_match+0x32>
 800ff0e:	4b23      	ldr	r3, [pc, #140]	; (800ff9c <udp_input_local_match+0xb4>)
 800ff10:	2288      	movs	r2, #136	; 0x88
 800ff12:	4925      	ldr	r1, [pc, #148]	; (800ffa8 <udp_input_local_match+0xc0>)
 800ff14:	4823      	ldr	r0, [pc, #140]	; (800ffa4 <udp_input_local_match+0xbc>)
 800ff16:	f003 fa3b 	bl	8013390 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	7a1b      	ldrb	r3, [r3, #8]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00b      	beq.n	800ff3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	7a1a      	ldrb	r2, [r3, #8]
 800ff26:	4b21      	ldr	r3, [pc, #132]	; (800ffac <udp_input_local_match+0xc4>)
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d001      	beq.n	800ff3a <udp_input_local_match+0x52>
    return 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	e02b      	b.n	800ff92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ff3a:	79fb      	ldrb	r3, [r7, #7]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d018      	beq.n	800ff72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d013      	beq.n	800ff6e <udp_input_local_match+0x86>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00f      	beq.n	800ff6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff4e:	4b17      	ldr	r3, [pc, #92]	; (800ffac <udp_input_local_match+0xc4>)
 800ff50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff56:	d00a      	beq.n	800ff6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	4b13      	ldr	r3, [pc, #76]	; (800ffac <udp_input_local_match+0xc4>)
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	405a      	eors	r2, r3
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	3308      	adds	r3, #8
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d110      	bne.n	800ff90 <udp_input_local_match+0xa8>
          return 1;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e00f      	b.n	800ff92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d009      	beq.n	800ff8c <udp_input_local_match+0xa4>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d005      	beq.n	800ff8c <udp_input_local_match+0xa4>
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	4b09      	ldr	r3, [pc, #36]	; (800ffac <udp_input_local_match+0xc4>)
 800ff86:	695b      	ldr	r3, [r3, #20]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d101      	bne.n	800ff90 <udp_input_local_match+0xa8>
        return 1;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	0801632c 	.word	0x0801632c
 800ffa0:	0801635c 	.word	0x0801635c
 800ffa4:	08016380 	.word	0x08016380
 800ffa8:	080163a8 	.word	0x080163a8
 800ffac:	200091f4 	.word	0x200091f4

0800ffb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b08d      	sub	sp, #52	; 0x34
 800ffb4:	af02      	add	r7, sp, #8
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d105      	bne.n	800ffd0 <udp_input+0x20>
 800ffc4:	4b7c      	ldr	r3, [pc, #496]	; (80101b8 <udp_input+0x208>)
 800ffc6:	22cf      	movs	r2, #207	; 0xcf
 800ffc8:	497c      	ldr	r1, [pc, #496]	; (80101bc <udp_input+0x20c>)
 800ffca:	487d      	ldr	r0, [pc, #500]	; (80101c0 <udp_input+0x210>)
 800ffcc:	f003 f9e0 	bl	8013390 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d105      	bne.n	800ffe2 <udp_input+0x32>
 800ffd6:	4b78      	ldr	r3, [pc, #480]	; (80101b8 <udp_input+0x208>)
 800ffd8:	22d0      	movs	r2, #208	; 0xd0
 800ffda:	497a      	ldr	r1, [pc, #488]	; (80101c4 <udp_input+0x214>)
 800ffdc:	4878      	ldr	r0, [pc, #480]	; (80101c0 <udp_input+0x210>)
 800ffde:	f003 f9d7 	bl	8013390 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	895b      	ldrh	r3, [r3, #10]
 800ffe6:	2b07      	cmp	r3, #7
 800ffe8:	d803      	bhi.n	800fff2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f7fa f9b2 	bl	800a354 <pbuf_free>
    goto end;
 800fff0:	e0de      	b.n	80101b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fff8:	4b73      	ldr	r3, [pc, #460]	; (80101c8 <udp_input+0x218>)
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	4a72      	ldr	r2, [pc, #456]	; (80101c8 <udp_input+0x218>)
 800fffe:	6812      	ldr	r2, [r2, #0]
 8010000:	4611      	mov	r1, r2
 8010002:	4618      	mov	r0, r3
 8010004:	f001 ff80 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8010008:	4603      	mov	r3, r0
 801000a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	b29b      	uxth	r3, r3
 8010012:	4618      	mov	r0, r3
 8010014:	f7f8 fdac 	bl	8008b70 <lwip_htons>
 8010018:	4603      	mov	r3, r0
 801001a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	885b      	ldrh	r3, [r3, #2]
 8010020:	b29b      	uxth	r3, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7f8 fda4 	bl	8008b70 <lwip_htons>
 8010028:	4603      	mov	r3, r0
 801002a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801002c:	2300      	movs	r3, #0
 801002e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010030:	2300      	movs	r3, #0
 8010032:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010034:	2300      	movs	r3, #0
 8010036:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010038:	4b64      	ldr	r3, [pc, #400]	; (80101cc <udp_input+0x21c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	627b      	str	r3, [r7, #36]	; 0x24
 801003e:	e054      	b.n	80100ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	8a5b      	ldrh	r3, [r3, #18]
 8010044:	89fa      	ldrh	r2, [r7, #14]
 8010046:	429a      	cmp	r2, r3
 8010048:	d14a      	bne.n	80100e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801004a:	7cfb      	ldrb	r3, [r7, #19]
 801004c:	461a      	mov	r2, r3
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010052:	f7ff ff49 	bl	800fee8 <udp_input_local_match>
 8010056:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010058:	2b00      	cmp	r3, #0
 801005a:	d041      	beq.n	80100e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	7c1b      	ldrb	r3, [r3, #16]
 8010060:	f003 0304 	and.w	r3, r3, #4
 8010064:	2b00      	cmp	r3, #0
 8010066:	d11d      	bne.n	80100a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d102      	bne.n	8010074 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	61fb      	str	r3, [r7, #28]
 8010072:	e017      	b.n	80100a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010074:	7cfb      	ldrb	r3, [r7, #19]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d014      	beq.n	80100a4 <udp_input+0xf4>
 801007a:	4b53      	ldr	r3, [pc, #332]	; (80101c8 <udp_input+0x218>)
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010082:	d10f      	bne.n	80100a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	3304      	adds	r3, #4
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d008      	beq.n	80100a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	3304      	adds	r3, #4
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	429a      	cmp	r2, r3
 801009e:	d101      	bne.n	80100a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80100a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	8a9b      	ldrh	r3, [r3, #20]
 80100a8:	8a3a      	ldrh	r2, [r7, #16]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d118      	bne.n	80100e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d005      	beq.n	80100c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b8:	685a      	ldr	r2, [r3, #4]
 80100ba:	4b43      	ldr	r3, [pc, #268]	; (80101c8 <udp_input+0x218>)
 80100bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100be:	429a      	cmp	r2, r3
 80100c0:	d10e      	bne.n	80100e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d014      	beq.n	80100f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80100c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ca:	68da      	ldr	r2, [r3, #12]
 80100cc:	6a3b      	ldr	r3, [r7, #32]
 80100ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80100d0:	4b3e      	ldr	r3, [pc, #248]	; (80101cc <udp_input+0x21c>)
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80100d8:	4a3c      	ldr	r2, [pc, #240]	; (80101cc <udp_input+0x21c>)
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80100de:	e008      	b.n	80100f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80100e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	627b      	str	r3, [r7, #36]	; 0x24
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1a7      	bne.n	8010040 <udp_input+0x90>
 80100f0:	e000      	b.n	80100f4 <udp_input+0x144>
        break;
 80100f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d101      	bne.n	80100fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80100fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010100:	2b00      	cmp	r3, #0
 8010102:	d002      	beq.n	801010a <udp_input+0x15a>
    for_us = 1;
 8010104:	2301      	movs	r3, #1
 8010106:	76fb      	strb	r3, [r7, #27]
 8010108:	e00a      	b.n	8010120 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	3304      	adds	r3, #4
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	4b2d      	ldr	r3, [pc, #180]	; (80101c8 <udp_input+0x218>)
 8010112:	695b      	ldr	r3, [r3, #20]
 8010114:	429a      	cmp	r2, r3
 8010116:	bf0c      	ite	eq
 8010118:	2301      	moveq	r3, #1
 801011a:	2300      	movne	r3, #0
 801011c:	b2db      	uxtb	r3, r3
 801011e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010120:	7efb      	ldrb	r3, [r7, #27]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d041      	beq.n	80101aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010126:	2108      	movs	r1, #8
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7fa f88d 	bl	800a248 <pbuf_remove_header>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00a      	beq.n	801014a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010134:	4b20      	ldr	r3, [pc, #128]	; (80101b8 <udp_input+0x208>)
 8010136:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801013a:	4925      	ldr	r1, [pc, #148]	; (80101d0 <udp_input+0x220>)
 801013c:	4820      	ldr	r0, [pc, #128]	; (80101c0 <udp_input+0x210>)
 801013e:	f003 f927 	bl	8013390 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fa f906 	bl	800a354 <pbuf_free>
      goto end;
 8010148:	e032      	b.n	80101b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	2b00      	cmp	r3, #0
 801014e:	d012      	beq.n	8010176 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	699c      	ldr	r4, [r3, #24]
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	69d8      	ldr	r0, [r3, #28]
 8010160:	8a3b      	ldrh	r3, [r7, #16]
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	4b1b      	ldr	r3, [pc, #108]	; (80101d4 <udp_input+0x224>)
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801016a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801016c:	e021      	b.n	80101b2 <udp_input+0x202>
        pbuf_free(p);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fa f8f0 	bl	800a354 <pbuf_free>
        goto end;
 8010174:	e01c      	b.n	80101b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010176:	7cfb      	ldrb	r3, [r7, #19]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d112      	bne.n	80101a2 <udp_input+0x1f2>
 801017c:	4b12      	ldr	r3, [pc, #72]	; (80101c8 <udp_input+0x218>)
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010184:	2be0      	cmp	r3, #224	; 0xe0
 8010186:	d00c      	beq.n	80101a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010188:	4b0f      	ldr	r3, [pc, #60]	; (80101c8 <udp_input+0x218>)
 801018a:	899b      	ldrh	r3, [r3, #12]
 801018c:	3308      	adds	r3, #8
 801018e:	b29b      	uxth	r3, r3
 8010190:	b21b      	sxth	r3, r3
 8010192:	4619      	mov	r1, r3
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7fa f8ca 	bl	800a32e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801019a:	2103      	movs	r1, #3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f001 fb93 	bl	80118c8 <icmp_dest_unreach>
      pbuf_free(p);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7fa f8d6 	bl	800a354 <pbuf_free>
  return;
 80101a8:	e003      	b.n	80101b2 <udp_input+0x202>
    pbuf_free(p);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7fa f8d2 	bl	800a354 <pbuf_free>
  return;
 80101b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80101b2:	372c      	adds	r7, #44	; 0x2c
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd90      	pop	{r4, r7, pc}
 80101b8:	0801632c 	.word	0x0801632c
 80101bc:	080163d0 	.word	0x080163d0
 80101c0:	08016380 	.word	0x08016380
 80101c4:	080163e8 	.word	0x080163e8
 80101c8:	200091f4 	.word	0x200091f4
 80101cc:	2000c9a4 	.word	0x2000c9a4
 80101d0:	08016404 	.word	0x08016404
 80101d4:	20009204 	.word	0x20009204

080101d8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d109      	bne.n	80101fc <udp_send+0x24>
 80101e8:	4b11      	ldr	r3, [pc, #68]	; (8010230 <udp_send+0x58>)
 80101ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 80101ee:	4911      	ldr	r1, [pc, #68]	; (8010234 <udp_send+0x5c>)
 80101f0:	4811      	ldr	r0, [pc, #68]	; (8010238 <udp_send+0x60>)
 80101f2:	f003 f8cd 	bl	8013390 <iprintf>
 80101f6:	f06f 030f 	mvn.w	r3, #15
 80101fa:	e015      	b.n	8010228 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d109      	bne.n	8010216 <udp_send+0x3e>
 8010202:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <udp_send+0x58>)
 8010204:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010208:	490c      	ldr	r1, [pc, #48]	; (801023c <udp_send+0x64>)
 801020a:	480b      	ldr	r0, [pc, #44]	; (8010238 <udp_send+0x60>)
 801020c:	f003 f8c0 	bl	8013390 <iprintf>
 8010210:	f06f 030f 	mvn.w	r3, #15
 8010214:	e008      	b.n	8010228 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	1d1a      	adds	r2, r3, #4
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	8a9b      	ldrh	r3, [r3, #20]
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f80d 	bl	8010240 <udp_sendto>
 8010226:	4603      	mov	r3, r0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	0801632c 	.word	0x0801632c
 8010234:	08016420 	.word	0x08016420
 8010238:	08016380 	.word	0x08016380
 801023c:	08016438 	.word	0x08016438

08010240 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b088      	sub	sp, #32
 8010244:	af02      	add	r7, sp, #8
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d109      	bne.n	8010268 <udp_sendto+0x28>
 8010254:	4b23      	ldr	r3, [pc, #140]	; (80102e4 <udp_sendto+0xa4>)
 8010256:	f44f 7206 	mov.w	r2, #536	; 0x218
 801025a:	4923      	ldr	r1, [pc, #140]	; (80102e8 <udp_sendto+0xa8>)
 801025c:	4823      	ldr	r0, [pc, #140]	; (80102ec <udp_sendto+0xac>)
 801025e:	f003 f897 	bl	8013390 <iprintf>
 8010262:	f06f 030f 	mvn.w	r3, #15
 8010266:	e038      	b.n	80102da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d109      	bne.n	8010282 <udp_sendto+0x42>
 801026e:	4b1d      	ldr	r3, [pc, #116]	; (80102e4 <udp_sendto+0xa4>)
 8010270:	f240 2219 	movw	r2, #537	; 0x219
 8010274:	491e      	ldr	r1, [pc, #120]	; (80102f0 <udp_sendto+0xb0>)
 8010276:	481d      	ldr	r0, [pc, #116]	; (80102ec <udp_sendto+0xac>)
 8010278:	f003 f88a 	bl	8013390 <iprintf>
 801027c:	f06f 030f 	mvn.w	r3, #15
 8010280:	e02b      	b.n	80102da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d109      	bne.n	801029c <udp_sendto+0x5c>
 8010288:	4b16      	ldr	r3, [pc, #88]	; (80102e4 <udp_sendto+0xa4>)
 801028a:	f240 221a 	movw	r2, #538	; 0x21a
 801028e:	4919      	ldr	r1, [pc, #100]	; (80102f4 <udp_sendto+0xb4>)
 8010290:	4816      	ldr	r0, [pc, #88]	; (80102ec <udp_sendto+0xac>)
 8010292:	f003 f87d 	bl	8013390 <iprintf>
 8010296:	f06f 030f 	mvn.w	r3, #15
 801029a:	e01e      	b.n	80102da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	7a1b      	ldrb	r3, [r3, #8]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	7a1b      	ldrb	r3, [r3, #8]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7f9 fcc5 	bl	8009c38 <netif_get_by_index>
 80102ae:	6178      	str	r0, [r7, #20]
 80102b0:	e003      	b.n	80102ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f001 fb92 	bl	80119dc <ip4_route>
 80102b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d102      	bne.n	80102c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80102c0:	f06f 0303 	mvn.w	r3, #3
 80102c4:	e009      	b.n	80102da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80102c6:	887a      	ldrh	r2, [r7, #2]
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	4613      	mov	r3, r2
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f000 f810 	bl	80102f8 <udp_sendto_if>
 80102d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3718      	adds	r7, #24
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	0801632c 	.word	0x0801632c
 80102e8:	08016450 	.word	0x08016450
 80102ec:	08016380 	.word	0x08016380
 80102f0:	08016468 	.word	0x08016468
 80102f4:	08016484 	.word	0x08016484

080102f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d109      	bne.n	8010320 <udp_sendto_if+0x28>
 801030c:	4b2e      	ldr	r3, [pc, #184]	; (80103c8 <udp_sendto_if+0xd0>)
 801030e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010312:	492e      	ldr	r1, [pc, #184]	; (80103cc <udp_sendto_if+0xd4>)
 8010314:	482e      	ldr	r0, [pc, #184]	; (80103d0 <udp_sendto_if+0xd8>)
 8010316:	f003 f83b 	bl	8013390 <iprintf>
 801031a:	f06f 030f 	mvn.w	r3, #15
 801031e:	e04f      	b.n	80103c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d109      	bne.n	801033a <udp_sendto_if+0x42>
 8010326:	4b28      	ldr	r3, [pc, #160]	; (80103c8 <udp_sendto_if+0xd0>)
 8010328:	f240 2281 	movw	r2, #641	; 0x281
 801032c:	4929      	ldr	r1, [pc, #164]	; (80103d4 <udp_sendto_if+0xdc>)
 801032e:	4828      	ldr	r0, [pc, #160]	; (80103d0 <udp_sendto_if+0xd8>)
 8010330:	f003 f82e 	bl	8013390 <iprintf>
 8010334:	f06f 030f 	mvn.w	r3, #15
 8010338:	e042      	b.n	80103c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d109      	bne.n	8010354 <udp_sendto_if+0x5c>
 8010340:	4b21      	ldr	r3, [pc, #132]	; (80103c8 <udp_sendto_if+0xd0>)
 8010342:	f240 2282 	movw	r2, #642	; 0x282
 8010346:	4924      	ldr	r1, [pc, #144]	; (80103d8 <udp_sendto_if+0xe0>)
 8010348:	4821      	ldr	r0, [pc, #132]	; (80103d0 <udp_sendto_if+0xd8>)
 801034a:	f003 f821 	bl	8013390 <iprintf>
 801034e:	f06f 030f 	mvn.w	r3, #15
 8010352:	e035      	b.n	80103c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d109      	bne.n	801036e <udp_sendto_if+0x76>
 801035a:	4b1b      	ldr	r3, [pc, #108]	; (80103c8 <udp_sendto_if+0xd0>)
 801035c:	f240 2283 	movw	r2, #643	; 0x283
 8010360:	491e      	ldr	r1, [pc, #120]	; (80103dc <udp_sendto_if+0xe4>)
 8010362:	481b      	ldr	r0, [pc, #108]	; (80103d0 <udp_sendto_if+0xd8>)
 8010364:	f003 f814 	bl	8013390 <iprintf>
 8010368:	f06f 030f 	mvn.w	r3, #15
 801036c:	e028      	b.n	80103c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d009      	beq.n	8010388 <udp_sendto_if+0x90>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d005      	beq.n	8010388 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010384:	2be0      	cmp	r3, #224	; 0xe0
 8010386:	d103      	bne.n	8010390 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010388:	6a3b      	ldr	r3, [r7, #32]
 801038a:	3304      	adds	r3, #4
 801038c:	617b      	str	r3, [r7, #20]
 801038e:	e00b      	b.n	80103a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	3304      	adds	r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	429a      	cmp	r2, r3
 801039c:	d002      	beq.n	80103a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801039e:	f06f 0303 	mvn.w	r3, #3
 80103a2:	e00d      	b.n	80103c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80103a8:	887a      	ldrh	r2, [r7, #2]
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	9301      	str	r3, [sp, #4]
 80103ae:	6a3b      	ldr	r3, [r7, #32]
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	4613      	mov	r3, r2
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	68b9      	ldr	r1, [r7, #8]
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f000 f811 	bl	80103e0 <udp_sendto_if_src>
 80103be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3718      	adds	r7, #24
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	0801632c 	.word	0x0801632c
 80103cc:	080164a0 	.word	0x080164a0
 80103d0:	08016380 	.word	0x08016380
 80103d4:	080164bc 	.word	0x080164bc
 80103d8:	080164d8 	.word	0x080164d8
 80103dc:	080164f8 	.word	0x080164f8

080103e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b08c      	sub	sp, #48	; 0x30
 80103e4:	af04      	add	r7, sp, #16
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
 80103ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d109      	bne.n	8010408 <udp_sendto_if_src+0x28>
 80103f4:	4b65      	ldr	r3, [pc, #404]	; (801058c <udp_sendto_if_src+0x1ac>)
 80103f6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80103fa:	4965      	ldr	r1, [pc, #404]	; (8010590 <udp_sendto_if_src+0x1b0>)
 80103fc:	4865      	ldr	r0, [pc, #404]	; (8010594 <udp_sendto_if_src+0x1b4>)
 80103fe:	f002 ffc7 	bl	8013390 <iprintf>
 8010402:	f06f 030f 	mvn.w	r3, #15
 8010406:	e0bc      	b.n	8010582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d109      	bne.n	8010422 <udp_sendto_if_src+0x42>
 801040e:	4b5f      	ldr	r3, [pc, #380]	; (801058c <udp_sendto_if_src+0x1ac>)
 8010410:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010414:	4960      	ldr	r1, [pc, #384]	; (8010598 <udp_sendto_if_src+0x1b8>)
 8010416:	485f      	ldr	r0, [pc, #380]	; (8010594 <udp_sendto_if_src+0x1b4>)
 8010418:	f002 ffba 	bl	8013390 <iprintf>
 801041c:	f06f 030f 	mvn.w	r3, #15
 8010420:	e0af      	b.n	8010582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d109      	bne.n	801043c <udp_sendto_if_src+0x5c>
 8010428:	4b58      	ldr	r3, [pc, #352]	; (801058c <udp_sendto_if_src+0x1ac>)
 801042a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801042e:	495b      	ldr	r1, [pc, #364]	; (801059c <udp_sendto_if_src+0x1bc>)
 8010430:	4858      	ldr	r0, [pc, #352]	; (8010594 <udp_sendto_if_src+0x1b4>)
 8010432:	f002 ffad 	bl	8013390 <iprintf>
 8010436:	f06f 030f 	mvn.w	r3, #15
 801043a:	e0a2      	b.n	8010582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	2b00      	cmp	r3, #0
 8010440:	d109      	bne.n	8010456 <udp_sendto_if_src+0x76>
 8010442:	4b52      	ldr	r3, [pc, #328]	; (801058c <udp_sendto_if_src+0x1ac>)
 8010444:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010448:	4955      	ldr	r1, [pc, #340]	; (80105a0 <udp_sendto_if_src+0x1c0>)
 801044a:	4852      	ldr	r0, [pc, #328]	; (8010594 <udp_sendto_if_src+0x1b4>)
 801044c:	f002 ffa0 	bl	8013390 <iprintf>
 8010450:	f06f 030f 	mvn.w	r3, #15
 8010454:	e095      	b.n	8010582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010458:	2b00      	cmp	r3, #0
 801045a:	d109      	bne.n	8010470 <udp_sendto_if_src+0x90>
 801045c:	4b4b      	ldr	r3, [pc, #300]	; (801058c <udp_sendto_if_src+0x1ac>)
 801045e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010462:	4950      	ldr	r1, [pc, #320]	; (80105a4 <udp_sendto_if_src+0x1c4>)
 8010464:	484b      	ldr	r0, [pc, #300]	; (8010594 <udp_sendto_if_src+0x1b4>)
 8010466:	f002 ff93 	bl	8013390 <iprintf>
 801046a:	f06f 030f 	mvn.w	r3, #15
 801046e:	e088      	b.n	8010582 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	8a5b      	ldrh	r3, [r3, #18]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10f      	bne.n	8010498 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010478:	68f9      	ldr	r1, [r7, #12]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8a5b      	ldrh	r3, [r3, #18]
 801047e:	461a      	mov	r2, r3
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f000 f893 	bl	80105ac <udp_bind>
 8010486:	4603      	mov	r3, r0
 8010488:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801048a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010492:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010496:	e074      	b.n	8010582 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	891b      	ldrh	r3, [r3, #8]
 801049c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d902      	bls.n	80104aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80104a4:	f04f 33ff 	mov.w	r3, #4294967295
 80104a8:	e06b      	b.n	8010582 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80104aa:	2108      	movs	r1, #8
 80104ac:	68b8      	ldr	r0, [r7, #8]
 80104ae:	f7f9 febb 	bl	800a228 <pbuf_add_header>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d015      	beq.n	80104e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80104b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104bc:	2108      	movs	r1, #8
 80104be:	2022      	movs	r0, #34	; 0x22
 80104c0:	f7f9 fc64 	bl	8009d8c <pbuf_alloc>
 80104c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80104cc:	f04f 33ff 	mov.w	r3, #4294967295
 80104d0:	e057      	b.n	8010582 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	891b      	ldrh	r3, [r3, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d006      	beq.n	80104e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80104da:	68b9      	ldr	r1, [r7, #8]
 80104dc:	69f8      	ldr	r0, [r7, #28]
 80104de:	f7fa f85d 	bl	800a59c <pbuf_chain>
 80104e2:	e001      	b.n	80104e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	895b      	ldrh	r3, [r3, #10]
 80104ec:	2b07      	cmp	r3, #7
 80104ee:	d806      	bhi.n	80104fe <udp_sendto_if_src+0x11e>
 80104f0:	4b26      	ldr	r3, [pc, #152]	; (801058c <udp_sendto_if_src+0x1ac>)
 80104f2:	f240 320d 	movw	r2, #781	; 0x30d
 80104f6:	492c      	ldr	r1, [pc, #176]	; (80105a8 <udp_sendto_if_src+0x1c8>)
 80104f8:	4826      	ldr	r0, [pc, #152]	; (8010594 <udp_sendto_if_src+0x1b4>)
 80104fa:	f002 ff49 	bl	8013390 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	8a5b      	ldrh	r3, [r3, #18]
 8010508:	4618      	mov	r0, r3
 801050a:	f7f8 fb31 	bl	8008b70 <lwip_htons>
 801050e:	4603      	mov	r3, r0
 8010510:	461a      	mov	r2, r3
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010516:	887b      	ldrh	r3, [r7, #2]
 8010518:	4618      	mov	r0, r3
 801051a:	f7f8 fb29 	bl	8008b70 <lwip_htons>
 801051e:	4603      	mov	r3, r0
 8010520:	461a      	mov	r2, r3
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2200      	movs	r2, #0
 801052a:	719a      	strb	r2, [r3, #6]
 801052c:	2200      	movs	r2, #0
 801052e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	891b      	ldrh	r3, [r3, #8]
 8010534:	4618      	mov	r0, r3
 8010536:	f7f8 fb1b 	bl	8008b70 <lwip_htons>
 801053a:	4603      	mov	r3, r0
 801053c:	461a      	mov	r2, r3
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010542:	2311      	movs	r3, #17
 8010544:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	7adb      	ldrb	r3, [r3, #11]
 801054a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	7a9b      	ldrb	r3, [r3, #10]
 8010550:	7cb9      	ldrb	r1, [r7, #18]
 8010552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010554:	9202      	str	r2, [sp, #8]
 8010556:	7cfa      	ldrb	r2, [r7, #19]
 8010558:	9201      	str	r2, [sp, #4]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	460b      	mov	r3, r1
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010562:	69f8      	ldr	r0, [r7, #28]
 8010564:	f001 fc22 	bl	8011dac <ip4_output_if_src>
 8010568:	4603      	mov	r3, r0
 801056a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801056c:	69fa      	ldr	r2, [r7, #28]
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	429a      	cmp	r2, r3
 8010572:	d004      	beq.n	801057e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010574:	69f8      	ldr	r0, [r7, #28]
 8010576:	f7f9 feed 	bl	800a354 <pbuf_free>
    q = NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801057e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	0801632c 	.word	0x0801632c
 8010590:	08016518 	.word	0x08016518
 8010594:	08016380 	.word	0x08016380
 8010598:	08016538 	.word	0x08016538
 801059c:	08016558 	.word	0x08016558
 80105a0:	0801657c 	.word	0x0801657c
 80105a4:	080165a0 	.word	0x080165a0
 80105a8:	080165c4 	.word	0x080165c4

080105ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b086      	sub	sp, #24
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	4613      	mov	r3, r2
 80105b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80105c0:	4b39      	ldr	r3, [pc, #228]	; (80106a8 <udp_bind+0xfc>)
 80105c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d109      	bne.n	80105de <udp_bind+0x32>
 80105ca:	4b38      	ldr	r3, [pc, #224]	; (80106ac <udp_bind+0x100>)
 80105cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80105d0:	4937      	ldr	r1, [pc, #220]	; (80106b0 <udp_bind+0x104>)
 80105d2:	4838      	ldr	r0, [pc, #224]	; (80106b4 <udp_bind+0x108>)
 80105d4:	f002 fedc 	bl	8013390 <iprintf>
 80105d8:	f06f 030f 	mvn.w	r3, #15
 80105dc:	e060      	b.n	80106a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105e2:	4b35      	ldr	r3, [pc, #212]	; (80106b8 <udp_bind+0x10c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	617b      	str	r3, [r7, #20]
 80105e8:	e009      	b.n	80105fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d102      	bne.n	80105f8 <udp_bind+0x4c>
      rebind = 1;
 80105f2:	2301      	movs	r3, #1
 80105f4:	74fb      	strb	r3, [r7, #19]
      break;
 80105f6:	e005      	b.n	8010604 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	617b      	str	r3, [r7, #20]
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1f2      	bne.n	80105ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010604:	88fb      	ldrh	r3, [r7, #6]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d109      	bne.n	801061e <udp_bind+0x72>
    port = udp_new_port();
 801060a:	f7ff fc35 	bl	800fe78 <udp_new_port>
 801060e:	4603      	mov	r3, r0
 8010610:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010612:	88fb      	ldrh	r3, [r7, #6]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d12c      	bne.n	8010672 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010618:	f06f 0307 	mvn.w	r3, #7
 801061c:	e040      	b.n	80106a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801061e:	4b26      	ldr	r3, [pc, #152]	; (80106b8 <udp_bind+0x10c>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	617b      	str	r3, [r7, #20]
 8010624:	e022      	b.n	801066c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	429a      	cmp	r2, r3
 801062c:	d01b      	beq.n	8010666 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	8a5b      	ldrh	r3, [r3, #18]
 8010632:	88fa      	ldrh	r2, [r7, #6]
 8010634:	429a      	cmp	r2, r3
 8010636:	d116      	bne.n	8010666 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010640:	429a      	cmp	r2, r3
 8010642:	d00d      	beq.n	8010660 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00a      	beq.n	8010660 <udp_bind+0xb4>
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d006      	beq.n	8010660 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010652:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010654:	2b00      	cmp	r3, #0
 8010656:	d003      	beq.n	8010660 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d102      	bne.n	8010666 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010660:	f06f 0307 	mvn.w	r3, #7
 8010664:	e01c      	b.n	80106a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	617b      	str	r3, [r7, #20]
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1d9      	bne.n	8010626 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <udp_bind+0xd2>
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	e000      	b.n	8010680 <udp_bind+0xd4>
 801067e:	2300      	movs	r3, #0
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	88fa      	ldrh	r2, [r7, #6]
 8010688:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801068a:	7cfb      	ldrb	r3, [r7, #19]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d106      	bne.n	801069e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010690:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <udp_bind+0x10c>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010698:	4a07      	ldr	r2, [pc, #28]	; (80106b8 <udp_bind+0x10c>)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801069e:	2300      	movs	r3, #0
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3718      	adds	r7, #24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	08016e90 	.word	0x08016e90
 80106ac:	0801632c 	.word	0x0801632c
 80106b0:	080165f4 	.word	0x080165f4
 80106b4:	08016380 	.word	0x08016380
 80106b8:	2000c9a4 	.word	0x2000c9a4

080106bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	4613      	mov	r3, r2
 80106c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d109      	bne.n	80106e4 <udp_connect+0x28>
 80106d0:	4b2c      	ldr	r3, [pc, #176]	; (8010784 <udp_connect+0xc8>)
 80106d2:	f240 4235 	movw	r2, #1077	; 0x435
 80106d6:	492c      	ldr	r1, [pc, #176]	; (8010788 <udp_connect+0xcc>)
 80106d8:	482c      	ldr	r0, [pc, #176]	; (801078c <udp_connect+0xd0>)
 80106da:	f002 fe59 	bl	8013390 <iprintf>
 80106de:	f06f 030f 	mvn.w	r3, #15
 80106e2:	e04b      	b.n	801077c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d109      	bne.n	80106fe <udp_connect+0x42>
 80106ea:	4b26      	ldr	r3, [pc, #152]	; (8010784 <udp_connect+0xc8>)
 80106ec:	f240 4236 	movw	r2, #1078	; 0x436
 80106f0:	4927      	ldr	r1, [pc, #156]	; (8010790 <udp_connect+0xd4>)
 80106f2:	4826      	ldr	r0, [pc, #152]	; (801078c <udp_connect+0xd0>)
 80106f4:	f002 fe4c 	bl	8013390 <iprintf>
 80106f8:	f06f 030f 	mvn.w	r3, #15
 80106fc:	e03e      	b.n	801077c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	8a5b      	ldrh	r3, [r3, #18]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d10f      	bne.n	8010726 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010706:	68f9      	ldr	r1, [r7, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	8a5b      	ldrh	r3, [r3, #18]
 801070c:	461a      	mov	r2, r3
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f7ff ff4c 	bl	80105ac <udp_bind>
 8010714:	4603      	mov	r3, r0
 8010716:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <udp_connect+0x6a>
      return err;
 8010720:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010724:	e02a      	b.n	801077c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <udp_connect+0x76>
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	e000      	b.n	8010734 <udp_connect+0x78>
 8010732:	2300      	movs	r3, #0
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	88fa      	ldrh	r2, [r7, #6]
 801073c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	7c1b      	ldrb	r3, [r3, #16]
 8010742:	f043 0304 	orr.w	r3, r3, #4
 8010746:	b2da      	uxtb	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801074c:	4b11      	ldr	r3, [pc, #68]	; (8010794 <udp_connect+0xd8>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	617b      	str	r3, [r7, #20]
 8010752:	e008      	b.n	8010766 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	429a      	cmp	r2, r3
 801075a:	d101      	bne.n	8010760 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	e00d      	b.n	801077c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	617b      	str	r3, [r7, #20]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1f3      	bne.n	8010754 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <udp_connect+0xd8>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010774:	4a07      	ldr	r2, [pc, #28]	; (8010794 <udp_connect+0xd8>)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	0801632c 	.word	0x0801632c
 8010788:	0801660c 	.word	0x0801660c
 801078c:	08016380 	.word	0x08016380
 8010790:	08016628 	.word	0x08016628
 8010794:	2000c9a4 	.word	0x2000c9a4

08010798 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801079e:	2000      	movs	r0, #0
 80107a0:	f7f8 febe 	bl	8009520 <memp_malloc>
 80107a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d007      	beq.n	80107bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80107ac:	2220      	movs	r2, #32
 80107ae:	2100      	movs	r1, #0
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f002 fd50 	bl	8013256 <memset>
    pcb->ttl = UDP_TTL;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	22ff      	movs	r2, #255	; 0xff
 80107ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80107bc:	687b      	ldr	r3, [r7, #4]
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
	...

080107c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d01e      	beq.n	8010816 <udp_netif_ip_addr_changed+0x4e>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01a      	beq.n	8010816 <udp_netif_ip_addr_changed+0x4e>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d017      	beq.n	8010816 <udp_netif_ip_addr_changed+0x4e>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d013      	beq.n	8010816 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107ee:	4b0d      	ldr	r3, [pc, #52]	; (8010824 <udp_netif_ip_addr_changed+0x5c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	e00c      	b.n	8010810 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d103      	bne.n	801080a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	60fb      	str	r3, [r7, #12]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1ef      	bne.n	80107f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010816:	bf00      	nop
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	2000c9a4 	.word	0x2000c9a4

08010828 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010830:	4915      	ldr	r1, [pc, #84]	; (8010888 <etharp_free_entry+0x60>)
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	4613      	mov	r3, r2
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	4413      	add	r3, r2
 801083a:	00db      	lsls	r3, r3, #3
 801083c:	440b      	add	r3, r1
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d013      	beq.n	801086c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010844:	4910      	ldr	r1, [pc, #64]	; (8010888 <etharp_free_entry+0x60>)
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	4613      	mov	r3, r2
 801084a:	005b      	lsls	r3, r3, #1
 801084c:	4413      	add	r3, r2
 801084e:	00db      	lsls	r3, r3, #3
 8010850:	440b      	add	r3, r1
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4618      	mov	r0, r3
 8010856:	f7f9 fd7d 	bl	800a354 <pbuf_free>
    arp_table[i].q = NULL;
 801085a:	490b      	ldr	r1, [pc, #44]	; (8010888 <etharp_free_entry+0x60>)
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	4613      	mov	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	4413      	add	r3, r2
 8010864:	00db      	lsls	r3, r3, #3
 8010866:	440b      	add	r3, r1
 8010868:	2200      	movs	r2, #0
 801086a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801086c:	4906      	ldr	r1, [pc, #24]	; (8010888 <etharp_free_entry+0x60>)
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	4613      	mov	r3, r2
 8010872:	005b      	lsls	r3, r3, #1
 8010874:	4413      	add	r3, r2
 8010876:	00db      	lsls	r3, r3, #3
 8010878:	440b      	add	r3, r1
 801087a:	3314      	adds	r3, #20
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010880:	bf00      	nop
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	2000c9a8 	.word	0x2000c9a8

0801088c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010892:	2300      	movs	r3, #0
 8010894:	607b      	str	r3, [r7, #4]
 8010896:	e096      	b.n	80109c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010898:	494f      	ldr	r1, [pc, #316]	; (80109d8 <etharp_tmr+0x14c>)
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	3314      	adds	r3, #20
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80108ac:	78fb      	ldrb	r3, [r7, #3]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 8086 	beq.w	80109c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80108b4:	4948      	ldr	r1, [pc, #288]	; (80109d8 <etharp_tmr+0x14c>)
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	4613      	mov	r3, r2
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	4413      	add	r3, r2
 80108be:	00db      	lsls	r3, r3, #3
 80108c0:	440b      	add	r3, r1
 80108c2:	3312      	adds	r3, #18
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	3301      	adds	r3, #1
 80108c8:	b298      	uxth	r0, r3
 80108ca:	4943      	ldr	r1, [pc, #268]	; (80109d8 <etharp_tmr+0x14c>)
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4613      	mov	r3, r2
 80108d0:	005b      	lsls	r3, r3, #1
 80108d2:	4413      	add	r3, r2
 80108d4:	00db      	lsls	r3, r3, #3
 80108d6:	440b      	add	r3, r1
 80108d8:	3312      	adds	r3, #18
 80108da:	4602      	mov	r2, r0
 80108dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80108de:	493e      	ldr	r1, [pc, #248]	; (80109d8 <etharp_tmr+0x14c>)
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	005b      	lsls	r3, r3, #1
 80108e6:	4413      	add	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	440b      	add	r3, r1
 80108ec:	3312      	adds	r3, #18
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80108f4:	d215      	bcs.n	8010922 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80108f6:	4938      	ldr	r1, [pc, #224]	; (80109d8 <etharp_tmr+0x14c>)
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	4613      	mov	r3, r2
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	4413      	add	r3, r2
 8010900:	00db      	lsls	r3, r3, #3
 8010902:	440b      	add	r3, r1
 8010904:	3314      	adds	r3, #20
 8010906:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010908:	2b01      	cmp	r3, #1
 801090a:	d10e      	bne.n	801092a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801090c:	4932      	ldr	r1, [pc, #200]	; (80109d8 <etharp_tmr+0x14c>)
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4613      	mov	r3, r2
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	4413      	add	r3, r2
 8010916:	00db      	lsls	r3, r3, #3
 8010918:	440b      	add	r3, r1
 801091a:	3312      	adds	r3, #18
 801091c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801091e:	2b04      	cmp	r3, #4
 8010920:	d903      	bls.n	801092a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff ff80 	bl	8010828 <etharp_free_entry>
 8010928:	e04a      	b.n	80109c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801092a:	492b      	ldr	r1, [pc, #172]	; (80109d8 <etharp_tmr+0x14c>)
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	4613      	mov	r3, r2
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	4413      	add	r3, r2
 8010934:	00db      	lsls	r3, r3, #3
 8010936:	440b      	add	r3, r1
 8010938:	3314      	adds	r3, #20
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	2b03      	cmp	r3, #3
 801093e:	d10a      	bne.n	8010956 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010940:	4925      	ldr	r1, [pc, #148]	; (80109d8 <etharp_tmr+0x14c>)
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	4613      	mov	r3, r2
 8010946:	005b      	lsls	r3, r3, #1
 8010948:	4413      	add	r3, r2
 801094a:	00db      	lsls	r3, r3, #3
 801094c:	440b      	add	r3, r1
 801094e:	3314      	adds	r3, #20
 8010950:	2204      	movs	r2, #4
 8010952:	701a      	strb	r2, [r3, #0]
 8010954:	e034      	b.n	80109c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010956:	4920      	ldr	r1, [pc, #128]	; (80109d8 <etharp_tmr+0x14c>)
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4613      	mov	r3, r2
 801095c:	005b      	lsls	r3, r3, #1
 801095e:	4413      	add	r3, r2
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	440b      	add	r3, r1
 8010964:	3314      	adds	r3, #20
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b04      	cmp	r3, #4
 801096a:	d10a      	bne.n	8010982 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801096c:	491a      	ldr	r1, [pc, #104]	; (80109d8 <etharp_tmr+0x14c>)
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	4613      	mov	r3, r2
 8010972:	005b      	lsls	r3, r3, #1
 8010974:	4413      	add	r3, r2
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	440b      	add	r3, r1
 801097a:	3314      	adds	r3, #20
 801097c:	2202      	movs	r2, #2
 801097e:	701a      	strb	r2, [r3, #0]
 8010980:	e01e      	b.n	80109c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010982:	4915      	ldr	r1, [pc, #84]	; (80109d8 <etharp_tmr+0x14c>)
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	4613      	mov	r3, r2
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	00db      	lsls	r3, r3, #3
 801098e:	440b      	add	r3, r1
 8010990:	3314      	adds	r3, #20
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d113      	bne.n	80109c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010998:	490f      	ldr	r1, [pc, #60]	; (80109d8 <etharp_tmr+0x14c>)
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	4613      	mov	r3, r2
 801099e:	005b      	lsls	r3, r3, #1
 80109a0:	4413      	add	r3, r2
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	440b      	add	r3, r1
 80109a6:	3308      	adds	r3, #8
 80109a8:	6818      	ldr	r0, [r3, #0]
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	4613      	mov	r3, r2
 80109ae:	005b      	lsls	r3, r3, #1
 80109b0:	4413      	add	r3, r2
 80109b2:	00db      	lsls	r3, r3, #3
 80109b4:	4a08      	ldr	r2, [pc, #32]	; (80109d8 <etharp_tmr+0x14c>)
 80109b6:	4413      	add	r3, r2
 80109b8:	3304      	adds	r3, #4
 80109ba:	4619      	mov	r1, r3
 80109bc:	f000 fe6e 	bl	801169c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3301      	adds	r3, #1
 80109c4:	607b      	str	r3, [r7, #4]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b09      	cmp	r3, #9
 80109ca:	f77f af65 	ble.w	8010898 <etharp_tmr+0xc>
      }
    }
  }
}
 80109ce:	bf00      	nop
 80109d0:	bf00      	nop
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	2000c9a8 	.word	0x2000c9a8

080109dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b08a      	sub	sp, #40	; 0x28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	460b      	mov	r3, r1
 80109e6:	607a      	str	r2, [r7, #4]
 80109e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80109ea:	230a      	movs	r3, #10
 80109ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80109ee:	230a      	movs	r3, #10
 80109f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80109f2:	230a      	movs	r3, #10
 80109f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80109f6:	2300      	movs	r3, #0
 80109f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80109fa:	230a      	movs	r3, #10
 80109fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	83bb      	strh	r3, [r7, #28]
 8010a02:	2300      	movs	r3, #0
 8010a04:	837b      	strh	r3, [r7, #26]
 8010a06:	2300      	movs	r3, #0
 8010a08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	843b      	strh	r3, [r7, #32]
 8010a0e:	e0ae      	b.n	8010b6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a14:	49a6      	ldr	r1, [pc, #664]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010a16:	4613      	mov	r3, r2
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	4413      	add	r3, r2
 8010a1c:	00db      	lsls	r3, r3, #3
 8010a1e:	440b      	add	r3, r1
 8010a20:	3314      	adds	r3, #20
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010a26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010a2a:	2b0a      	cmp	r3, #10
 8010a2c:	d105      	bne.n	8010a3a <etharp_find_entry+0x5e>
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010a34:	8c3b      	ldrh	r3, [r7, #32]
 8010a36:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a38:	e095      	b.n	8010b66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f000 8092 	beq.w	8010b66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d009      	beq.n	8010a5c <etharp_find_entry+0x80>
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d806      	bhi.n	8010a5c <etharp_find_entry+0x80>
 8010a4e:	4b99      	ldr	r3, [pc, #612]	; (8010cb4 <etharp_find_entry+0x2d8>)
 8010a50:	f240 1223 	movw	r2, #291	; 0x123
 8010a54:	4998      	ldr	r1, [pc, #608]	; (8010cb8 <etharp_find_entry+0x2dc>)
 8010a56:	4899      	ldr	r0, [pc, #612]	; (8010cbc <etharp_find_entry+0x2e0>)
 8010a58:	f002 fc9a 	bl	8013390 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d020      	beq.n	8010aa4 <etharp_find_entry+0xc8>
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6819      	ldr	r1, [r3, #0]
 8010a66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a6a:	4891      	ldr	r0, [pc, #580]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	4403      	add	r3, r0
 8010a76:	3304      	adds	r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	d112      	bne.n	8010aa4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00c      	beq.n	8010a9e <etharp_find_entry+0xc2>
 8010a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a88:	4989      	ldr	r1, [pc, #548]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	4413      	add	r3, r2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	440b      	add	r3, r1
 8010a94:	3308      	adds	r3, #8
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d102      	bne.n	8010aa4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010a9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010aa2:	e100      	b.n	8010ca6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010aa4:	7dfb      	ldrb	r3, [r7, #23]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d140      	bne.n	8010b2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aae:	4980      	ldr	r1, [pc, #512]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	005b      	lsls	r3, r3, #1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	440b      	add	r3, r1
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01a      	beq.n	8010af6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ac4:	497a      	ldr	r1, [pc, #488]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	440b      	add	r3, r1
 8010ad0:	3312      	adds	r3, #18
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	8bba      	ldrh	r2, [r7, #28]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d845      	bhi.n	8010b66 <etharp_find_entry+0x18a>
            old_queue = i;
 8010ada:	8c3b      	ldrh	r3, [r7, #32]
 8010adc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ae2:	4973      	ldr	r1, [pc, #460]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	4413      	add	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	440b      	add	r3, r1
 8010aee:	3312      	adds	r3, #18
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	83bb      	strh	r3, [r7, #28]
 8010af4:	e037      	b.n	8010b66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010afa:	496d      	ldr	r1, [pc, #436]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010afc:	4613      	mov	r3, r2
 8010afe:	005b      	lsls	r3, r3, #1
 8010b00:	4413      	add	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	440b      	add	r3, r1
 8010b06:	3312      	adds	r3, #18
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	8b7a      	ldrh	r2, [r7, #26]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d82a      	bhi.n	8010b66 <etharp_find_entry+0x18a>
            old_pending = i;
 8010b10:	8c3b      	ldrh	r3, [r7, #32]
 8010b12:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010b14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b18:	4965      	ldr	r1, [pc, #404]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	4413      	add	r3, r2
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	440b      	add	r3, r1
 8010b24:	3312      	adds	r3, #18
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	837b      	strh	r3, [r7, #26]
 8010b2a:	e01c      	b.n	8010b66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010b2c:	7dfb      	ldrb	r3, [r7, #23]
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d919      	bls.n	8010b66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010b32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b36:	495e      	ldr	r1, [pc, #376]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010b38:	4613      	mov	r3, r2
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	440b      	add	r3, r1
 8010b42:	3312      	adds	r3, #18
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	8b3a      	ldrh	r2, [r7, #24]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d80c      	bhi.n	8010b66 <etharp_find_entry+0x18a>
            old_stable = i;
 8010b4c:	8c3b      	ldrh	r3, [r7, #32]
 8010b4e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b54:	4956      	ldr	r1, [pc, #344]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010b56:	4613      	mov	r3, r2
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	4413      	add	r3, r2
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	440b      	add	r3, r1
 8010b60:	3312      	adds	r3, #18
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b66:	8c3b      	ldrh	r3, [r7, #32]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	843b      	strh	r3, [r7, #32]
 8010b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b72:	2b09      	cmp	r3, #9
 8010b74:	f77f af4c 	ble.w	8010a10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	f003 0302 	and.w	r3, r3, #2
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d108      	bne.n	8010b94 <etharp_find_entry+0x1b8>
 8010b82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b86:	2b0a      	cmp	r3, #10
 8010b88:	d107      	bne.n	8010b9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010b8a:	7afb      	ldrb	r3, [r7, #11]
 8010b8c:	f003 0301 	and.w	r3, r3, #1
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d102      	bne.n	8010b9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010b94:	f04f 33ff 	mov.w	r3, #4294967295
 8010b98:	e085      	b.n	8010ca6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010b9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b9e:	2b09      	cmp	r3, #9
 8010ba0:	dc02      	bgt.n	8010ba8 <etharp_find_entry+0x1cc>
    i = empty;
 8010ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ba4:	843b      	strh	r3, [r7, #32]
 8010ba6:	e039      	b.n	8010c1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010ba8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010bac:	2b09      	cmp	r3, #9
 8010bae:	dc14      	bgt.n	8010bda <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bb2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bb8:	493d      	ldr	r1, [pc, #244]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010bba:	4613      	mov	r3, r2
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	4413      	add	r3, r2
 8010bc0:	00db      	lsls	r3, r3, #3
 8010bc2:	440b      	add	r3, r1
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d018      	beq.n	8010bfc <etharp_find_entry+0x220>
 8010bca:	4b3a      	ldr	r3, [pc, #232]	; (8010cb4 <etharp_find_entry+0x2d8>)
 8010bcc:	f240 126d 	movw	r2, #365	; 0x16d
 8010bd0:	493b      	ldr	r1, [pc, #236]	; (8010cc0 <etharp_find_entry+0x2e4>)
 8010bd2:	483a      	ldr	r0, [pc, #232]	; (8010cbc <etharp_find_entry+0x2e0>)
 8010bd4:	f002 fbdc 	bl	8013390 <iprintf>
 8010bd8:	e010      	b.n	8010bfc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010bda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010bde:	2b09      	cmp	r3, #9
 8010be0:	dc02      	bgt.n	8010be8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010be4:	843b      	strh	r3, [r7, #32]
 8010be6:	e009      	b.n	8010bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010be8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010bec:	2b09      	cmp	r3, #9
 8010bee:	dc02      	bgt.n	8010bf6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010bf0:	8bfb      	ldrh	r3, [r7, #30]
 8010bf2:	843b      	strh	r3, [r7, #32]
 8010bf4:	e002      	b.n	8010bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bfa:	e054      	b.n	8010ca6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010bfc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c00:	2b09      	cmp	r3, #9
 8010c02:	dd06      	ble.n	8010c12 <etharp_find_entry+0x236>
 8010c04:	4b2b      	ldr	r3, [pc, #172]	; (8010cb4 <etharp_find_entry+0x2d8>)
 8010c06:	f240 127f 	movw	r2, #383	; 0x17f
 8010c0a:	492e      	ldr	r1, [pc, #184]	; (8010cc4 <etharp_find_entry+0x2e8>)
 8010c0c:	482b      	ldr	r0, [pc, #172]	; (8010cbc <etharp_find_entry+0x2e0>)
 8010c0e:	f002 fbbf 	bl	8013390 <iprintf>
    etharp_free_entry(i);
 8010c12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fe06 	bl	8010828 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c20:	2b09      	cmp	r3, #9
 8010c22:	dd06      	ble.n	8010c32 <etharp_find_entry+0x256>
 8010c24:	4b23      	ldr	r3, [pc, #140]	; (8010cb4 <etharp_find_entry+0x2d8>)
 8010c26:	f240 1283 	movw	r2, #387	; 0x183
 8010c2a:	4926      	ldr	r1, [pc, #152]	; (8010cc4 <etharp_find_entry+0x2e8>)
 8010c2c:	4823      	ldr	r0, [pc, #140]	; (8010cbc <etharp_find_entry+0x2e0>)
 8010c2e:	f002 fbaf 	bl	8013390 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010c32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c36:	491e      	ldr	r1, [pc, #120]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010c38:	4613      	mov	r3, r2
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	4413      	add	r3, r2
 8010c3e:	00db      	lsls	r3, r3, #3
 8010c40:	440b      	add	r3, r1
 8010c42:	3314      	adds	r3, #20
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d006      	beq.n	8010c58 <etharp_find_entry+0x27c>
 8010c4a:	4b1a      	ldr	r3, [pc, #104]	; (8010cb4 <etharp_find_entry+0x2d8>)
 8010c4c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010c50:	491d      	ldr	r1, [pc, #116]	; (8010cc8 <etharp_find_entry+0x2ec>)
 8010c52:	481a      	ldr	r0, [pc, #104]	; (8010cbc <etharp_find_entry+0x2e0>)
 8010c54:	f002 fb9c 	bl	8013390 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00b      	beq.n	8010c76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6819      	ldr	r1, [r3, #0]
 8010c66:	4812      	ldr	r0, [pc, #72]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010c68:	4613      	mov	r3, r2
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	4413      	add	r3, r2
 8010c6e:	00db      	lsls	r3, r3, #3
 8010c70:	4403      	add	r3, r0
 8010c72:	3304      	adds	r3, #4
 8010c74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c7a:	490d      	ldr	r1, [pc, #52]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	4413      	add	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	3312      	adds	r3, #18
 8010c88:	2200      	movs	r2, #0
 8010c8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010c8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c90:	4907      	ldr	r1, [pc, #28]	; (8010cb0 <etharp_find_entry+0x2d4>)
 8010c92:	4613      	mov	r3, r2
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	4413      	add	r3, r2
 8010c98:	00db      	lsls	r3, r3, #3
 8010c9a:	440b      	add	r3, r1
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3728      	adds	r7, #40	; 0x28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	2000c9a8 	.word	0x2000c9a8
 8010cb4:	08016690 	.word	0x08016690
 8010cb8:	080166c8 	.word	0x080166c8
 8010cbc:	08016708 	.word	0x08016708
 8010cc0:	08016730 	.word	0x08016730
 8010cc4:	08016748 	.word	0x08016748
 8010cc8:	0801675c 	.word	0x0801675c

08010ccc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b088      	sub	sp, #32
 8010cd0:	af02      	add	r7, sp, #8
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
 8010cd8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ce0:	2b06      	cmp	r3, #6
 8010ce2:	d006      	beq.n	8010cf2 <etharp_update_arp_entry+0x26>
 8010ce4:	4b48      	ldr	r3, [pc, #288]	; (8010e08 <etharp_update_arp_entry+0x13c>)
 8010ce6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010cea:	4948      	ldr	r1, [pc, #288]	; (8010e0c <etharp_update_arp_entry+0x140>)
 8010cec:	4848      	ldr	r0, [pc, #288]	; (8010e10 <etharp_update_arp_entry+0x144>)
 8010cee:	f002 fb4f 	bl	8013390 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d012      	beq.n	8010d1e <etharp_update_arp_entry+0x52>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00e      	beq.n	8010d1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	68f9      	ldr	r1, [r7, #12]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f001 f8fe 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8010d0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d105      	bne.n	8010d1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d1a:	2be0      	cmp	r3, #224	; 0xe0
 8010d1c:	d102      	bne.n	8010d24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d1e:	f06f 030f 	mvn.w	r3, #15
 8010d22:	e06c      	b.n	8010dfe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010d24:	78fb      	ldrb	r3, [r7, #3]
 8010d26:	68fa      	ldr	r2, [r7, #12]
 8010d28:	4619      	mov	r1, r3
 8010d2a:	68b8      	ldr	r0, [r7, #8]
 8010d2c:	f7ff fe56 	bl	80109dc <etharp_find_entry>
 8010d30:	4603      	mov	r3, r0
 8010d32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010d34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	da02      	bge.n	8010d42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010d3c:	8afb      	ldrh	r3, [r7, #22]
 8010d3e:	b25b      	sxtb	r3, r3
 8010d40:	e05d      	b.n	8010dfe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010d42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d46:	4933      	ldr	r1, [pc, #204]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010d48:	4613      	mov	r3, r2
 8010d4a:	005b      	lsls	r3, r3, #1
 8010d4c:	4413      	add	r3, r2
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	440b      	add	r3, r1
 8010d52:	3314      	adds	r3, #20
 8010d54:	2202      	movs	r2, #2
 8010d56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d5c:	492d      	ldr	r1, [pc, #180]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010d5e:	4613      	mov	r3, r2
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	4413      	add	r3, r2
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	440b      	add	r3, r1
 8010d68:	3308      	adds	r3, #8
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010d6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d72:	4613      	mov	r3, r2
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4413      	add	r3, r2
 8010d78:	00db      	lsls	r3, r3, #3
 8010d7a:	3308      	adds	r3, #8
 8010d7c:	4a25      	ldr	r2, [pc, #148]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010d7e:	4413      	add	r3, r2
 8010d80:	3304      	adds	r3, #4
 8010d82:	2206      	movs	r2, #6
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	4618      	mov	r0, r3
 8010d88:	f002 fa57 	bl	801323a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d90:	4920      	ldr	r1, [pc, #128]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010d92:	4613      	mov	r3, r2
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	00db      	lsls	r3, r3, #3
 8010d9a:	440b      	add	r3, r1
 8010d9c:	3312      	adds	r3, #18
 8010d9e:	2200      	movs	r2, #0
 8010da0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010da2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010da6:	491b      	ldr	r1, [pc, #108]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	440b      	add	r3, r1
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d021      	beq.n	8010dfc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010db8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010dbc:	4915      	ldr	r1, [pc, #84]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	4413      	add	r3, r2
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	440b      	add	r3, r1
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010dcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010dd0:	4910      	ldr	r1, [pc, #64]	; (8010e14 <etharp_update_arp_entry+0x148>)
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	4413      	add	r3, r2
 8010dd8:	00db      	lsls	r3, r3, #3
 8010dda:	440b      	add	r3, r1
 8010ddc:	2200      	movs	r2, #0
 8010dde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6939      	ldr	r1, [r7, #16]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f001 ff97 	bl	8012d24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010df6:	6938      	ldr	r0, [r7, #16]
 8010df8:	f7f9 faac 	bl	800a354 <pbuf_free>
  }
  return ERR_OK;
 8010dfc:	2300      	movs	r3, #0
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	08016690 	.word	0x08016690
 8010e0c:	08016788 	.word	0x08016788
 8010e10:	08016708 	.word	0x08016708
 8010e14:	2000c9a8 	.word	0x2000c9a8

08010e18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e20:	2300      	movs	r3, #0
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	e01e      	b.n	8010e64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010e26:	4913      	ldr	r1, [pc, #76]	; (8010e74 <etharp_cleanup_netif+0x5c>)
 8010e28:	68fa      	ldr	r2, [r7, #12]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	440b      	add	r3, r1
 8010e34:	3314      	adds	r3, #20
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010e3a:	7afb      	ldrb	r3, [r7, #11]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00e      	beq.n	8010e5e <etharp_cleanup_netif+0x46>
 8010e40:	490c      	ldr	r1, [pc, #48]	; (8010e74 <etharp_cleanup_netif+0x5c>)
 8010e42:	68fa      	ldr	r2, [r7, #12]
 8010e44:	4613      	mov	r3, r2
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	00db      	lsls	r3, r3, #3
 8010e4c:	440b      	add	r3, r1
 8010e4e:	3308      	adds	r3, #8
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d102      	bne.n	8010e5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7ff fce5 	bl	8010828 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3301      	adds	r3, #1
 8010e62:	60fb      	str	r3, [r7, #12]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2b09      	cmp	r3, #9
 8010e68:	dddd      	ble.n	8010e26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010e6a:	bf00      	nop
 8010e6c:	bf00      	nop
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	2000c9a8 	.word	0x2000c9a8

08010e78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010e78:	b5b0      	push	{r4, r5, r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af04      	add	r7, sp, #16
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d107      	bne.n	8010e98 <etharp_input+0x20>
 8010e88:	4b3d      	ldr	r3, [pc, #244]	; (8010f80 <etharp_input+0x108>)
 8010e8a:	f240 228a 	movw	r2, #650	; 0x28a
 8010e8e:	493d      	ldr	r1, [pc, #244]	; (8010f84 <etharp_input+0x10c>)
 8010e90:	483d      	ldr	r0, [pc, #244]	; (8010f88 <etharp_input+0x110>)
 8010e92:	f002 fa7d 	bl	8013390 <iprintf>
 8010e96:	e06f      	b.n	8010f78 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ea8:	d10c      	bne.n	8010ec4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010eae:	2b06      	cmp	r3, #6
 8010eb0:	d108      	bne.n	8010ec4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eb6:	2b04      	cmp	r3, #4
 8010eb8:	d104      	bne.n	8010ec4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	885b      	ldrh	r3, [r3, #2]
 8010ebe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ec0:	2b08      	cmp	r3, #8
 8010ec2:	d003      	beq.n	8010ecc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7f9 fa45 	bl	800a354 <pbuf_free>
    return;
 8010eca:	e055      	b.n	8010f78 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	330e      	adds	r3, #14
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	3318      	adds	r3, #24
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	3304      	adds	r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d102      	bne.n	8010eec <etharp_input+0x74>
    for_us = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	75fb      	strb	r3, [r7, #23]
 8010eea:	e009      	b.n	8010f00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	bf0c      	ite	eq
 8010ef8:	2301      	moveq	r3, #1
 8010efa:	2300      	movne	r3, #0
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	f103 0208 	add.w	r2, r3, #8
 8010f06:	7dfb      	ldrb	r3, [r7, #23]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <etharp_input+0x98>
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e000      	b.n	8010f12 <etharp_input+0x9a>
 8010f10:	2302      	movs	r3, #2
 8010f12:	f107 010c 	add.w	r1, r7, #12
 8010f16:	6838      	ldr	r0, [r7, #0]
 8010f18:	f7ff fed8 	bl	8010ccc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	88db      	ldrh	r3, [r3, #6]
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f26:	d003      	beq.n	8010f30 <etharp_input+0xb8>
 8010f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f2c:	d01e      	beq.n	8010f6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010f2e:	e020      	b.n	8010f72 <etharp_input+0xfa>
      if (for_us) {
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d01c      	beq.n	8010f70 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010f4c:	693a      	ldr	r2, [r7, #16]
 8010f4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010f50:	2102      	movs	r1, #2
 8010f52:	9103      	str	r1, [sp, #12]
 8010f54:	f107 010c 	add.w	r1, r7, #12
 8010f58:	9102      	str	r1, [sp, #8]
 8010f5a:	9201      	str	r2, [sp, #4]
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	462b      	mov	r3, r5
 8010f60:	4622      	mov	r2, r4
 8010f62:	4601      	mov	r1, r0
 8010f64:	6838      	ldr	r0, [r7, #0]
 8010f66:	f000 faeb 	bl	8011540 <etharp_raw>
      break;
 8010f6a:	e001      	b.n	8010f70 <etharp_input+0xf8>
      break;
 8010f6c:	bf00      	nop
 8010f6e:	e000      	b.n	8010f72 <etharp_input+0xfa>
      break;
 8010f70:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7f9 f9ee 	bl	800a354 <pbuf_free>
}
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	08016690 	.word	0x08016690
 8010f84:	080167e0 	.word	0x080167e0
 8010f88:	08016708 	.word	0x08016708

08010f8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	4613      	mov	r3, r2
 8010f98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010f9a:	79fa      	ldrb	r2, [r7, #7]
 8010f9c:	4944      	ldr	r1, [pc, #272]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	005b      	lsls	r3, r3, #1
 8010fa2:	4413      	add	r3, r2
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	440b      	add	r3, r1
 8010fa8:	3314      	adds	r3, #20
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d806      	bhi.n	8010fbe <etharp_output_to_arp_index+0x32>
 8010fb0:	4b40      	ldr	r3, [pc, #256]	; (80110b4 <etharp_output_to_arp_index+0x128>)
 8010fb2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010fb6:	4940      	ldr	r1, [pc, #256]	; (80110b8 <etharp_output_to_arp_index+0x12c>)
 8010fb8:	4840      	ldr	r0, [pc, #256]	; (80110bc <etharp_output_to_arp_index+0x130>)
 8010fba:	f002 f9e9 	bl	8013390 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010fbe:	79fa      	ldrb	r2, [r7, #7]
 8010fc0:	493b      	ldr	r1, [pc, #236]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	4413      	add	r3, r2
 8010fc8:	00db      	lsls	r3, r3, #3
 8010fca:	440b      	add	r3, r1
 8010fcc:	3314      	adds	r3, #20
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d153      	bne.n	801107c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010fd4:	79fa      	ldrb	r2, [r7, #7]
 8010fd6:	4936      	ldr	r1, [pc, #216]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8010fd8:	4613      	mov	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	4413      	add	r3, r2
 8010fde:	00db      	lsls	r3, r3, #3
 8010fe0:	440b      	add	r3, r1
 8010fe2:	3312      	adds	r3, #18
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010fea:	d919      	bls.n	8011020 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010fec:	79fa      	ldrb	r2, [r7, #7]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	00db      	lsls	r3, r3, #3
 8010ff6:	4a2e      	ldr	r2, [pc, #184]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8010ff8:	4413      	add	r3, r2
 8010ffa:	3304      	adds	r3, #4
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f000 fb4c 	bl	801169c <etharp_request>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d138      	bne.n	801107c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801100a:	79fa      	ldrb	r2, [r7, #7]
 801100c:	4928      	ldr	r1, [pc, #160]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 801100e:	4613      	mov	r3, r2
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	4413      	add	r3, r2
 8011014:	00db      	lsls	r3, r3, #3
 8011016:	440b      	add	r3, r1
 8011018:	3314      	adds	r3, #20
 801101a:	2203      	movs	r2, #3
 801101c:	701a      	strb	r2, [r3, #0]
 801101e:	e02d      	b.n	801107c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011020:	79fa      	ldrb	r2, [r7, #7]
 8011022:	4923      	ldr	r1, [pc, #140]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8011024:	4613      	mov	r3, r2
 8011026:	005b      	lsls	r3, r3, #1
 8011028:	4413      	add	r3, r2
 801102a:	00db      	lsls	r3, r3, #3
 801102c:	440b      	add	r3, r1
 801102e:	3312      	adds	r3, #18
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011036:	d321      	bcc.n	801107c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011038:	79fa      	ldrb	r2, [r7, #7]
 801103a:	4613      	mov	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	4413      	add	r3, r2
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	4a1b      	ldr	r2, [pc, #108]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8011044:	4413      	add	r3, r2
 8011046:	1d19      	adds	r1, r3, #4
 8011048:	79fa      	ldrb	r2, [r7, #7]
 801104a:	4613      	mov	r3, r2
 801104c:	005b      	lsls	r3, r3, #1
 801104e:	4413      	add	r3, r2
 8011050:	00db      	lsls	r3, r3, #3
 8011052:	3308      	adds	r3, #8
 8011054:	4a16      	ldr	r2, [pc, #88]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8011056:	4413      	add	r3, r2
 8011058:	3304      	adds	r3, #4
 801105a:	461a      	mov	r2, r3
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f000 fafb 	bl	8011658 <etharp_request_dst>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d109      	bne.n	801107c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011068:	79fa      	ldrb	r2, [r7, #7]
 801106a:	4911      	ldr	r1, [pc, #68]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 801106c:	4613      	mov	r3, r2
 801106e:	005b      	lsls	r3, r3, #1
 8011070:	4413      	add	r3, r2
 8011072:	00db      	lsls	r3, r3, #3
 8011074:	440b      	add	r3, r1
 8011076:	3314      	adds	r3, #20
 8011078:	2203      	movs	r2, #3
 801107a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011082:	79fa      	ldrb	r2, [r7, #7]
 8011084:	4613      	mov	r3, r2
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	4413      	add	r3, r2
 801108a:	00db      	lsls	r3, r3, #3
 801108c:	3308      	adds	r3, #8
 801108e:	4a08      	ldr	r2, [pc, #32]	; (80110b0 <etharp_output_to_arp_index+0x124>)
 8011090:	4413      	add	r3, r2
 8011092:	3304      	adds	r3, #4
 8011094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011098:	9200      	str	r2, [sp, #0]
 801109a:	460a      	mov	r2, r1
 801109c:	68b9      	ldr	r1, [r7, #8]
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f001 fe40 	bl	8012d24 <ethernet_output>
 80110a4:	4603      	mov	r3, r0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	2000c9a8 	.word	0x2000c9a8
 80110b4:	08016690 	.word	0x08016690
 80110b8:	08016800 	.word	0x08016800
 80110bc:	08016708 	.word	0x08016708

080110c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b08a      	sub	sp, #40	; 0x28
 80110c4:	af02      	add	r7, sp, #8
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d106      	bne.n	80110e4 <etharp_output+0x24>
 80110d6:	4b73      	ldr	r3, [pc, #460]	; (80112a4 <etharp_output+0x1e4>)
 80110d8:	f240 321e 	movw	r2, #798	; 0x31e
 80110dc:	4972      	ldr	r1, [pc, #456]	; (80112a8 <etharp_output+0x1e8>)
 80110de:	4873      	ldr	r0, [pc, #460]	; (80112ac <etharp_output+0x1ec>)
 80110e0:	f002 f956 	bl	8013390 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <etharp_output+0x38>
 80110ea:	4b6e      	ldr	r3, [pc, #440]	; (80112a4 <etharp_output+0x1e4>)
 80110ec:	f240 321f 	movw	r2, #799	; 0x31f
 80110f0:	496f      	ldr	r1, [pc, #444]	; (80112b0 <etharp_output+0x1f0>)
 80110f2:	486e      	ldr	r0, [pc, #440]	; (80112ac <etharp_output+0x1ec>)
 80110f4:	f002 f94c 	bl	8013390 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <etharp_output+0x4c>
 80110fe:	4b69      	ldr	r3, [pc, #420]	; (80112a4 <etharp_output+0x1e4>)
 8011100:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011104:	496b      	ldr	r1, [pc, #428]	; (80112b4 <etharp_output+0x1f4>)
 8011106:	4869      	ldr	r0, [pc, #420]	; (80112ac <etharp_output+0x1ec>)
 8011108:	f002 f942 	bl	8013390 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68f9      	ldr	r1, [r7, #12]
 8011112:	4618      	mov	r0, r3
 8011114:	f000 fef8 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d002      	beq.n	8011124 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801111e:	4b66      	ldr	r3, [pc, #408]	; (80112b8 <etharp_output+0x1f8>)
 8011120:	61fb      	str	r3, [r7, #28]
 8011122:	e0af      	b.n	8011284 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801112c:	2be0      	cmp	r3, #224	; 0xe0
 801112e:	d118      	bne.n	8011162 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011130:	2301      	movs	r3, #1
 8011132:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011134:	2300      	movs	r3, #0
 8011136:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011138:	235e      	movs	r3, #94	; 0x5e
 801113a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3301      	adds	r3, #1
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011146:	b2db      	uxtb	r3, r3
 8011148:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3302      	adds	r3, #2
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3303      	adds	r3, #3
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801115a:	f107 0310 	add.w	r3, r7, #16
 801115e:	61fb      	str	r3, [r7, #28]
 8011160:	e090      	b.n	8011284 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3304      	adds	r3, #4
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	405a      	eors	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3308      	adds	r3, #8
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4013      	ands	r3, r2
 8011176:	2b00      	cmp	r3, #0
 8011178:	d012      	beq.n	80111a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011180:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011184:	4293      	cmp	r3, r2
 8011186:	d00b      	beq.n	80111a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	330c      	adds	r3, #12
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	330c      	adds	r3, #12
 8011196:	61bb      	str	r3, [r7, #24]
 8011198:	e002      	b.n	80111a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801119a:	f06f 0303 	mvn.w	r3, #3
 801119e:	e07d      	b.n	801129c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111a0:	4b46      	ldr	r3, [pc, #280]	; (80112bc <etharp_output+0x1fc>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	4619      	mov	r1, r3
 80111a6:	4a46      	ldr	r2, [pc, #280]	; (80112c0 <etharp_output+0x200>)
 80111a8:	460b      	mov	r3, r1
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	440b      	add	r3, r1
 80111ae:	00db      	lsls	r3, r3, #3
 80111b0:	4413      	add	r3, r2
 80111b2:	3314      	adds	r3, #20
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d925      	bls.n	8011206 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111ba:	4b40      	ldr	r3, [pc, #256]	; (80112bc <etharp_output+0x1fc>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	4619      	mov	r1, r3
 80111c0:	4a3f      	ldr	r2, [pc, #252]	; (80112c0 <etharp_output+0x200>)
 80111c2:	460b      	mov	r3, r1
 80111c4:	005b      	lsls	r3, r3, #1
 80111c6:	440b      	add	r3, r1
 80111c8:	00db      	lsls	r3, r3, #3
 80111ca:	4413      	add	r3, r2
 80111cc:	3308      	adds	r3, #8
 80111ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111d0:	68fa      	ldr	r2, [r7, #12]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d117      	bne.n	8011206 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	4b38      	ldr	r3, [pc, #224]	; (80112bc <etharp_output+0x1fc>)
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	4618      	mov	r0, r3
 80111e0:	4937      	ldr	r1, [pc, #220]	; (80112c0 <etharp_output+0x200>)
 80111e2:	4603      	mov	r3, r0
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	4403      	add	r3, r0
 80111e8:	00db      	lsls	r3, r3, #3
 80111ea:	440b      	add	r3, r1
 80111ec:	3304      	adds	r3, #4
 80111ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d108      	bne.n	8011206 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80111f4:	4b31      	ldr	r3, [pc, #196]	; (80112bc <etharp_output+0x1fc>)
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	461a      	mov	r2, r3
 80111fa:	68b9      	ldr	r1, [r7, #8]
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7ff fec5 	bl	8010f8c <etharp_output_to_arp_index>
 8011202:	4603      	mov	r3, r0
 8011204:	e04a      	b.n	801129c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011206:	2300      	movs	r3, #0
 8011208:	75fb      	strb	r3, [r7, #23]
 801120a:	e031      	b.n	8011270 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801120c:	7dfa      	ldrb	r2, [r7, #23]
 801120e:	492c      	ldr	r1, [pc, #176]	; (80112c0 <etharp_output+0x200>)
 8011210:	4613      	mov	r3, r2
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	4413      	add	r3, r2
 8011216:	00db      	lsls	r3, r3, #3
 8011218:	440b      	add	r3, r1
 801121a:	3314      	adds	r3, #20
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	2b01      	cmp	r3, #1
 8011220:	d923      	bls.n	801126a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011222:	7dfa      	ldrb	r2, [r7, #23]
 8011224:	4926      	ldr	r1, [pc, #152]	; (80112c0 <etharp_output+0x200>)
 8011226:	4613      	mov	r3, r2
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	4413      	add	r3, r2
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	440b      	add	r3, r1
 8011230:	3308      	adds	r3, #8
 8011232:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	429a      	cmp	r2, r3
 8011238:	d117      	bne.n	801126a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801123a:	69bb      	ldr	r3, [r7, #24]
 801123c:	6819      	ldr	r1, [r3, #0]
 801123e:	7dfa      	ldrb	r2, [r7, #23]
 8011240:	481f      	ldr	r0, [pc, #124]	; (80112c0 <etharp_output+0x200>)
 8011242:	4613      	mov	r3, r2
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	4403      	add	r3, r0
 801124c:	3304      	adds	r3, #4
 801124e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011250:	4299      	cmp	r1, r3
 8011252:	d10a      	bne.n	801126a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011254:	4a19      	ldr	r2, [pc, #100]	; (80112bc <etharp_output+0x1fc>)
 8011256:	7dfb      	ldrb	r3, [r7, #23]
 8011258:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801125a:	7dfb      	ldrb	r3, [r7, #23]
 801125c:	461a      	mov	r2, r3
 801125e:	68b9      	ldr	r1, [r7, #8]
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f7ff fe93 	bl	8010f8c <etharp_output_to_arp_index>
 8011266:	4603      	mov	r3, r0
 8011268:	e018      	b.n	801129c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801126a:	7dfb      	ldrb	r3, [r7, #23]
 801126c:	3301      	adds	r3, #1
 801126e:	75fb      	strb	r3, [r7, #23]
 8011270:	7dfb      	ldrb	r3, [r7, #23]
 8011272:	2b09      	cmp	r3, #9
 8011274:	d9ca      	bls.n	801120c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	69b9      	ldr	r1, [r7, #24]
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f000 f822 	bl	80112c4 <etharp_query>
 8011280:	4603      	mov	r3, r0
 8011282:	e00b      	b.n	801129c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801128a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	68b9      	ldr	r1, [r7, #8]
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f001 fd45 	bl	8012d24 <ethernet_output>
 801129a:	4603      	mov	r3, r0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3720      	adds	r7, #32
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	08016690 	.word	0x08016690
 80112a8:	080167e0 	.word	0x080167e0
 80112ac:	08016708 	.word	0x08016708
 80112b0:	08016830 	.word	0x08016830
 80112b4:	080167d0 	.word	0x080167d0
 80112b8:	08016e94 	.word	0x08016e94
 80112bc:	2000ca98 	.word	0x2000ca98
 80112c0:	2000c9a8 	.word	0x2000c9a8

080112c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08c      	sub	sp, #48	; 0x30
 80112c8:	af02      	add	r7, sp, #8
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	3326      	adds	r3, #38	; 0x26
 80112d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80112d6:	23ff      	movs	r3, #255	; 0xff
 80112d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68f9      	ldr	r1, [r7, #12]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 fe0e 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d10c      	bne.n	801130c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80112fa:	2be0      	cmp	r3, #224	; 0xe0
 80112fc:	d006      	beq.n	801130c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d003      	beq.n	801130c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d102      	bne.n	8011312 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801130c:	f06f 030f 	mvn.w	r3, #15
 8011310:	e101      	b.n	8011516 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	2101      	movs	r1, #1
 8011316:	68b8      	ldr	r0, [r7, #8]
 8011318:	f7ff fb60 	bl	80109dc <etharp_find_entry>
 801131c:	4603      	mov	r3, r0
 801131e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011324:	2b00      	cmp	r3, #0
 8011326:	da02      	bge.n	801132e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011328:	8a7b      	ldrh	r3, [r7, #18]
 801132a:	b25b      	sxtb	r3, r3
 801132c:	e0f3      	b.n	8011516 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801132e:	8a7b      	ldrh	r3, [r7, #18]
 8011330:	2b7e      	cmp	r3, #126	; 0x7e
 8011332:	d906      	bls.n	8011342 <etharp_query+0x7e>
 8011334:	4b7a      	ldr	r3, [pc, #488]	; (8011520 <etharp_query+0x25c>)
 8011336:	f240 32c1 	movw	r2, #961	; 0x3c1
 801133a:	497a      	ldr	r1, [pc, #488]	; (8011524 <etharp_query+0x260>)
 801133c:	487a      	ldr	r0, [pc, #488]	; (8011528 <etharp_query+0x264>)
 801133e:	f002 f827 	bl	8013390 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011342:	8a7b      	ldrh	r3, [r7, #18]
 8011344:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011346:	7c7a      	ldrb	r2, [r7, #17]
 8011348:	4978      	ldr	r1, [pc, #480]	; (801152c <etharp_query+0x268>)
 801134a:	4613      	mov	r3, r2
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	4413      	add	r3, r2
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	440b      	add	r3, r1
 8011354:	3314      	adds	r3, #20
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d115      	bne.n	8011388 <etharp_query+0xc4>
    is_new_entry = 1;
 801135c:	2301      	movs	r3, #1
 801135e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011360:	7c7a      	ldrb	r2, [r7, #17]
 8011362:	4972      	ldr	r1, [pc, #456]	; (801152c <etharp_query+0x268>)
 8011364:	4613      	mov	r3, r2
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	4413      	add	r3, r2
 801136a:	00db      	lsls	r3, r3, #3
 801136c:	440b      	add	r3, r1
 801136e:	3314      	adds	r3, #20
 8011370:	2201      	movs	r2, #1
 8011372:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011374:	7c7a      	ldrb	r2, [r7, #17]
 8011376:	496d      	ldr	r1, [pc, #436]	; (801152c <etharp_query+0x268>)
 8011378:	4613      	mov	r3, r2
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	4413      	add	r3, r2
 801137e:	00db      	lsls	r3, r3, #3
 8011380:	440b      	add	r3, r1
 8011382:	3308      	adds	r3, #8
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011388:	7c7a      	ldrb	r2, [r7, #17]
 801138a:	4968      	ldr	r1, [pc, #416]	; (801152c <etharp_query+0x268>)
 801138c:	4613      	mov	r3, r2
 801138e:	005b      	lsls	r3, r3, #1
 8011390:	4413      	add	r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	440b      	add	r3, r1
 8011396:	3314      	adds	r3, #20
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d011      	beq.n	80113c2 <etharp_query+0xfe>
 801139e:	7c7a      	ldrb	r2, [r7, #17]
 80113a0:	4962      	ldr	r1, [pc, #392]	; (801152c <etharp_query+0x268>)
 80113a2:	4613      	mov	r3, r2
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	4413      	add	r3, r2
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	440b      	add	r3, r1
 80113ac:	3314      	adds	r3, #20
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d806      	bhi.n	80113c2 <etharp_query+0xfe>
 80113b4:	4b5a      	ldr	r3, [pc, #360]	; (8011520 <etharp_query+0x25c>)
 80113b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80113ba:	495d      	ldr	r1, [pc, #372]	; (8011530 <etharp_query+0x26c>)
 80113bc:	485a      	ldr	r0, [pc, #360]	; (8011528 <etharp_query+0x264>)
 80113be:	f001 ffe7 	bl	8013390 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d102      	bne.n	80113ce <etharp_query+0x10a>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d10c      	bne.n	80113e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80113ce:	68b9      	ldr	r1, [r7, #8]
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f000 f963 	bl	801169c <etharp_request>
 80113d6:	4603      	mov	r3, r0
 80113d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d102      	bne.n	80113e8 <etharp_query+0x124>
      return result;
 80113e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113e6:	e096      	b.n	8011516 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d106      	bne.n	80113fc <etharp_query+0x138>
 80113ee:	4b4c      	ldr	r3, [pc, #304]	; (8011520 <etharp_query+0x25c>)
 80113f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80113f4:	494f      	ldr	r1, [pc, #316]	; (8011534 <etharp_query+0x270>)
 80113f6:	484c      	ldr	r0, [pc, #304]	; (8011528 <etharp_query+0x264>)
 80113f8:	f001 ffca 	bl	8013390 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80113fc:	7c7a      	ldrb	r2, [r7, #17]
 80113fe:	494b      	ldr	r1, [pc, #300]	; (801152c <etharp_query+0x268>)
 8011400:	4613      	mov	r3, r2
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	4413      	add	r3, r2
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	440b      	add	r3, r1
 801140a:	3314      	adds	r3, #20
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	2b01      	cmp	r3, #1
 8011410:	d917      	bls.n	8011442 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011412:	4a49      	ldr	r2, [pc, #292]	; (8011538 <etharp_query+0x274>)
 8011414:	7c7b      	ldrb	r3, [r7, #17]
 8011416:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011418:	7c7a      	ldrb	r2, [r7, #17]
 801141a:	4613      	mov	r3, r2
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	4413      	add	r3, r2
 8011420:	00db      	lsls	r3, r3, #3
 8011422:	3308      	adds	r3, #8
 8011424:	4a41      	ldr	r2, [pc, #260]	; (801152c <etharp_query+0x268>)
 8011426:	4413      	add	r3, r2
 8011428:	3304      	adds	r3, #4
 801142a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801142e:	9200      	str	r2, [sp, #0]
 8011430:	697a      	ldr	r2, [r7, #20]
 8011432:	6879      	ldr	r1, [r7, #4]
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f001 fc75 	bl	8012d24 <ethernet_output>
 801143a:	4603      	mov	r3, r0
 801143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011440:	e067      	b.n	8011512 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011442:	7c7a      	ldrb	r2, [r7, #17]
 8011444:	4939      	ldr	r1, [pc, #228]	; (801152c <etharp_query+0x268>)
 8011446:	4613      	mov	r3, r2
 8011448:	005b      	lsls	r3, r3, #1
 801144a:	4413      	add	r3, r2
 801144c:	00db      	lsls	r3, r3, #3
 801144e:	440b      	add	r3, r1
 8011450:	3314      	adds	r3, #20
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d15c      	bne.n	8011512 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011458:	2300      	movs	r3, #0
 801145a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011460:	e01c      	b.n	801149c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	895a      	ldrh	r2, [r3, #10]
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	891b      	ldrh	r3, [r3, #8]
 801146a:	429a      	cmp	r2, r3
 801146c:	d10a      	bne.n	8011484 <etharp_query+0x1c0>
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d006      	beq.n	8011484 <etharp_query+0x1c0>
 8011476:	4b2a      	ldr	r3, [pc, #168]	; (8011520 <etharp_query+0x25c>)
 8011478:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801147c:	492f      	ldr	r1, [pc, #188]	; (801153c <etharp_query+0x278>)
 801147e:	482a      	ldr	r0, [pc, #168]	; (8011528 <etharp_query+0x264>)
 8011480:	f001 ff86 	bl	8013390 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	7b1b      	ldrb	r3, [r3, #12]
 8011488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801148c:	2b00      	cmp	r3, #0
 801148e:	d002      	beq.n	8011496 <etharp_query+0x1d2>
        copy_needed = 1;
 8011490:	2301      	movs	r3, #1
 8011492:	61bb      	str	r3, [r7, #24]
        break;
 8011494:	e005      	b.n	80114a2 <etharp_query+0x1de>
      }
      p = p->next;
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1df      	bne.n	8011462 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d007      	beq.n	80114b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80114ae:	200e      	movs	r0, #14
 80114b0:	f7f9 f9c8 	bl	800a844 <pbuf_clone>
 80114b4:	61f8      	str	r0, [r7, #28]
 80114b6:	e004      	b.n	80114c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80114bc:	69f8      	ldr	r0, [r7, #28]
 80114be:	f7f8 ffef 	bl	800a4a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d021      	beq.n	801150c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80114c8:	7c7a      	ldrb	r2, [r7, #17]
 80114ca:	4918      	ldr	r1, [pc, #96]	; (801152c <etharp_query+0x268>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	005b      	lsls	r3, r3, #1
 80114d0:	4413      	add	r3, r2
 80114d2:	00db      	lsls	r3, r3, #3
 80114d4:	440b      	add	r3, r1
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00a      	beq.n	80114f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80114dc:	7c7a      	ldrb	r2, [r7, #17]
 80114de:	4913      	ldr	r1, [pc, #76]	; (801152c <etharp_query+0x268>)
 80114e0:	4613      	mov	r3, r2
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	4413      	add	r3, r2
 80114e6:	00db      	lsls	r3, r3, #3
 80114e8:	440b      	add	r3, r1
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f8 ff31 	bl	800a354 <pbuf_free>
      }
      arp_table[i].q = p;
 80114f2:	7c7a      	ldrb	r2, [r7, #17]
 80114f4:	490d      	ldr	r1, [pc, #52]	; (801152c <etharp_query+0x268>)
 80114f6:	4613      	mov	r3, r2
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	4413      	add	r3, r2
 80114fc:	00db      	lsls	r3, r3, #3
 80114fe:	440b      	add	r3, r1
 8011500:	69fa      	ldr	r2, [r7, #28]
 8011502:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011504:	2300      	movs	r3, #0
 8011506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801150a:	e002      	b.n	8011512 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801150c:	23ff      	movs	r3, #255	; 0xff
 801150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011516:	4618      	mov	r0, r3
 8011518:	3728      	adds	r7, #40	; 0x28
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	08016690 	.word	0x08016690
 8011524:	0801683c 	.word	0x0801683c
 8011528:	08016708 	.word	0x08016708
 801152c:	2000c9a8 	.word	0x2000c9a8
 8011530:	0801684c 	.word	0x0801684c
 8011534:	08016830 	.word	0x08016830
 8011538:	2000ca98 	.word	0x2000ca98
 801153c:	08016874 	.word	0x08016874

08011540 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b08a      	sub	sp, #40	; 0x28
 8011544:	af02      	add	r7, sp, #8
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <etharp_raw+0x26>
 8011558:	4b3a      	ldr	r3, [pc, #232]	; (8011644 <etharp_raw+0x104>)
 801155a:	f240 4257 	movw	r2, #1111	; 0x457
 801155e:	493a      	ldr	r1, [pc, #232]	; (8011648 <etharp_raw+0x108>)
 8011560:	483a      	ldr	r0, [pc, #232]	; (801164c <etharp_raw+0x10c>)
 8011562:	f001 ff15 	bl	8013390 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801156a:	211c      	movs	r1, #28
 801156c:	200e      	movs	r0, #14
 801156e:	f7f8 fc0d 	bl	8009d8c <pbuf_alloc>
 8011572:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d102      	bne.n	8011580 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801157a:	f04f 33ff 	mov.w	r3, #4294967295
 801157e:	e05d      	b.n	801163c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	895b      	ldrh	r3, [r3, #10]
 8011584:	2b1b      	cmp	r3, #27
 8011586:	d806      	bhi.n	8011596 <etharp_raw+0x56>
 8011588:	4b2e      	ldr	r3, [pc, #184]	; (8011644 <etharp_raw+0x104>)
 801158a:	f240 4262 	movw	r2, #1122	; 0x462
 801158e:	4930      	ldr	r1, [pc, #192]	; (8011650 <etharp_raw+0x110>)
 8011590:	482e      	ldr	r0, [pc, #184]	; (801164c <etharp_raw+0x10c>)
 8011592:	f001 fefd 	bl	8013390 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801159c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801159e:	4618      	mov	r0, r3
 80115a0:	f7f7 fae6 	bl	8008b70 <lwip_htons>
 80115a4:	4603      	mov	r3, r0
 80115a6:	461a      	mov	r2, r3
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115b2:	2b06      	cmp	r3, #6
 80115b4:	d006      	beq.n	80115c4 <etharp_raw+0x84>
 80115b6:	4b23      	ldr	r3, [pc, #140]	; (8011644 <etharp_raw+0x104>)
 80115b8:	f240 4269 	movw	r2, #1129	; 0x469
 80115bc:	4925      	ldr	r1, [pc, #148]	; (8011654 <etharp_raw+0x114>)
 80115be:	4823      	ldr	r0, [pc, #140]	; (801164c <etharp_raw+0x10c>)
 80115c0:	f001 fee6 	bl	8013390 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	3308      	adds	r3, #8
 80115c8:	2206      	movs	r2, #6
 80115ca:	6839      	ldr	r1, [r7, #0]
 80115cc:	4618      	mov	r0, r3
 80115ce:	f001 fe34 	bl	801323a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	3312      	adds	r3, #18
 80115d6:	2206      	movs	r2, #6
 80115d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115da:	4618      	mov	r0, r3
 80115dc:	f001 fe2d 	bl	801323a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	330e      	adds	r3, #14
 80115e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	3318      	adds	r3, #24
 80115ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f0:	6812      	ldr	r2, [r2, #0]
 80115f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	2200      	movs	r2, #0
 80115f8:	701a      	strb	r2, [r3, #0]
 80115fa:	2200      	movs	r2, #0
 80115fc:	f042 0201 	orr.w	r2, r2, #1
 8011600:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	2200      	movs	r2, #0
 8011606:	f042 0208 	orr.w	r2, r2, #8
 801160a:	709a      	strb	r2, [r3, #2]
 801160c:	2200      	movs	r2, #0
 801160e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2206      	movs	r2, #6
 8011614:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2204      	movs	r2, #4
 801161a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801161c:	f640 0306 	movw	r3, #2054	; 0x806
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	69b9      	ldr	r1, [r7, #24]
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f001 fb7b 	bl	8012d24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801162e:	69b8      	ldr	r0, [r7, #24]
 8011630:	f7f8 fe90 	bl	800a354 <pbuf_free>
  p = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011638:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3720      	adds	r7, #32
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	08016690 	.word	0x08016690
 8011648:	080167e0 	.word	0x080167e0
 801164c:	08016708 	.word	0x08016708
 8011650:	08016890 	.word	0x08016890
 8011654:	080168c4 	.word	0x080168c4

08011658 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b088      	sub	sp, #32
 801165c:	af04      	add	r7, sp, #16
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011674:	2201      	movs	r2, #1
 8011676:	9203      	str	r2, [sp, #12]
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	9202      	str	r2, [sp, #8]
 801167c:	4a06      	ldr	r2, [pc, #24]	; (8011698 <etharp_request_dst+0x40>)
 801167e:	9201      	str	r2, [sp, #4]
 8011680:	9300      	str	r3, [sp, #0]
 8011682:	4603      	mov	r3, r0
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f7ff ff5a 	bl	8011540 <etharp_raw>
 801168c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	08016e9c 	.word	0x08016e9c

0801169c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80116a6:	4a05      	ldr	r2, [pc, #20]	; (80116bc <etharp_request+0x20>)
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff ffd4 	bl	8011658 <etharp_request_dst>
 80116b0:	4603      	mov	r3, r0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	08016e94 	.word	0x08016e94

080116c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b08e      	sub	sp, #56	; 0x38
 80116c4:	af04      	add	r7, sp, #16
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80116ca:	4b79      	ldr	r3, [pc, #484]	; (80118b0 <icmp_input+0x1f0>)
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	f003 030f 	and.w	r3, r3, #15
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80116e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116e2:	2b13      	cmp	r3, #19
 80116e4:	f240 80cd 	bls.w	8011882 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	895b      	ldrh	r3, [r3, #10]
 80116ec:	2b03      	cmp	r3, #3
 80116ee:	f240 80ca 	bls.w	8011886 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80116fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 80b7 	beq.w	8011874 <icmp_input+0x1b4>
 8011706:	2b08      	cmp	r3, #8
 8011708:	f040 80b7 	bne.w	801187a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801170c:	4b69      	ldr	r3, [pc, #420]	; (80118b4 <icmp_input+0x1f4>)
 801170e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011710:	4b67      	ldr	r3, [pc, #412]	; (80118b0 <icmp_input+0x1f0>)
 8011712:	695b      	ldr	r3, [r3, #20]
 8011714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011718:	2be0      	cmp	r3, #224	; 0xe0
 801171a:	f000 80bb 	beq.w	8011894 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801171e:	4b64      	ldr	r3, [pc, #400]	; (80118b0 <icmp_input+0x1f0>)
 8011720:	695b      	ldr	r3, [r3, #20]
 8011722:	4a63      	ldr	r2, [pc, #396]	; (80118b0 <icmp_input+0x1f0>)
 8011724:	6812      	ldr	r2, [r2, #0]
 8011726:	4611      	mov	r1, r2
 8011728:	4618      	mov	r0, r3
 801172a:	f000 fbed 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	f040 80b1 	bne.w	8011898 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	2b07      	cmp	r3, #7
 801173c:	f240 80a5 	bls.w	801188a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011742:	330e      	adds	r3, #14
 8011744:	4619      	mov	r1, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7f8 fd6e 	bl	800a228 <pbuf_add_header>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d04b      	beq.n	80117ea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	891a      	ldrh	r2, [r3, #8]
 8011756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011758:	4413      	add	r3, r2
 801175a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	891b      	ldrh	r3, [r3, #8]
 8011760:	8b7a      	ldrh	r2, [r7, #26]
 8011762:	429a      	cmp	r2, r3
 8011764:	f0c0 809a 	bcc.w	801189c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011768:	8b7b      	ldrh	r3, [r7, #26]
 801176a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801176e:	4619      	mov	r1, r3
 8011770:	200e      	movs	r0, #14
 8011772:	f7f8 fb0b 	bl	8009d8c <pbuf_alloc>
 8011776:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	2b00      	cmp	r3, #0
 801177c:	f000 8090 	beq.w	80118a0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	895b      	ldrh	r3, [r3, #10]
 8011784:	461a      	mov	r2, r3
 8011786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011788:	3308      	adds	r3, #8
 801178a:	429a      	cmp	r2, r3
 801178c:	d203      	bcs.n	8011796 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801178e:	6978      	ldr	r0, [r7, #20]
 8011790:	f7f8 fde0 	bl	800a354 <pbuf_free>
          goto icmperr;
 8011794:	e085      	b.n	80118a2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801179e:	4618      	mov	r0, r3
 80117a0:	f001 fd4b 	bl	801323a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80117a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117a6:	4619      	mov	r1, r3
 80117a8:	6978      	ldr	r0, [r7, #20]
 80117aa:	f7f8 fd4d 	bl	800a248 <pbuf_remove_header>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d009      	beq.n	80117c8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80117b4:	4b40      	ldr	r3, [pc, #256]	; (80118b8 <icmp_input+0x1f8>)
 80117b6:	22b6      	movs	r2, #182	; 0xb6
 80117b8:	4940      	ldr	r1, [pc, #256]	; (80118bc <icmp_input+0x1fc>)
 80117ba:	4841      	ldr	r0, [pc, #260]	; (80118c0 <icmp_input+0x200>)
 80117bc:	f001 fde8 	bl	8013390 <iprintf>
          pbuf_free(r);
 80117c0:	6978      	ldr	r0, [r7, #20]
 80117c2:	f7f8 fdc7 	bl	800a354 <pbuf_free>
          goto icmperr;
 80117c6:	e06c      	b.n	80118a2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80117c8:	6879      	ldr	r1, [r7, #4]
 80117ca:	6978      	ldr	r0, [r7, #20]
 80117cc:	f7f8 fef6 	bl	800a5bc <pbuf_copy>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d003      	beq.n	80117de <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80117d6:	6978      	ldr	r0, [r7, #20]
 80117d8:	f7f8 fdbc 	bl	800a354 <pbuf_free>
          goto icmperr;
 80117dc:	e061      	b.n	80118a2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f7f8 fdb8 	bl	800a354 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	607b      	str	r3, [r7, #4]
 80117e8:	e00f      	b.n	801180a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80117ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117ec:	330e      	adds	r3, #14
 80117ee:	4619      	mov	r1, r3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7f8 fd29 	bl	800a248 <pbuf_remove_header>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d006      	beq.n	801180a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80117fc:	4b2e      	ldr	r3, [pc, #184]	; (80118b8 <icmp_input+0x1f8>)
 80117fe:	22c7      	movs	r2, #199	; 0xc7
 8011800:	4930      	ldr	r1, [pc, #192]	; (80118c4 <icmp_input+0x204>)
 8011802:	482f      	ldr	r0, [pc, #188]	; (80118c0 <icmp_input+0x200>)
 8011804:	f001 fdc4 	bl	8013390 <iprintf>
          goto icmperr;
 8011808:	e04b      	b.n	80118a2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011812:	4619      	mov	r1, r3
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7f8 fd07 	bl	800a228 <pbuf_add_header>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d12b      	bne.n	8011878 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801182e:	4b20      	ldr	r3, [pc, #128]	; (80118b0 <icmp_input+0x1f0>)
 8011830:	691a      	ldr	r2, [r3, #16]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	2200      	movs	r2, #0
 8011840:	709a      	strb	r2, [r3, #2]
 8011842:	2200      	movs	r2, #0
 8011844:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	22ff      	movs	r2, #255	; 0xff
 801184a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2200      	movs	r2, #0
 8011850:	729a      	strb	r2, [r3, #10]
 8011852:	2200      	movs	r2, #0
 8011854:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	9302      	str	r3, [sp, #8]
 801185a:	2301      	movs	r3, #1
 801185c:	9301      	str	r3, [sp, #4]
 801185e:	2300      	movs	r3, #0
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	23ff      	movs	r3, #255	; 0xff
 8011864:	2200      	movs	r2, #0
 8011866:	69f9      	ldr	r1, [r7, #28]
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f000 fa75 	bl	8011d58 <ip4_output_if>
 801186e:	4603      	mov	r3, r0
 8011870:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011872:	e001      	b.n	8011878 <icmp_input+0x1b8>
      break;
 8011874:	bf00      	nop
 8011876:	e000      	b.n	801187a <icmp_input+0x1ba>
      break;
 8011878:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7f8 fd6a 	bl	800a354 <pbuf_free>
  return;
 8011880:	e013      	b.n	80118aa <icmp_input+0x1ea>
    goto lenerr;
 8011882:	bf00      	nop
 8011884:	e002      	b.n	801188c <icmp_input+0x1cc>
    goto lenerr;
 8011886:	bf00      	nop
 8011888:	e000      	b.n	801188c <icmp_input+0x1cc>
        goto lenerr;
 801188a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7f8 fd61 	bl	800a354 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011892:	e00a      	b.n	80118aa <icmp_input+0x1ea>
        goto icmperr;
 8011894:	bf00      	nop
 8011896:	e004      	b.n	80118a2 <icmp_input+0x1e2>
        goto icmperr;
 8011898:	bf00      	nop
 801189a:	e002      	b.n	80118a2 <icmp_input+0x1e2>
          goto icmperr;
 801189c:	bf00      	nop
 801189e:	e000      	b.n	80118a2 <icmp_input+0x1e2>
          goto icmperr;
 80118a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7f8 fd56 	bl	800a354 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80118a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80118aa:	3728      	adds	r7, #40	; 0x28
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	200091f4 	.word	0x200091f4
 80118b4:	20009208 	.word	0x20009208
 80118b8:	08016908 	.word	0x08016908
 80118bc:	08016940 	.word	0x08016940
 80118c0:	08016978 	.word	0x08016978
 80118c4:	080169a0 	.word	0x080169a0

080118c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	460b      	mov	r3, r1
 80118d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80118d4:	78fb      	ldrb	r3, [r7, #3]
 80118d6:	461a      	mov	r2, r3
 80118d8:	2103      	movs	r1, #3
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 f814 	bl	8011908 <icmp_send_response>
}
 80118e0:	bf00      	nop
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	460b      	mov	r3, r1
 80118f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80118f4:	78fb      	ldrb	r3, [r7, #3]
 80118f6:	461a      	mov	r2, r3
 80118f8:	210b      	movs	r1, #11
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 f804 	bl	8011908 <icmp_send_response>
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b08c      	sub	sp, #48	; 0x30
 801190c:	af04      	add	r7, sp, #16
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	70fb      	strb	r3, [r7, #3]
 8011914:	4613      	mov	r3, r2
 8011916:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011918:	f44f 7220 	mov.w	r2, #640	; 0x280
 801191c:	2124      	movs	r1, #36	; 0x24
 801191e:	2022      	movs	r0, #34	; 0x22
 8011920:	f7f8 fa34 	bl	8009d8c <pbuf_alloc>
 8011924:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d04c      	beq.n	80119c6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	895b      	ldrh	r3, [r3, #10]
 8011930:	2b23      	cmp	r3, #35	; 0x23
 8011932:	d806      	bhi.n	8011942 <icmp_send_response+0x3a>
 8011934:	4b26      	ldr	r3, [pc, #152]	; (80119d0 <icmp_send_response+0xc8>)
 8011936:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801193a:	4926      	ldr	r1, [pc, #152]	; (80119d4 <icmp_send_response+0xcc>)
 801193c:	4826      	ldr	r0, [pc, #152]	; (80119d8 <icmp_send_response+0xd0>)
 801193e:	f001 fd27 	bl	8013390 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	78fa      	ldrb	r2, [r7, #3]
 8011952:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	78ba      	ldrb	r2, [r7, #2]
 8011958:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	2200      	movs	r2, #0
 801195e:	711a      	strb	r2, [r3, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	2200      	movs	r2, #0
 8011968:	719a      	strb	r2, [r3, #6]
 801196a:	2200      	movs	r2, #0
 801196c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	f103 0008 	add.w	r0, r3, #8
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	221c      	movs	r2, #28
 801197c:	4619      	mov	r1, r3
 801197e:	f001 fc5c 	bl	801323a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011988:	f107 030c 	add.w	r3, r7, #12
 801198c:	4618      	mov	r0, r3
 801198e:	f000 f825 	bl	80119dc <ip4_route>
 8011992:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d011      	beq.n	80119be <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	2200      	movs	r2, #0
 801199e:	709a      	strb	r2, [r3, #2]
 80119a0:	2200      	movs	r2, #0
 80119a2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80119a4:	f107 020c 	add.w	r2, r7, #12
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	9302      	str	r3, [sp, #8]
 80119ac:	2301      	movs	r3, #1
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	2300      	movs	r3, #0
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	23ff      	movs	r3, #255	; 0xff
 80119b6:	2100      	movs	r1, #0
 80119b8:	69f8      	ldr	r0, [r7, #28]
 80119ba:	f000 f9cd 	bl	8011d58 <ip4_output_if>
  }
  pbuf_free(q);
 80119be:	69f8      	ldr	r0, [r7, #28]
 80119c0:	f7f8 fcc8 	bl	800a354 <pbuf_free>
 80119c4:	e000      	b.n	80119c8 <icmp_send_response+0xc0>
    return;
 80119c6:	bf00      	nop
}
 80119c8:	3720      	adds	r7, #32
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	08016908 	.word	0x08016908
 80119d4:	080169d4 	.word	0x080169d4
 80119d8:	08016978 	.word	0x08016978

080119dc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80119dc:	b480      	push	{r7}
 80119de:	b085      	sub	sp, #20
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80119e4:	4b33      	ldr	r3, [pc, #204]	; (8011ab4 <ip4_route+0xd8>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	60fb      	str	r3, [r7, #12]
 80119ea:	e036      	b.n	8011a5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d02b      	beq.n	8011a54 <ip4_route+0x78>
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a02:	089b      	lsrs	r3, r3, #2
 8011a04:	f003 0301 	and.w	r3, r3, #1
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d022      	beq.n	8011a54 <ip4_route+0x78>
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	3304      	adds	r3, #4
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d01d      	beq.n	8011a54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	405a      	eors	r2, r3
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	3308      	adds	r3, #8
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	e038      	b.n	8011aa6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a3a:	f003 0302 	and.w	r3, r3, #2
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d108      	bne.n	8011a54 <ip4_route+0x78>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	330c      	adds	r3, #12
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d101      	bne.n	8011a54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	e028      	b.n	8011aa6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	60fb      	str	r3, [r7, #12]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d1c5      	bne.n	80119ec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a60:	4b15      	ldr	r3, [pc, #84]	; (8011ab8 <ip4_route+0xdc>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d01a      	beq.n	8011a9e <ip4_route+0xc2>
 8011a68:	4b13      	ldr	r3, [pc, #76]	; (8011ab8 <ip4_route+0xdc>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d012      	beq.n	8011a9e <ip4_route+0xc2>
 8011a78:	4b0f      	ldr	r3, [pc, #60]	; (8011ab8 <ip4_route+0xdc>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a80:	f003 0304 	and.w	r3, r3, #4
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d00a      	beq.n	8011a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a88:	4b0b      	ldr	r3, [pc, #44]	; (8011ab8 <ip4_route+0xdc>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d004      	beq.n	8011a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8011a9c:	d101      	bne.n	8011aa2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e001      	b.n	8011aa6 <ip4_route+0xca>
  }

  return netif_default;
 8011aa2:	4b05      	ldr	r3, [pc, #20]	; (8011ab8 <ip4_route+0xdc>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	2000c93c 	.word	0x2000c93c
 8011ab8:	2000c940 	.word	0x2000c940

08011abc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011aca:	f003 0301 	and.w	r3, r3, #1
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d016      	beq.n	8011b02 <ip4_input_accept+0x46>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d011      	beq.n	8011b02 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ade:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <ip4_input_accept+0x50>)
 8011ae0:	695a      	ldr	r2, [r3, #20]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d008      	beq.n	8011afe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011aec:	4b07      	ldr	r3, [pc, #28]	; (8011b0c <ip4_input_accept+0x50>)
 8011aee:	695b      	ldr	r3, [r3, #20]
 8011af0:	6879      	ldr	r1, [r7, #4]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 fa08 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8011af8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d001      	beq.n	8011b02 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011afe:	2301      	movs	r3, #1
 8011b00:	e000      	b.n	8011b04 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	200091f4 	.word	0x200091f4

08011b10 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	091b      	lsrs	r3, r3, #4
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b04      	cmp	r3, #4
 8011b2a:	d004      	beq.n	8011b36 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7f8 fc11 	bl	800a354 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	e107      	b.n	8011d46 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	f003 030f 	and.w	r3, r3, #15
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	885b      	ldrh	r3, [r3, #2]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7f7 f80f 	bl	8008b70 <lwip_htons>
 8011b52:	4603      	mov	r3, r0
 8011b54:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	891b      	ldrh	r3, [r3, #8]
 8011b5a:	89ba      	ldrh	r2, [r7, #12]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d204      	bcs.n	8011b6a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011b60:	89bb      	ldrh	r3, [r7, #12]
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7f8 fa6f 	bl	800a048 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	895b      	ldrh	r3, [r3, #10]
 8011b6e:	89fa      	ldrh	r2, [r7, #14]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d807      	bhi.n	8011b84 <ip4_input+0x74>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	891b      	ldrh	r3, [r3, #8]
 8011b78:	89ba      	ldrh	r2, [r7, #12]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d802      	bhi.n	8011b84 <ip4_input+0x74>
 8011b7e:	89fb      	ldrh	r3, [r7, #14]
 8011b80:	2b13      	cmp	r3, #19
 8011b82:	d804      	bhi.n	8011b8e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7f8 fbe5 	bl	800a354 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e0db      	b.n	8011d46 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	691b      	ldr	r3, [r3, #16]
 8011b92:	4a6f      	ldr	r2, [pc, #444]	; (8011d50 <ip4_input+0x240>)
 8011b94:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	4a6d      	ldr	r2, [pc, #436]	; (8011d50 <ip4_input+0x240>)
 8011b9c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b9e:	4b6c      	ldr	r3, [pc, #432]	; (8011d50 <ip4_input+0x240>)
 8011ba0:	695b      	ldr	r3, [r3, #20]
 8011ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ba6:	2be0      	cmp	r3, #224	; 0xe0
 8011ba8:	d112      	bne.n	8011bd0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb0:	f003 0301 	and.w	r3, r3, #1
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d007      	beq.n	8011bca <ip4_input+0xba>
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d002      	beq.n	8011bca <ip4_input+0xba>
      netif = inp;
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	613b      	str	r3, [r7, #16]
 8011bc8:	e02a      	b.n	8011c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	613b      	str	r3, [r7, #16]
 8011bce:	e027      	b.n	8011c20 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011bd0:	6838      	ldr	r0, [r7, #0]
 8011bd2:	f7ff ff73 	bl	8011abc <ip4_input_accept>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <ip4_input+0xd2>
      netif = inp;
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	613b      	str	r3, [r7, #16]
 8011be0:	e01e      	b.n	8011c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011be6:	4b5a      	ldr	r3, [pc, #360]	; (8011d50 <ip4_input+0x240>)
 8011be8:	695b      	ldr	r3, [r3, #20]
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	2b7f      	cmp	r3, #127	; 0x7f
 8011bee:	d017      	beq.n	8011c20 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011bf0:	4b58      	ldr	r3, [pc, #352]	; (8011d54 <ip4_input+0x244>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	613b      	str	r3, [r7, #16]
 8011bf6:	e00e      	b.n	8011c16 <ip4_input+0x106>
          if (netif == inp) {
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d006      	beq.n	8011c0e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011c00:	6938      	ldr	r0, [r7, #16]
 8011c02:	f7ff ff5b 	bl	8011abc <ip4_input_accept>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d108      	bne.n	8011c1e <ip4_input+0x10e>
 8011c0c:	e000      	b.n	8011c10 <ip4_input+0x100>
            continue;
 8011c0e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	613b      	str	r3, [r7, #16]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1ed      	bne.n	8011bf8 <ip4_input+0xe8>
 8011c1c:	e000      	b.n	8011c20 <ip4_input+0x110>
            break;
 8011c1e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c20:	4b4b      	ldr	r3, [pc, #300]	; (8011d50 <ip4_input+0x240>)
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	6839      	ldr	r1, [r7, #0]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f000 f96e 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d105      	bne.n	8011c3e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011c32:	4b47      	ldr	r3, [pc, #284]	; (8011d50 <ip4_input+0x240>)
 8011c34:	691b      	ldr	r3, [r3, #16]
 8011c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c3a:	2be0      	cmp	r3, #224	; 0xe0
 8011c3c:	d104      	bne.n	8011c48 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7f8 fb88 	bl	800a354 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	e07e      	b.n	8011d46 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d104      	bne.n	8011c58 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7f8 fb80 	bl	800a354 <pbuf_free>
    return ERR_OK;
 8011c54:	2300      	movs	r3, #0
 8011c56:	e076      	b.n	8011d46 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	88db      	ldrh	r3, [r3, #6]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011c64:	4013      	ands	r3, r2
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00b      	beq.n	8011c82 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fc92 	bl	8012594 <ip4_reass>
 8011c70:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d101      	bne.n	8011c7c <ip4_input+0x16c>
      return ERR_OK;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	e064      	b.n	8011d46 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011c82:	4a33      	ldr	r2, [pc, #204]	; (8011d50 <ip4_input+0x240>)
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011c88:	4a31      	ldr	r2, [pc, #196]	; (8011d50 <ip4_input+0x240>)
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011c8e:	4a30      	ldr	r2, [pc, #192]	; (8011d50 <ip4_input+0x240>)
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	f003 030f 	and.w	r3, r3, #15
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	4b2a      	ldr	r3, [pc, #168]	; (8011d50 <ip4_input+0x240>)
 8011ca6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011ca8:	89fb      	ldrh	r3, [r7, #14]
 8011caa:	4619      	mov	r1, r3
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7f8 facb 	bl	800a248 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	7a5b      	ldrb	r3, [r3, #9]
 8011cb6:	2b11      	cmp	r3, #17
 8011cb8:	d006      	beq.n	8011cc8 <ip4_input+0x1b8>
 8011cba:	2b11      	cmp	r3, #17
 8011cbc:	dc13      	bgt.n	8011ce6 <ip4_input+0x1d6>
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d00c      	beq.n	8011cdc <ip4_input+0x1cc>
 8011cc2:	2b06      	cmp	r3, #6
 8011cc4:	d005      	beq.n	8011cd2 <ip4_input+0x1c2>
 8011cc6:	e00e      	b.n	8011ce6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011cc8:	6839      	ldr	r1, [r7, #0]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7fe f970 	bl	800ffb0 <udp_input>
        break;
 8011cd0:	e026      	b.n	8011d20 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011cd2:	6839      	ldr	r1, [r7, #0]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7fa f981 	bl	800bfdc <tcp_input>
        break;
 8011cda:	e021      	b.n	8011d20 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff fcee 	bl	80116c0 <icmp_input>
        break;
 8011ce4:	e01c      	b.n	8011d20 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ce6:	4b1a      	ldr	r3, [pc, #104]	; (8011d50 <ip4_input+0x240>)
 8011ce8:	695b      	ldr	r3, [r3, #20]
 8011cea:	6939      	ldr	r1, [r7, #16]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 f90b 	bl	8011f08 <ip4_addr_isbroadcast_u32>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d10f      	bne.n	8011d18 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011cf8:	4b15      	ldr	r3, [pc, #84]	; (8011d50 <ip4_input+0x240>)
 8011cfa:	695b      	ldr	r3, [r3, #20]
 8011cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d00:	2be0      	cmp	r3, #224	; 0xe0
 8011d02:	d009      	beq.n	8011d18 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d08:	4619      	mov	r1, r3
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7f8 fb0f 	bl	800a32e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011d10:	2102      	movs	r1, #2
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fdd8 	bl	80118c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7f8 fb1b 	bl	800a354 <pbuf_free>
        break;
 8011d1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011d20:	4b0b      	ldr	r3, [pc, #44]	; (8011d50 <ip4_input+0x240>)
 8011d22:	2200      	movs	r2, #0
 8011d24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011d26:	4b0a      	ldr	r3, [pc, #40]	; (8011d50 <ip4_input+0x240>)
 8011d28:	2200      	movs	r2, #0
 8011d2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011d2c:	4b08      	ldr	r3, [pc, #32]	; (8011d50 <ip4_input+0x240>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011d32:	4b07      	ldr	r3, [pc, #28]	; (8011d50 <ip4_input+0x240>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011d38:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <ip4_input+0x240>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011d3e:	4b04      	ldr	r3, [pc, #16]	; (8011d50 <ip4_input+0x240>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3718      	adds	r7, #24
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	200091f4 	.word	0x200091f4
 8011d54:	2000c93c 	.word	0x2000c93c

08011d58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b08a      	sub	sp, #40	; 0x28
 8011d5c:	af04      	add	r7, sp, #16
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d009      	beq.n	8011d84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d003      	beq.n	8011d7e <ip4_output_if+0x26>
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d102      	bne.n	8011d84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	3304      	adds	r3, #4
 8011d82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011d84:	78fa      	ldrb	r2, [r7, #3]
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	9302      	str	r3, [sp, #8]
 8011d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d8e:	9301      	str	r3, [sp, #4]
 8011d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	4613      	mov	r3, r2
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	6979      	ldr	r1, [r7, #20]
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f000 f805 	bl	8011dac <ip4_output_if_src>
 8011da2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3718      	adds	r7, #24
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b088      	sub	sp, #32
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	607a      	str	r2, [r7, #4]
 8011db8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	7b9b      	ldrb	r3, [r3, #14]
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d006      	beq.n	8011dd0 <ip4_output_if_src+0x24>
 8011dc2:	4b4b      	ldr	r3, [pc, #300]	; (8011ef0 <ip4_output_if_src+0x144>)
 8011dc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011dc8:	494a      	ldr	r1, [pc, #296]	; (8011ef4 <ip4_output_if_src+0x148>)
 8011dca:	484b      	ldr	r0, [pc, #300]	; (8011ef8 <ip4_output_if_src+0x14c>)
 8011dcc:	f001 fae0 	bl	8013390 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d060      	beq.n	8011e98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011dd6:	2314      	movs	r3, #20
 8011dd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011dda:	2114      	movs	r1, #20
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f7f8 fa23 	bl	800a228 <pbuf_add_header>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d002      	beq.n	8011dee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011de8:	f06f 0301 	mvn.w	r3, #1
 8011dec:	e07c      	b.n	8011ee8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	895b      	ldrh	r3, [r3, #10]
 8011df8:	2b13      	cmp	r3, #19
 8011dfa:	d806      	bhi.n	8011e0a <ip4_output_if_src+0x5e>
 8011dfc:	4b3c      	ldr	r3, [pc, #240]	; (8011ef0 <ip4_output_if_src+0x144>)
 8011dfe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011e02:	493e      	ldr	r1, [pc, #248]	; (8011efc <ip4_output_if_src+0x150>)
 8011e04:	483c      	ldr	r0, [pc, #240]	; (8011ef8 <ip4_output_if_src+0x14c>)
 8011e06:	f001 fac3 	bl	8013390 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	78fa      	ldrb	r2, [r7, #3]
 8011e0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011e16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011e20:	8b7b      	ldrh	r3, [r7, #26]
 8011e22:	089b      	lsrs	r3, r3, #2
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011e38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	891b      	ldrh	r3, [r3, #8]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7f6 fe96 	bl	8008b70 <lwip_htons>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461a      	mov	r2, r3
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	719a      	strb	r2, [r3, #6]
 8011e52:	2200      	movs	r2, #0
 8011e54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011e56:	4b2a      	ldr	r3, [pc, #168]	; (8011f00 <ip4_output_if_src+0x154>)
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7f6 fe88 	bl	8008b70 <lwip_htons>
 8011e60:	4603      	mov	r3, r0
 8011e62:	461a      	mov	r2, r3
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011e68:	4b25      	ldr	r3, [pc, #148]	; (8011f00 <ip4_output_if_src+0x154>)
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	4b23      	ldr	r3, [pc, #140]	; (8011f00 <ip4_output_if_src+0x154>)
 8011e72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d104      	bne.n	8011e84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011e7a:	4b22      	ldr	r3, [pc, #136]	; (8011f04 <ip4_output_if_src+0x158>)
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	60da      	str	r2, [r3, #12]
 8011e82:	e003      	b.n	8011e8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	729a      	strb	r2, [r3, #10]
 8011e92:	2200      	movs	r2, #0
 8011e94:	72da      	strb	r2, [r3, #11]
 8011e96:	e00f      	b.n	8011eb8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	895b      	ldrh	r3, [r3, #10]
 8011e9c:	2b13      	cmp	r3, #19
 8011e9e:	d802      	bhi.n	8011ea6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011ea0:	f06f 0301 	mvn.w	r3, #1
 8011ea4:	e020      	b.n	8011ee8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011eb2:	f107 0314 	add.w	r3, r7, #20
 8011eb6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d00c      	beq.n	8011eda <ip4_output_if_src+0x12e>
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	891a      	ldrh	r2, [r3, #8]
 8011ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d906      	bls.n	8011eda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f000 fd53 	bl	801297c <ip4_frag>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	e006      	b.n	8011ee8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011edc:	695b      	ldr	r3, [r3, #20]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	68f9      	ldr	r1, [r7, #12]
 8011ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ee4:	4798      	blx	r3
 8011ee6:	4603      	mov	r3, r0
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3720      	adds	r7, #32
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	08016a00 	.word	0x08016a00
 8011ef4:	08016a34 	.word	0x08016a34
 8011ef8:	08016a40 	.word	0x08016a40
 8011efc:	08016a68 	.word	0x08016a68
 8011f00:	2000ca9a 	.word	0x2000ca9a
 8011f04:	08016e90 	.word	0x08016e90

08011f08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1c:	d002      	beq.n	8011f24 <ip4_addr_isbroadcast_u32+0x1c>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d101      	bne.n	8011f28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011f24:	2301      	movs	r3, #1
 8011f26:	e02a      	b.n	8011f7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f2e:	f003 0302 	and.w	r3, r3, #2
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d101      	bne.n	8011f3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	e021      	b.n	8011f7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d101      	bne.n	8011f4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e019      	b.n	8011f7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011f4a:	68fa      	ldr	r2, [r7, #12]
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	3304      	adds	r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	405a      	eors	r2, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	3308      	adds	r3, #8
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10d      	bne.n	8011f7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	3308      	adds	r3, #8
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	43da      	mvns	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	3308      	adds	r3, #8
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d101      	bne.n	8011f7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e000      	b.n	8011f7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011f7c:	2300      	movs	r3, #0
  }
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
	...

08011f8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011f92:	2300      	movs	r3, #0
 8011f94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011f96:	4b12      	ldr	r3, [pc, #72]	; (8011fe0 <ip_reass_tmr+0x54>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011f9c:	e018      	b.n	8011fd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	7fdb      	ldrb	r3, [r3, #31]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <ip_reass_tmr+0x32>
      r->timer--;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	7fdb      	ldrb	r3, [r3, #31]
 8011faa:	3b01      	subs	r3, #1
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	60fb      	str	r3, [r7, #12]
 8011fbc:	e008      	b.n	8011fd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011fc8:	68b9      	ldr	r1, [r7, #8]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f80a 	bl	8011fe4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1e3      	bne.n	8011f9e <ip_reass_tmr+0x12>
    }
  }
}
 8011fd6:	bf00      	nop
 8011fd8:	bf00      	nop
 8011fda:	3710      	adds	r7, #16
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	2000ca9c 	.word	0x2000ca9c

08011fe4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011ff2:	683a      	ldr	r2, [r7, #0]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d105      	bne.n	8012006 <ip_reass_free_complete_datagram+0x22>
 8011ffa:	4b45      	ldr	r3, [pc, #276]	; (8012110 <ip_reass_free_complete_datagram+0x12c>)
 8011ffc:	22ab      	movs	r2, #171	; 0xab
 8011ffe:	4945      	ldr	r1, [pc, #276]	; (8012114 <ip_reass_free_complete_datagram+0x130>)
 8012000:	4845      	ldr	r0, [pc, #276]	; (8012118 <ip_reass_free_complete_datagram+0x134>)
 8012002:	f001 f9c5 	bl	8013390 <iprintf>
  if (prev != NULL) {
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d00a      	beq.n	8012022 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	429a      	cmp	r2, r3
 8012014:	d005      	beq.n	8012022 <ip_reass_free_complete_datagram+0x3e>
 8012016:	4b3e      	ldr	r3, [pc, #248]	; (8012110 <ip_reass_free_complete_datagram+0x12c>)
 8012018:	22ad      	movs	r2, #173	; 0xad
 801201a:	4940      	ldr	r1, [pc, #256]	; (801211c <ip_reass_free_complete_datagram+0x138>)
 801201c:	483e      	ldr	r0, [pc, #248]	; (8012118 <ip_reass_free_complete_datagram+0x134>)
 801201e:	f001 f9b7 	bl	8013390 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	889b      	ldrh	r3, [r3, #4]
 801202e:	b29b      	uxth	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d12a      	bne.n	801208a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	6858      	ldr	r0, [r3, #4]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	3308      	adds	r3, #8
 801204a:	2214      	movs	r2, #20
 801204c:	4619      	mov	r1, r3
 801204e:	f001 f8f4 	bl	801323a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012052:	2101      	movs	r1, #1
 8012054:	69b8      	ldr	r0, [r7, #24]
 8012056:	f7ff fc47 	bl	80118e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801205a:	69b8      	ldr	r0, [r7, #24]
 801205c:	f7f8 fa08 	bl	800a470 <pbuf_clen>
 8012060:	4603      	mov	r3, r0
 8012062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012064:	8bfa      	ldrh	r2, [r7, #30]
 8012066:	8a7b      	ldrh	r3, [r7, #18]
 8012068:	4413      	add	r3, r2
 801206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801206e:	db05      	blt.n	801207c <ip_reass_free_complete_datagram+0x98>
 8012070:	4b27      	ldr	r3, [pc, #156]	; (8012110 <ip_reass_free_complete_datagram+0x12c>)
 8012072:	22bc      	movs	r2, #188	; 0xbc
 8012074:	492a      	ldr	r1, [pc, #168]	; (8012120 <ip_reass_free_complete_datagram+0x13c>)
 8012076:	4828      	ldr	r0, [pc, #160]	; (8012118 <ip_reass_free_complete_datagram+0x134>)
 8012078:	f001 f98a 	bl	8013390 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801207c:	8bfa      	ldrh	r2, [r7, #30]
 801207e:	8a7b      	ldrh	r3, [r7, #18]
 8012080:	4413      	add	r3, r2
 8012082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012084:	69b8      	ldr	r0, [r7, #24]
 8012086:	f7f8 f965 	bl	800a354 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012090:	e01f      	b.n	80120d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7f8 f9e4 	bl	800a470 <pbuf_clen>
 80120a8:	4603      	mov	r3, r0
 80120aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120ac:	8bfa      	ldrh	r2, [r7, #30]
 80120ae:	8a7b      	ldrh	r3, [r7, #18]
 80120b0:	4413      	add	r3, r2
 80120b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120b6:	db05      	blt.n	80120c4 <ip_reass_free_complete_datagram+0xe0>
 80120b8:	4b15      	ldr	r3, [pc, #84]	; (8012110 <ip_reass_free_complete_datagram+0x12c>)
 80120ba:	22cc      	movs	r2, #204	; 0xcc
 80120bc:	4918      	ldr	r1, [pc, #96]	; (8012120 <ip_reass_free_complete_datagram+0x13c>)
 80120be:	4816      	ldr	r0, [pc, #88]	; (8012118 <ip_reass_free_complete_datagram+0x134>)
 80120c0:	f001 f966 	bl	8013390 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80120c4:	8bfa      	ldrh	r2, [r7, #30]
 80120c6:	8a7b      	ldrh	r3, [r7, #18]
 80120c8:	4413      	add	r3, r2
 80120ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f7f8 f941 	bl	800a354 <pbuf_free>
  while (p != NULL) {
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1dc      	bne.n	8012092 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f8c2 	bl	8012264 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80120e0:	4b10      	ldr	r3, [pc, #64]	; (8012124 <ip_reass_free_complete_datagram+0x140>)
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	8bfa      	ldrh	r2, [r7, #30]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d905      	bls.n	80120f6 <ip_reass_free_complete_datagram+0x112>
 80120ea:	4b09      	ldr	r3, [pc, #36]	; (8012110 <ip_reass_free_complete_datagram+0x12c>)
 80120ec:	22d2      	movs	r2, #210	; 0xd2
 80120ee:	490e      	ldr	r1, [pc, #56]	; (8012128 <ip_reass_free_complete_datagram+0x144>)
 80120f0:	4809      	ldr	r0, [pc, #36]	; (8012118 <ip_reass_free_complete_datagram+0x134>)
 80120f2:	f001 f94d 	bl	8013390 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80120f6:	4b0b      	ldr	r3, [pc, #44]	; (8012124 <ip_reass_free_complete_datagram+0x140>)
 80120f8:	881a      	ldrh	r2, [r3, #0]
 80120fa:	8bfb      	ldrh	r3, [r7, #30]
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	b29a      	uxth	r2, r3
 8012100:	4b08      	ldr	r3, [pc, #32]	; (8012124 <ip_reass_free_complete_datagram+0x140>)
 8012102:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012104:	8bfb      	ldrh	r3, [r7, #30]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3720      	adds	r7, #32
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	08016a98 	.word	0x08016a98
 8012114:	08016ad4 	.word	0x08016ad4
 8012118:	08016ae0 	.word	0x08016ae0
 801211c:	08016b08 	.word	0x08016b08
 8012120:	08016b1c 	.word	0x08016b1c
 8012124:	2000caa0 	.word	0x2000caa0
 8012128:	08016b3c 	.word	0x08016b3c

0801212c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b08a      	sub	sp, #40	; 0x28
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012136:	2300      	movs	r3, #0
 8012138:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801213a:	2300      	movs	r3, #0
 801213c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801213e:	2300      	movs	r3, #0
 8012140:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012142:	2300      	movs	r3, #0
 8012144:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012146:	2300      	movs	r3, #0
 8012148:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801214a:	4b28      	ldr	r3, [pc, #160]	; (80121ec <ip_reass_remove_oldest_datagram+0xc0>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012150:	e030      	b.n	80121b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	695a      	ldr	r2, [r3, #20]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	68db      	ldr	r3, [r3, #12]
 801215a:	429a      	cmp	r2, r3
 801215c:	d10c      	bne.n	8012178 <ip_reass_remove_oldest_datagram+0x4c>
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	699a      	ldr	r2, [r3, #24]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	429a      	cmp	r2, r3
 8012168:	d106      	bne.n	8012178 <ip_reass_remove_oldest_datagram+0x4c>
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	899a      	ldrh	r2, [r3, #12]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	889b      	ldrh	r3, [r3, #4]
 8012172:	b29b      	uxth	r3, r3
 8012174:	429a      	cmp	r2, r3
 8012176:	d014      	beq.n	80121a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	3301      	adds	r3, #1
 801217c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d104      	bne.n	801218e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	61bb      	str	r3, [r7, #24]
 801218c:	e009      	b.n	80121a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012190:	7fda      	ldrb	r2, [r3, #31]
 8012192:	6a3b      	ldr	r3, [r7, #32]
 8012194:	7fdb      	ldrb	r3, [r3, #31]
 8012196:	429a      	cmp	r2, r3
 8012198:	d803      	bhi.n	80121a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80121a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d001      	beq.n	80121ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1cb      	bne.n	8012152 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d008      	beq.n	80121d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80121c0:	69b9      	ldr	r1, [r7, #24]
 80121c2:	6a38      	ldr	r0, [r7, #32]
 80121c4:	f7ff ff0e 	bl	8011fe4 <ip_reass_free_complete_datagram>
 80121c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	4413      	add	r3, r2
 80121d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	da02      	bge.n	80121e0 <ip_reass_remove_oldest_datagram+0xb4>
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	dcac      	bgt.n	801213a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80121e0:	697b      	ldr	r3, [r7, #20]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3728      	adds	r7, #40	; 0x28
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	2000ca9c 	.word	0x2000ca9c

080121f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80121fa:	2004      	movs	r0, #4
 80121fc:	f7f7 f990 	bl	8009520 <memp_malloc>
 8012200:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d110      	bne.n	801222a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012208:	6839      	ldr	r1, [r7, #0]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f7ff ff8e 	bl	801212c <ip_reass_remove_oldest_datagram>
 8012210:	4602      	mov	r2, r0
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	4293      	cmp	r3, r2
 8012216:	dc03      	bgt.n	8012220 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012218:	2004      	movs	r0, #4
 801221a:	f7f7 f981 	bl	8009520 <memp_malloc>
 801221e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012226:	2300      	movs	r3, #0
 8012228:	e016      	b.n	8012258 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801222a:	2220      	movs	r2, #32
 801222c:	2100      	movs	r1, #0
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f001 f811 	bl	8013256 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	220f      	movs	r2, #15
 8012238:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801223a:	4b09      	ldr	r3, [pc, #36]	; (8012260 <ip_reass_enqueue_new_datagram+0x70>)
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012242:	4a07      	ldr	r2, [pc, #28]	; (8012260 <ip_reass_enqueue_new_datagram+0x70>)
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	3308      	adds	r3, #8
 801224c:	2214      	movs	r2, #20
 801224e:	6879      	ldr	r1, [r7, #4]
 8012250:	4618      	mov	r0, r3
 8012252:	f000 fff2 	bl	801323a <memcpy>
  return ipr;
 8012256:	68fb      	ldr	r3, [r7, #12]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3710      	adds	r7, #16
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	2000ca9c 	.word	0x2000ca9c

08012264 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801226e:	4b10      	ldr	r3, [pc, #64]	; (80122b0 <ip_reass_dequeue_datagram+0x4c>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	429a      	cmp	r2, r3
 8012276:	d104      	bne.n	8012282 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4a0c      	ldr	r2, [pc, #48]	; (80122b0 <ip_reass_dequeue_datagram+0x4c>)
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	e00d      	b.n	801229e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <ip_reass_dequeue_datagram+0x32>
 8012288:	4b0a      	ldr	r3, [pc, #40]	; (80122b4 <ip_reass_dequeue_datagram+0x50>)
 801228a:	f240 1245 	movw	r2, #325	; 0x145
 801228e:	490a      	ldr	r1, [pc, #40]	; (80122b8 <ip_reass_dequeue_datagram+0x54>)
 8012290:	480a      	ldr	r0, [pc, #40]	; (80122bc <ip_reass_dequeue_datagram+0x58>)
 8012292:	f001 f87d 	bl	8013390 <iprintf>
    prev->next = ipr->next;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	2004      	movs	r0, #4
 80122a2:	f7f7 f9b3 	bl	800960c <memp_free>
}
 80122a6:	bf00      	nop
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	2000ca9c 	.word	0x2000ca9c
 80122b4:	08016a98 	.word	0x08016a98
 80122b8:	08016b60 	.word	0x08016b60
 80122bc:	08016ae0 	.word	0x08016ae0

080122c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b08c      	sub	sp, #48	; 0x30
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80122cc:	2300      	movs	r3, #0
 80122ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80122d0:	2301      	movs	r3, #1
 80122d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	885b      	ldrh	r3, [r3, #2]
 80122de:	b29b      	uxth	r3, r3
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7f6 fc45 	bl	8008b70 <lwip_htons>
 80122e6:	4603      	mov	r3, r0
 80122e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	f003 030f 	and.w	r3, r3, #15
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80122f8:	7e7b      	ldrb	r3, [r7, #25]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	8b7a      	ldrh	r2, [r7, #26]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d202      	bcs.n	8012308 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012302:	f04f 33ff 	mov.w	r3, #4294967295
 8012306:	e135      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012308:	7e7b      	ldrb	r3, [r7, #25]
 801230a:	b29b      	uxth	r3, r3
 801230c:	8b7a      	ldrh	r2, [r7, #26]
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	88db      	ldrh	r3, [r3, #6]
 8012316:	b29b      	uxth	r3, r3
 8012318:	4618      	mov	r0, r3
 801231a:	f7f6 fc29 	bl	8008b70 <lwip_htons>
 801231e:	4603      	mov	r3, r0
 8012320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012324:	b29b      	uxth	r3, r3
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	2200      	movs	r2, #0
 8012334:	701a      	strb	r2, [r3, #0]
 8012336:	2200      	movs	r2, #0
 8012338:	705a      	strb	r2, [r3, #1]
 801233a:	2200      	movs	r2, #0
 801233c:	709a      	strb	r2, [r3, #2]
 801233e:	2200      	movs	r2, #0
 8012340:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012344:	8afa      	ldrh	r2, [r7, #22]
 8012346:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012348:	8afa      	ldrh	r2, [r7, #22]
 801234a:	8b7b      	ldrh	r3, [r7, #26]
 801234c:	4413      	add	r3, r2
 801234e:	b29a      	uxth	r2, r3
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012356:	88db      	ldrh	r3, [r3, #6]
 8012358:	b29b      	uxth	r3, r3
 801235a:	8afa      	ldrh	r2, [r7, #22]
 801235c:	429a      	cmp	r2, r3
 801235e:	d902      	bls.n	8012366 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012360:	f04f 33ff 	mov.w	r3, #4294967295
 8012364:	e106      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	627b      	str	r3, [r7, #36]	; 0x24
 801236c:	e068      	b.n	8012440 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	889b      	ldrh	r3, [r3, #4]
 8012378:	b29a      	uxth	r2, r3
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	889b      	ldrh	r3, [r3, #4]
 801237e:	b29b      	uxth	r3, r3
 8012380:	429a      	cmp	r2, r3
 8012382:	d235      	bcs.n	80123f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012388:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	2b00      	cmp	r3, #0
 801238e:	d020      	beq.n	80123d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012392:	889b      	ldrh	r3, [r3, #4]
 8012394:	b29a      	uxth	r2, r3
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	88db      	ldrh	r3, [r3, #6]
 801239a:	b29b      	uxth	r3, r3
 801239c:	429a      	cmp	r2, r3
 801239e:	d307      	bcc.n	80123b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	88db      	ldrh	r3, [r3, #6]
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	889b      	ldrh	r3, [r3, #4]
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d902      	bls.n	80123b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123b0:	f04f 33ff 	mov.w	r3, #4294967295
 80123b4:	e0de      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80123b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80123bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123be:	88db      	ldrh	r3, [r3, #6]
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c4:	889b      	ldrh	r3, [r3, #4]
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d03d      	beq.n	8012448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80123cc:	2300      	movs	r3, #0
 80123ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80123d0:	e03a      	b.n	8012448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	88db      	ldrh	r3, [r3, #6]
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	889b      	ldrh	r3, [r3, #4]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	429a      	cmp	r2, r3
 80123e0:	d902      	bls.n	80123e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123e2:	f04f 33ff 	mov.w	r3, #4294967295
 80123e6:	e0c5      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	605a      	str	r2, [r3, #4]
      break;
 80123ee:	e02b      	b.n	8012448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80123f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f2:	889b      	ldrh	r3, [r3, #4]
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	889b      	ldrh	r3, [r3, #4]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d102      	bne.n	8012406 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012400:	f04f 33ff 	mov.w	r3, #4294967295
 8012404:	e0b6      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	889b      	ldrh	r3, [r3, #4]
 801240a:	b29a      	uxth	r2, r3
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	88db      	ldrh	r3, [r3, #6]
 8012410:	b29b      	uxth	r3, r3
 8012412:	429a      	cmp	r2, r3
 8012414:	d202      	bcs.n	801241c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012416:	f04f 33ff 	mov.w	r3, #4294967295
 801241a:	e0ab      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	2b00      	cmp	r3, #0
 8012420:	d009      	beq.n	8012436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012424:	88db      	ldrh	r3, [r3, #6]
 8012426:	b29a      	uxth	r2, r3
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	889b      	ldrh	r3, [r3, #4]
 801242c:	b29b      	uxth	r3, r3
 801242e:	429a      	cmp	r2, r3
 8012430:	d001      	beq.n	8012436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012432:	2300      	movs	r3, #0
 8012434:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	2b00      	cmp	r3, #0
 8012444:	d193      	bne.n	801236e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012446:	e000      	b.n	801244a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012448:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	2b00      	cmp	r3, #0
 801244e:	d12d      	bne.n	80124ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012452:	2b00      	cmp	r3, #0
 8012454:	d01c      	beq.n	8012490 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012458:	88db      	ldrh	r3, [r3, #6]
 801245a:	b29a      	uxth	r2, r3
 801245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245e:	889b      	ldrh	r3, [r3, #4]
 8012460:	b29b      	uxth	r3, r3
 8012462:	429a      	cmp	r2, r3
 8012464:	d906      	bls.n	8012474 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012466:	4b45      	ldr	r3, [pc, #276]	; (801257c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012468:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801246c:	4944      	ldr	r1, [pc, #272]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801246e:	4845      	ldr	r0, [pc, #276]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012470:	f000 ff8e 	bl	8013390 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247c:	88db      	ldrh	r3, [r3, #6]
 801247e:	b29a      	uxth	r2, r3
 8012480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012482:	889b      	ldrh	r3, [r3, #4]
 8012484:	b29b      	uxth	r3, r3
 8012486:	429a      	cmp	r2, r3
 8012488:	d010      	beq.n	80124ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	623b      	str	r3, [r7, #32]
 801248e:	e00d      	b.n	80124ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d006      	beq.n	80124a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012498:	4b38      	ldr	r3, [pc, #224]	; (801257c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801249a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801249e:	493a      	ldr	r1, [pc, #232]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80124a0:	4838      	ldr	r0, [pc, #224]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124a2:	f000 ff75 	bl	8013390 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	68ba      	ldr	r2, [r7, #8]
 80124aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d105      	bne.n	80124be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	7f9b      	ldrb	r3, [r3, #30]
 80124b6:	f003 0301 	and.w	r3, r3, #1
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d059      	beq.n	8012572 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80124be:	6a3b      	ldr	r3, [r7, #32]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d04f      	beq.n	8012564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d006      	beq.n	80124da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	889b      	ldrh	r3, [r3, #4]
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d002      	beq.n	80124e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	623b      	str	r3, [r7, #32]
 80124de:	e041      	b.n	8012564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80124e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80124e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80124ea:	e012      	b.n	8012512 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	88db      	ldrh	r3, [r3, #6]
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fa:	889b      	ldrh	r3, [r3, #4]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	429a      	cmp	r2, r3
 8012500:	d002      	beq.n	8012508 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012502:	2300      	movs	r3, #0
 8012504:	623b      	str	r3, [r7, #32]
            break;
 8012506:	e007      	b.n	8012518 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1e9      	bne.n	80124ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d022      	beq.n	8012564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d106      	bne.n	8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012526:	4b15      	ldr	r3, [pc, #84]	; (801257c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012528:	f240 12df 	movw	r2, #479	; 0x1df
 801252c:	4917      	ldr	r1, [pc, #92]	; (801258c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801252e:	4815      	ldr	r0, [pc, #84]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012530:	f000 ff2e 	bl	8013390 <iprintf>
          LWIP_ASSERT("sanity check",
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801253c:	429a      	cmp	r2, r3
 801253e:	d106      	bne.n	801254e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012540:	4b0e      	ldr	r3, [pc, #56]	; (801257c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012542:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012546:	4911      	ldr	r1, [pc, #68]	; (801258c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012548:	480e      	ldr	r0, [pc, #56]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801254a:	f000 ff21 	bl	8013390 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d006      	beq.n	8012564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012556:	4b09      	ldr	r3, [pc, #36]	; (801257c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012558:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801255c:	490c      	ldr	r1, [pc, #48]	; (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801255e:	4809      	ldr	r0, [pc, #36]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012560:	f000 ff16 	bl	8013390 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	2b00      	cmp	r3, #0
 8012568:	bf14      	ite	ne
 801256a:	2301      	movne	r3, #1
 801256c:	2300      	moveq	r3, #0
 801256e:	b2db      	uxtb	r3, r3
 8012570:	e000      	b.n	8012574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3730      	adds	r7, #48	; 0x30
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	08016a98 	.word	0x08016a98
 8012580:	08016b7c 	.word	0x08016b7c
 8012584:	08016ae0 	.word	0x08016ae0
 8012588:	08016b9c 	.word	0x08016b9c
 801258c:	08016bd4 	.word	0x08016bd4
 8012590:	08016be4 	.word	0x08016be4

08012594 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08e      	sub	sp, #56	; 0x38
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	f003 030f 	and.w	r3, r3, #15
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	2b14      	cmp	r3, #20
 80125b2:	f040 8171 	bne.w	8012898 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80125b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125b8:	88db      	ldrh	r3, [r3, #6]
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f6 fad7 	bl	8008b70 <lwip_htons>
 80125c2:	4603      	mov	r3, r0
 80125c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	00db      	lsls	r3, r3, #3
 80125cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	885b      	ldrh	r3, [r3, #2]
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7f6 facb 	bl	8008b70 <lwip_htons>
 80125da:	4603      	mov	r3, r0
 80125dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80125de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	f003 030f 	and.w	r3, r3, #15
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80125ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125f6:	429a      	cmp	r2, r3
 80125f8:	f0c0 8150 	bcc.w	801289c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80125fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012600:	b29b      	uxth	r3, r3
 8012602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7f7 ff31 	bl	800a470 <pbuf_clen>
 801260e:	4603      	mov	r3, r0
 8012610:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012612:	4b8c      	ldr	r3, [pc, #560]	; (8012844 <ip4_reass+0x2b0>)
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	461a      	mov	r2, r3
 8012618:	8c3b      	ldrh	r3, [r7, #32]
 801261a:	4413      	add	r3, r2
 801261c:	2b0a      	cmp	r3, #10
 801261e:	dd10      	ble.n	8012642 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012620:	8c3b      	ldrh	r3, [r7, #32]
 8012622:	4619      	mov	r1, r3
 8012624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012626:	f7ff fd81 	bl	801212c <ip_reass_remove_oldest_datagram>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 8137 	beq.w	80128a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012632:	4b84      	ldr	r3, [pc, #528]	; (8012844 <ip4_reass+0x2b0>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	461a      	mov	r2, r3
 8012638:	8c3b      	ldrh	r3, [r7, #32]
 801263a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801263c:	2b0a      	cmp	r3, #10
 801263e:	f300 812f 	bgt.w	80128a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012642:	4b81      	ldr	r3, [pc, #516]	; (8012848 <ip4_reass+0x2b4>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	633b      	str	r3, [r7, #48]	; 0x30
 8012648:	e015      	b.n	8012676 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	695a      	ldr	r2, [r3, #20]
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	429a      	cmp	r2, r3
 8012654:	d10c      	bne.n	8012670 <ip4_reass+0xdc>
 8012656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012658:	699a      	ldr	r2, [r3, #24]
 801265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265c:	691b      	ldr	r3, [r3, #16]
 801265e:	429a      	cmp	r2, r3
 8012660:	d106      	bne.n	8012670 <ip4_reass+0xdc>
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012664:	899a      	ldrh	r2, [r3, #12]
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	889b      	ldrh	r3, [r3, #4]
 801266a:	b29b      	uxth	r3, r3
 801266c:	429a      	cmp	r2, r3
 801266e:	d006      	beq.n	801267e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	633b      	str	r3, [r7, #48]	; 0x30
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	2b00      	cmp	r3, #0
 801267a:	d1e6      	bne.n	801264a <ip4_reass+0xb6>
 801267c:	e000      	b.n	8012680 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801267e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	2b00      	cmp	r3, #0
 8012684:	d109      	bne.n	801269a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012686:	8c3b      	ldrh	r3, [r7, #32]
 8012688:	4619      	mov	r1, r3
 801268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801268c:	f7ff fdb0 	bl	80121f0 <ip_reass_enqueue_new_datagram>
 8012690:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	2b00      	cmp	r3, #0
 8012696:	d11c      	bne.n	80126d2 <ip4_reass+0x13e>
      goto nullreturn;
 8012698:	e105      	b.n	80128a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269c:	88db      	ldrh	r3, [r3, #6]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f6 fa65 	bl	8008b70 <lwip_htons>
 80126a6:	4603      	mov	r3, r0
 80126a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d110      	bne.n	80126d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80126b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b2:	89db      	ldrh	r3, [r3, #14]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7f6 fa5b 	bl	8008b70 <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d006      	beq.n	80126d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80126c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c6:	3308      	adds	r3, #8
 80126c8:	2214      	movs	r2, #20
 80126ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126cc:	4618      	mov	r0, r3
 80126ce:	f000 fdb4 	bl	801323a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	88db      	ldrh	r3, [r3, #6]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	f003 0320 	and.w	r3, r3, #32
 80126dc:	2b00      	cmp	r3, #0
 80126de:	bf0c      	ite	eq
 80126e0:	2301      	moveq	r3, #1
 80126e2:	2300      	movne	r3, #0
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00e      	beq.n	801270c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80126ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126f2:	4413      	add	r3, r2
 80126f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80126f6:	8b7a      	ldrh	r2, [r7, #26]
 80126f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f0c0 80a0 	bcc.w	8012840 <ip4_reass+0x2ac>
 8012700:	8b7b      	ldrh	r3, [r7, #26]
 8012702:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012706:	4293      	cmp	r3, r2
 8012708:	f200 809a 	bhi.w	8012840 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801270c:	69fa      	ldr	r2, [r7, #28]
 801270e:	6879      	ldr	r1, [r7, #4]
 8012710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012712:	f7ff fdd5 	bl	80122c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012716:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801271e:	f000 809b 	beq.w	8012858 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012722:	4b48      	ldr	r3, [pc, #288]	; (8012844 <ip4_reass+0x2b0>)
 8012724:	881a      	ldrh	r2, [r3, #0]
 8012726:	8c3b      	ldrh	r3, [r7, #32]
 8012728:	4413      	add	r3, r2
 801272a:	b29a      	uxth	r2, r3
 801272c:	4b45      	ldr	r3, [pc, #276]	; (8012844 <ip4_reass+0x2b0>)
 801272e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00d      	beq.n	8012752 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012736:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801273a:	4413      	add	r3, r2
 801273c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012740:	8a7a      	ldrh	r2, [r7, #18]
 8012742:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	7f9b      	ldrb	r3, [r3, #30]
 8012748:	f043 0301 	orr.w	r3, r3, #1
 801274c:	b2da      	uxtb	r2, r3
 801274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012750:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d171      	bne.n	801283c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275a:	8b9b      	ldrh	r3, [r3, #28]
 801275c:	3314      	adds	r3, #20
 801275e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012774:	3308      	adds	r3, #8
 8012776:	2214      	movs	r2, #20
 8012778:	4619      	mov	r1, r3
 801277a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801277c:	f000 fd5d 	bl	801323a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012780:	8a3b      	ldrh	r3, [r7, #16]
 8012782:	4618      	mov	r0, r3
 8012784:	f7f6 f9f4 	bl	8008b70 <lwip_htons>
 8012788:	4603      	mov	r3, r0
 801278a:	461a      	mov	r2, r3
 801278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012792:	2200      	movs	r2, #0
 8012794:	719a      	strb	r2, [r3, #6]
 8012796:	2200      	movs	r2, #0
 8012798:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	2200      	movs	r2, #0
 801279e:	729a      	strb	r2, [r3, #10]
 80127a0:	2200      	movs	r2, #0
 80127a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80127aa:	e00d      	b.n	80127c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80127ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80127b2:	2114      	movs	r1, #20
 80127b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80127b6:	f7f7 fd47 	bl	800a248 <pbuf_remove_header>
      pbuf_cat(p, r);
 80127ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7f7 fe97 	bl	800a4f0 <pbuf_cat>
      r = iprh->next_pbuf;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80127c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1ee      	bne.n	80127ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80127ce:	4b1e      	ldr	r3, [pc, #120]	; (8012848 <ip4_reass+0x2b4>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d102      	bne.n	80127de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80127d8:	2300      	movs	r3, #0
 80127da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127dc:	e010      	b.n	8012800 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127de:	4b1a      	ldr	r3, [pc, #104]	; (8012848 <ip4_reass+0x2b4>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127e4:	e007      	b.n	80127f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80127e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d006      	beq.n	80127fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1f4      	bne.n	80127e6 <ip4_reass+0x252>
 80127fc:	e000      	b.n	8012800 <ip4_reass+0x26c>
          break;
 80127fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012804:	f7ff fd2e 	bl	8012264 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7f7 fe31 	bl	800a470 <pbuf_clen>
 801280e:	4603      	mov	r3, r0
 8012810:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012812:	4b0c      	ldr	r3, [pc, #48]	; (8012844 <ip4_reass+0x2b0>)
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	8c3a      	ldrh	r2, [r7, #32]
 8012818:	429a      	cmp	r2, r3
 801281a:	d906      	bls.n	801282a <ip4_reass+0x296>
 801281c:	4b0b      	ldr	r3, [pc, #44]	; (801284c <ip4_reass+0x2b8>)
 801281e:	f240 229b 	movw	r2, #667	; 0x29b
 8012822:	490b      	ldr	r1, [pc, #44]	; (8012850 <ip4_reass+0x2bc>)
 8012824:	480b      	ldr	r0, [pc, #44]	; (8012854 <ip4_reass+0x2c0>)
 8012826:	f000 fdb3 	bl	8013390 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801282a:	4b06      	ldr	r3, [pc, #24]	; (8012844 <ip4_reass+0x2b0>)
 801282c:	881a      	ldrh	r2, [r3, #0]
 801282e:	8c3b      	ldrh	r3, [r7, #32]
 8012830:	1ad3      	subs	r3, r2, r3
 8012832:	b29a      	uxth	r2, r3
 8012834:	4b03      	ldr	r3, [pc, #12]	; (8012844 <ip4_reass+0x2b0>)
 8012836:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	e038      	b.n	80128ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801283c:	2300      	movs	r3, #0
 801283e:	e036      	b.n	80128ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012840:	bf00      	nop
 8012842:	e00a      	b.n	801285a <ip4_reass+0x2c6>
 8012844:	2000caa0 	.word	0x2000caa0
 8012848:	2000ca9c 	.word	0x2000ca9c
 801284c:	08016a98 	.word	0x08016a98
 8012850:	08016c08 	.word	0x08016c08
 8012854:	08016ae0 	.word	0x08016ae0
    goto nullreturn_ipr;
 8012858:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	2b00      	cmp	r3, #0
 801285e:	d106      	bne.n	801286e <ip4_reass+0x2da>
 8012860:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <ip4_reass+0x324>)
 8012862:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012866:	4915      	ldr	r1, [pc, #84]	; (80128bc <ip4_reass+0x328>)
 8012868:	4815      	ldr	r0, [pc, #84]	; (80128c0 <ip4_reass+0x32c>)
 801286a:	f000 fd91 	bl	8013390 <iprintf>
  if (ipr->p == NULL) {
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d116      	bne.n	80128a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012876:	4b13      	ldr	r3, [pc, #76]	; (80128c4 <ip4_reass+0x330>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801287c:	429a      	cmp	r2, r3
 801287e:	d006      	beq.n	801288e <ip4_reass+0x2fa>
 8012880:	4b0d      	ldr	r3, [pc, #52]	; (80128b8 <ip4_reass+0x324>)
 8012882:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012886:	4910      	ldr	r1, [pc, #64]	; (80128c8 <ip4_reass+0x334>)
 8012888:	480d      	ldr	r0, [pc, #52]	; (80128c0 <ip4_reass+0x32c>)
 801288a:	f000 fd81 	bl	8013390 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801288e:	2100      	movs	r1, #0
 8012890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012892:	f7ff fce7 	bl	8012264 <ip_reass_dequeue_datagram>
 8012896:	e006      	b.n	80128a6 <ip4_reass+0x312>
    goto nullreturn;
 8012898:	bf00      	nop
 801289a:	e004      	b.n	80128a6 <ip4_reass+0x312>
    goto nullreturn;
 801289c:	bf00      	nop
 801289e:	e002      	b.n	80128a6 <ip4_reass+0x312>
      goto nullreturn;
 80128a0:	bf00      	nop
 80128a2:	e000      	b.n	80128a6 <ip4_reass+0x312>
  }

nullreturn:
 80128a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f7f7 fd54 	bl	800a354 <pbuf_free>
  return NULL;
 80128ac:	2300      	movs	r3, #0
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3738      	adds	r7, #56	; 0x38
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	08016a98 	.word	0x08016a98
 80128bc:	08016c24 	.word	0x08016c24
 80128c0:	08016ae0 	.word	0x08016ae0
 80128c4:	2000ca9c 	.word	0x2000ca9c
 80128c8:	08016c30 	.word	0x08016c30

080128cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80128d0:	2005      	movs	r0, #5
 80128d2:	f7f6 fe25 	bl	8009520 <memp_malloc>
 80128d6:	4603      	mov	r3, r0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	bd80      	pop	{r7, pc}

080128dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d106      	bne.n	80128f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80128ea:	4b07      	ldr	r3, [pc, #28]	; (8012908 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80128f0:	4906      	ldr	r1, [pc, #24]	; (801290c <ip_frag_free_pbuf_custom_ref+0x30>)
 80128f2:	4807      	ldr	r0, [pc, #28]	; (8012910 <ip_frag_free_pbuf_custom_ref+0x34>)
 80128f4:	f000 fd4c 	bl	8013390 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80128f8:	6879      	ldr	r1, [r7, #4]
 80128fa:	2005      	movs	r0, #5
 80128fc:	f7f6 fe86 	bl	800960c <memp_free>
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	08016a98 	.word	0x08016a98
 801290c:	08016c50 	.word	0x08016c50
 8012910:	08016ae0 	.word	0x08016ae0

08012914 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <ipfrag_free_pbuf_custom+0x20>
 8012926:	4b11      	ldr	r3, [pc, #68]	; (801296c <ipfrag_free_pbuf_custom+0x58>)
 8012928:	f240 22ce 	movw	r2, #718	; 0x2ce
 801292c:	4910      	ldr	r1, [pc, #64]	; (8012970 <ipfrag_free_pbuf_custom+0x5c>)
 801292e:	4811      	ldr	r0, [pc, #68]	; (8012974 <ipfrag_free_pbuf_custom+0x60>)
 8012930:	f000 fd2e 	bl	8013390 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012934:	68fa      	ldr	r2, [r7, #12]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	429a      	cmp	r2, r3
 801293a:	d006      	beq.n	801294a <ipfrag_free_pbuf_custom+0x36>
 801293c:	4b0b      	ldr	r3, [pc, #44]	; (801296c <ipfrag_free_pbuf_custom+0x58>)
 801293e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012942:	490d      	ldr	r1, [pc, #52]	; (8012978 <ipfrag_free_pbuf_custom+0x64>)
 8012944:	480b      	ldr	r0, [pc, #44]	; (8012974 <ipfrag_free_pbuf_custom+0x60>)
 8012946:	f000 fd23 	bl	8013390 <iprintf>
  if (pcr->original != NULL) {
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	695b      	ldr	r3, [r3, #20]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d004      	beq.n	801295c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	695b      	ldr	r3, [r3, #20]
 8012956:	4618      	mov	r0, r3
 8012958:	f7f7 fcfc 	bl	800a354 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801295c:	68f8      	ldr	r0, [r7, #12]
 801295e:	f7ff ffbd 	bl	80128dc <ip_frag_free_pbuf_custom_ref>
}
 8012962:	bf00      	nop
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	08016a98 	.word	0x08016a98
 8012970:	08016c5c 	.word	0x08016c5c
 8012974:	08016ae0 	.word	0x08016ae0
 8012978:	08016c68 	.word	0x08016c68

0801297c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b094      	sub	sp, #80	; 0x50
 8012980:	af02      	add	r7, sp, #8
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012988:	2300      	movs	r3, #0
 801298a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012992:	3b14      	subs	r3, #20
 8012994:	2b00      	cmp	r3, #0
 8012996:	da00      	bge.n	801299a <ip4_frag+0x1e>
 8012998:	3307      	adds	r3, #7
 801299a:	10db      	asrs	r3, r3, #3
 801299c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801299e:	2314      	movs	r3, #20
 80129a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80129a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80129ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	f003 030f 	and.w	r3, r3, #15
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	2b14      	cmp	r3, #20
 80129bc:	d002      	beq.n	80129c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80129be:	f06f 0305 	mvn.w	r3, #5
 80129c2:	e110      	b.n	8012be6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	895b      	ldrh	r3, [r3, #10]
 80129c8:	2b13      	cmp	r3, #19
 80129ca:	d809      	bhi.n	80129e0 <ip4_frag+0x64>
 80129cc:	4b88      	ldr	r3, [pc, #544]	; (8012bf0 <ip4_frag+0x274>)
 80129ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80129d2:	4988      	ldr	r1, [pc, #544]	; (8012bf4 <ip4_frag+0x278>)
 80129d4:	4888      	ldr	r0, [pc, #544]	; (8012bf8 <ip4_frag+0x27c>)
 80129d6:	f000 fcdb 	bl	8013390 <iprintf>
 80129da:	f06f 0305 	mvn.w	r3, #5
 80129de:	e102      	b.n	8012be6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80129e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e2:	88db      	ldrh	r3, [r3, #6]
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f6 f8c2 	bl	8008b70 <lwip_htons>
 80129ec:	4603      	mov	r3, r0
 80129ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80129f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80129fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	891b      	ldrh	r3, [r3, #8]
 8012a06:	3b14      	subs	r3, #20
 8012a08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012a0c:	e0e1      	b.n	8012bd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a10:	00db      	lsls	r3, r3, #3
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	bf28      	it	cs
 8012a1c:	4613      	movcs	r3, r2
 8012a1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012a20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a24:	2114      	movs	r1, #20
 8012a26:	200e      	movs	r0, #14
 8012a28:	f7f7 f9b0 	bl	8009d8c <pbuf_alloc>
 8012a2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 80d5 	beq.w	8012be0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	895b      	ldrh	r3, [r3, #10]
 8012a3a:	2b13      	cmp	r3, #19
 8012a3c:	d806      	bhi.n	8012a4c <ip4_frag+0xd0>
 8012a3e:	4b6c      	ldr	r3, [pc, #432]	; (8012bf0 <ip4_frag+0x274>)
 8012a40:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012a44:	496d      	ldr	r1, [pc, #436]	; (8012bfc <ip4_frag+0x280>)
 8012a46:	486c      	ldr	r0, [pc, #432]	; (8012bf8 <ip4_frag+0x27c>)
 8012a48:	f000 fca2 	bl	8013390 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	2214      	movs	r2, #20
 8012a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a54:	4618      	mov	r0, r3
 8012a56:	f000 fbf0 	bl	801323a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012a60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012a66:	e064      	b.n	8012b32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	895a      	ldrh	r2, [r3, #10]
 8012a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	895b      	ldrh	r3, [r3, #10]
 8012a76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d906      	bls.n	8012a8a <ip4_frag+0x10e>
 8012a7c:	4b5c      	ldr	r3, [pc, #368]	; (8012bf0 <ip4_frag+0x274>)
 8012a7e:	f240 322d 	movw	r2, #813	; 0x32d
 8012a82:	495f      	ldr	r1, [pc, #380]	; (8012c00 <ip4_frag+0x284>)
 8012a84:	485c      	ldr	r0, [pc, #368]	; (8012bf8 <ip4_frag+0x27c>)
 8012a86:	f000 fc83 	bl	8013390 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012a8a:	8bfa      	ldrh	r2, [r7, #30]
 8012a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012a90:	4293      	cmp	r3, r2
 8012a92:	bf28      	it	cs
 8012a94:	4613      	movcs	r3, r2
 8012a96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012a9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d105      	bne.n	8012aae <ip4_frag+0x132>
        poff = 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	60fb      	str	r3, [r7, #12]
        continue;
 8012aac:	e041      	b.n	8012b32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012aae:	f7ff ff0d 	bl	80128cc <ip_frag_alloc_pbuf_custom_ref>
 8012ab2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d103      	bne.n	8012ac2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012abc:	f7f7 fc4a 	bl	800a354 <pbuf_free>
        goto memerr;
 8012ac0:	e08f      	b.n	8012be2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ac2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012aca:	4413      	add	r3, r2
 8012acc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012ad0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012ad4:	9201      	str	r2, [sp, #4]
 8012ad6:	9300      	str	r3, [sp, #0]
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2241      	movs	r2, #65	; 0x41
 8012adc:	2000      	movs	r0, #0
 8012ade:	f7f7 fa7f 	bl	8009fe0 <pbuf_alloced_custom>
 8012ae2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012aea:	69b8      	ldr	r0, [r7, #24]
 8012aec:	f7ff fef6 	bl	80128dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012af2:	f7f7 fc2f 	bl	800a354 <pbuf_free>
        goto memerr;
 8012af6:	e074      	b.n	8012be2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012af8:	68f8      	ldr	r0, [r7, #12]
 8012afa:	f7f7 fcd1 	bl	800a4a0 <pbuf_ref>
      pcr->original = p;
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	4a3f      	ldr	r2, [pc, #252]	; (8012c04 <ip4_frag+0x288>)
 8012b08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012b0a:	6979      	ldr	r1, [r7, #20]
 8012b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b0e:	f7f7 fcef 	bl	800a4f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012b12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b1a:	1ad3      	subs	r3, r2, r3
 8012b1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012b20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d004      	beq.n	8012b32 <ip4_frag+0x1b6>
        poff = 0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012b32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d196      	bne.n	8012a68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012b3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b40:	4413      	add	r3, r2
 8012b42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b48:	f1a3 0213 	sub.w	r2, r3, #19
 8012b4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b50:	429a      	cmp	r2, r3
 8012b52:	bfcc      	ite	gt
 8012b54:	2301      	movgt	r3, #1
 8012b56:	2300      	movle	r3, #0
 8012b58:	b2db      	uxtb	r3, r3
 8012b5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012b66:	6a3b      	ldr	r3, [r7, #32]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <ip4_frag+0x1f6>
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d003      	beq.n	8012b7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012b72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012b7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f5 fff7 	bl	8008b70 <lwip_htons>
 8012b82:	4603      	mov	r3, r0
 8012b84:	461a      	mov	r2, r3
 8012b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012b8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b8c:	3314      	adds	r3, #20
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	4618      	mov	r0, r3
 8012b92:	f7f5 ffed 	bl	8008b70 <lwip_htons>
 8012b96:	4603      	mov	r3, r0
 8012b98:	461a      	mov	r2, r3
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	729a      	strb	r2, [r3, #10]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	695b      	ldr	r3, [r3, #20]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bb0:	68b8      	ldr	r0, [r7, #8]
 8012bb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bb6:	f7f7 fbcd 	bl	800a354 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012bba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012bc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bcc:	4413      	add	r3, r2
 8012bce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012bd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f47f af19 	bne.w	8012a0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	e002      	b.n	8012be6 <ip4_frag+0x26a>
      goto memerr;
 8012be0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3748      	adds	r7, #72	; 0x48
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	08016a98 	.word	0x08016a98
 8012bf4:	08016c74 	.word	0x08016c74
 8012bf8:	08016ae0 	.word	0x08016ae0
 8012bfc:	08016c90 	.word	0x08016c90
 8012c00:	08016cb0 	.word	0x08016cb0
 8012c04:	08012915 	.word	0x08012915

08012c08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b086      	sub	sp, #24
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012c12:	230e      	movs	r3, #14
 8012c14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	895b      	ldrh	r3, [r3, #10]
 8012c1a:	2b0e      	cmp	r3, #14
 8012c1c:	d96e      	bls.n	8012cfc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	7bdb      	ldrb	r3, [r3, #15]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d106      	bne.n	8012c34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	b2da      	uxtb	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	7b1a      	ldrb	r2, [r3, #12]
 8012c3e:	7b5b      	ldrb	r3, [r3, #13]
 8012c40:	021b      	lsls	r3, r3, #8
 8012c42:	4313      	orrs	r3, r2
 8012c44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	f003 0301 	and.w	r3, r3, #1
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d023      	beq.n	8012c9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d10f      	bne.n	8012c7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	785b      	ldrb	r3, [r3, #1]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d11b      	bne.n	8012c9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c66:	2b5e      	cmp	r3, #94	; 0x5e
 8012c68:	d117      	bne.n	8012c9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	7b5b      	ldrb	r3, [r3, #13]
 8012c6e:	f043 0310 	orr.w	r3, r3, #16
 8012c72:	b2da      	uxtb	r2, r3
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	735a      	strb	r2, [r3, #13]
 8012c78:	e00f      	b.n	8012c9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	2206      	movs	r2, #6
 8012c7e:	4928      	ldr	r1, [pc, #160]	; (8012d20 <ethernet_input+0x118>)
 8012c80:	4618      	mov	r0, r3
 8012c82:	f000 faca 	bl	801321a <memcmp>
 8012c86:	4603      	mov	r3, r0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d106      	bne.n	8012c9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	7b5b      	ldrb	r3, [r3, #13]
 8012c90:	f043 0308 	orr.w	r3, r3, #8
 8012c94:	b2da      	uxtb	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012c9a:	89fb      	ldrh	r3, [r7, #14]
 8012c9c:	2b08      	cmp	r3, #8
 8012c9e:	d003      	beq.n	8012ca8 <ethernet_input+0xa0>
 8012ca0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ca4:	d014      	beq.n	8012cd0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ca6:	e032      	b.n	8012d0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cae:	f003 0308 	and.w	r3, r3, #8
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d024      	beq.n	8012d00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cb6:	8afb      	ldrh	r3, [r7, #22]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7f7 fac4 	bl	800a248 <pbuf_remove_header>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d11e      	bne.n	8012d04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012cc6:	6839      	ldr	r1, [r7, #0]
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7fe ff21 	bl	8011b10 <ip4_input>
      break;
 8012cce:	e013      	b.n	8012cf8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cd6:	f003 0308 	and.w	r3, r3, #8
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d014      	beq.n	8012d08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cde:	8afb      	ldrh	r3, [r7, #22]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7f7 fab0 	bl	800a248 <pbuf_remove_header>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d10e      	bne.n	8012d0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8012cee:	6839      	ldr	r1, [r7, #0]
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7fe f8c1 	bl	8010e78 <etharp_input>
      break;
 8012cf6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	e00c      	b.n	8012d16 <ethernet_input+0x10e>
    goto free_and_return;
 8012cfc:	bf00      	nop
 8012cfe:	e006      	b.n	8012d0e <ethernet_input+0x106>
        goto free_and_return;
 8012d00:	bf00      	nop
 8012d02:	e004      	b.n	8012d0e <ethernet_input+0x106>
        goto free_and_return;
 8012d04:	bf00      	nop
 8012d06:	e002      	b.n	8012d0e <ethernet_input+0x106>
        goto free_and_return;
 8012d08:	bf00      	nop
 8012d0a:	e000      	b.n	8012d0e <ethernet_input+0x106>
        goto free_and_return;
 8012d0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7f7 fb20 	bl	800a354 <pbuf_free>
  return ERR_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3718      	adds	r7, #24
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	08016e94 	.word	0x08016e94

08012d24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012d32:	8c3b      	ldrh	r3, [r7, #32]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f5 ff1b 	bl	8008b70 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012d3e:	210e      	movs	r1, #14
 8012d40:	68b8      	ldr	r0, [r7, #8]
 8012d42:	f7f7 fa71 	bl	800a228 <pbuf_add_header>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d125      	bne.n	8012d98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	8afa      	ldrh	r2, [r7, #22]
 8012d56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	2206      	movs	r2, #6
 8012d5c:	6839      	ldr	r1, [r7, #0]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f000 fa6b 	bl	801323a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	3306      	adds	r3, #6
 8012d68:	2206      	movs	r2, #6
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f000 fa64 	bl	801323a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d78:	2b06      	cmp	r3, #6
 8012d7a:	d006      	beq.n	8012d8a <ethernet_output+0x66>
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <ethernet_output+0x84>)
 8012d7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012d82:	490a      	ldr	r1, [pc, #40]	; (8012dac <ethernet_output+0x88>)
 8012d84:	480a      	ldr	r0, [pc, #40]	; (8012db0 <ethernet_output+0x8c>)
 8012d86:	f000 fb03 	bl	8013390 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	699b      	ldr	r3, [r3, #24]
 8012d8e:	68b9      	ldr	r1, [r7, #8]
 8012d90:	68f8      	ldr	r0, [r7, #12]
 8012d92:	4798      	blx	r3
 8012d94:	4603      	mov	r3, r0
 8012d96:	e002      	b.n	8012d9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012d98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012d9a:	f06f 0301 	mvn.w	r3, #1
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	08016cc0 	.word	0x08016cc0
 8012dac:	08016cf8 	.word	0x08016cf8
 8012db0:	08016d2c 	.word	0x08016d2c

08012db4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	60bb      	str	r3, [r7, #8]
 8012dc2:	2304      	movs	r3, #4
 8012dc4:	60fb      	str	r3, [r7, #12]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	613b      	str	r3, [r7, #16]
 8012dca:	2300      	movs	r3, #0
 8012dcc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012dce:	f107 0308 	add.w	r3, r7, #8
 8012dd2:	2100      	movs	r1, #0
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7f2 ffeb 	bl	8005db0 <osMessageCreate>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d102      	bne.n	8012dee <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012de8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dec:	e000      	b.n	8012df0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6839      	ldr	r1, [r7, #0]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7f2 fff8 	bl	8005e00 <osMessagePut>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d102      	bne.n	8012e1c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012e16:	2300      	movs	r3, #0
 8012e18:	73fb      	strb	r3, [r7, #15]
 8012e1a:	e001      	b.n	8012e20 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012e1c:	23ff      	movs	r3, #255	; 0xff
 8012e1e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3710      	adds	r7, #16
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b08c      	sub	sp, #48	; 0x30
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	61f8      	str	r0, [r7, #28]
 8012e34:	61b9      	str	r1, [r7, #24]
 8012e36:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012e38:	f7f2 fe2a 	bl	8005a90 <osKernelSysTick>
 8012e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d017      	beq.n	8012e74 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	6819      	ldr	r1, [r3, #0]
 8012e48:	f107 0320 	add.w	r3, r7, #32
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f3 f816 	bl	8005e80 <osMessageGet>

    if(event.status == osEventMessage)
 8012e54:	6a3b      	ldr	r3, [r7, #32]
 8012e56:	2b10      	cmp	r3, #16
 8012e58:	d109      	bne.n	8012e6e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012e62:	f7f2 fe15 	bl	8005a90 <osKernelSysTick>
 8012e66:	4602      	mov	r2, r0
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	e019      	b.n	8012ea2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e72:	e016      	b.n	8012ea2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	6819      	ldr	r1, [r3, #0]
 8012e78:	463b      	mov	r3, r7
 8012e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7f2 fffe 	bl	8005e80 <osMessageGet>
 8012e84:	f107 0320 	add.w	r3, r7, #32
 8012e88:	463a      	mov	r2, r7
 8012e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e92:	461a      	mov	r2, r3
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012e98:	f7f2 fdfa 	bl	8005a90 <osKernelSysTick>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3730      	adds	r7, #48	; 0x30
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012eaa:	b480      	push	{r7}
 8012eac:	b083      	sub	sp, #12
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <sys_mbox_valid+0x14>
    return 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	e000      	b.n	8012ec0 <sys_mbox_valid+0x16>
  else
    return 1;
 8012ebe:	2301      	movs	r3, #1
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	370c      	adds	r7, #12
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr

08012ecc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012ed0:	4803      	ldr	r0, [pc, #12]	; (8012ee0 <sys_init+0x14>)
 8012ed2:	f7f2 fe4d 	bl	8005b70 <osMutexCreate>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	4a02      	ldr	r2, [pc, #8]	; (8012ee4 <sys_init+0x18>)
 8012eda:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012edc:	bf00      	nop
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	08016ea4 	.word	0x08016ea4
 8012ee4:	2000caa4 	.word	0x2000caa4

08012ee8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60bb      	str	r3, [r7, #8]
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012ef8:	f107 0308 	add.w	r3, r7, #8
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f2 fe37 	bl	8005b70 <osMutexCreate>
 8012f02:	4602      	mov	r2, r0
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012f10:	f04f 33ff 	mov.w	r3, #4294967295
 8012f14:	e000      	b.n	8012f18 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012f16:	2300      	movs	r3, #0
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3710      	adds	r7, #16
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f2 fe35 	bl	8005ba0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012f36:	bf00      	nop
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b082      	sub	sp, #8
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f2 fe76 	bl	8005c3c <osMutexRelease>
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b08c      	sub	sp, #48	; 0x30
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012f66:	f107 0314 	add.w	r3, r7, #20
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	605a      	str	r2, [r3, #4]
 8012f70:	609a      	str	r2, [r3, #8]
 8012f72:	60da      	str	r2, [r3, #12]
 8012f74:	611a      	str	r2, [r3, #16]
 8012f76:	615a      	str	r2, [r3, #20]
 8012f78:	619a      	str	r2, [r3, #24]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	61bb      	str	r3, [r7, #24]
 8012f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	83bb      	strh	r3, [r7, #28]
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012f8c:	f107 0314 	add.w	r3, r7, #20
 8012f90:	6879      	ldr	r1, [r7, #4]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7f2 fd8c 	bl	8005ab0 <osThreadCreate>
 8012f98:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3730      	adds	r7, #48	; 0x30
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
	...

08012fa4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012fa8:	4b04      	ldr	r3, [pc, #16]	; (8012fbc <sys_arch_protect+0x18>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f04f 31ff 	mov.w	r1, #4294967295
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7f2 fdf5 	bl	8005ba0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012fb6:	2301      	movs	r3, #1
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	2000caa4 	.word	0x2000caa4

08012fc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012fc8:	4b04      	ldr	r3, [pc, #16]	; (8012fdc <sys_arch_unprotect+0x1c>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f2 fe35 	bl	8005c3c <osMutexRelease>
}
 8012fd2:	bf00      	nop
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	2000caa4 	.word	0x2000caa4

08012fe0 <std>:
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	b510      	push	{r4, lr}
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8012fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fee:	6083      	str	r3, [r0, #8]
 8012ff0:	8181      	strh	r1, [r0, #12]
 8012ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ff4:	81c2      	strh	r2, [r0, #14]
 8012ff6:	6183      	str	r3, [r0, #24]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	2208      	movs	r2, #8
 8012ffc:	305c      	adds	r0, #92	; 0x5c
 8012ffe:	f000 f92a 	bl	8013256 <memset>
 8013002:	4b05      	ldr	r3, [pc, #20]	; (8013018 <std+0x38>)
 8013004:	6263      	str	r3, [r4, #36]	; 0x24
 8013006:	4b05      	ldr	r3, [pc, #20]	; (801301c <std+0x3c>)
 8013008:	62a3      	str	r3, [r4, #40]	; 0x28
 801300a:	4b05      	ldr	r3, [pc, #20]	; (8013020 <std+0x40>)
 801300c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801300e:	4b05      	ldr	r3, [pc, #20]	; (8013024 <std+0x44>)
 8013010:	6224      	str	r4, [r4, #32]
 8013012:	6323      	str	r3, [r4, #48]	; 0x30
 8013014:	bd10      	pop	{r4, pc}
 8013016:	bf00      	nop
 8013018:	08013531 	.word	0x08013531
 801301c:	08013553 	.word	0x08013553
 8013020:	0801358b 	.word	0x0801358b
 8013024:	080135af 	.word	0x080135af

08013028 <_cleanup_r>:
 8013028:	4901      	ldr	r1, [pc, #4]	; (8013030 <_cleanup_r+0x8>)
 801302a:	f000 b8af 	b.w	801318c <_fwalk_reent>
 801302e:	bf00      	nop
 8013030:	08013745 	.word	0x08013745

08013034 <__sfmoreglue>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	2268      	movs	r2, #104	; 0x68
 8013038:	1e4d      	subs	r5, r1, #1
 801303a:	4355      	muls	r5, r2
 801303c:	460e      	mov	r6, r1
 801303e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013042:	f000 f931 	bl	80132a8 <_malloc_r>
 8013046:	4604      	mov	r4, r0
 8013048:	b140      	cbz	r0, 801305c <__sfmoreglue+0x28>
 801304a:	2100      	movs	r1, #0
 801304c:	e9c0 1600 	strd	r1, r6, [r0]
 8013050:	300c      	adds	r0, #12
 8013052:	60a0      	str	r0, [r4, #8]
 8013054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013058:	f000 f8fd 	bl	8013256 <memset>
 801305c:	4620      	mov	r0, r4
 801305e:	bd70      	pop	{r4, r5, r6, pc}

08013060 <__sfp_lock_acquire>:
 8013060:	4801      	ldr	r0, [pc, #4]	; (8013068 <__sfp_lock_acquire+0x8>)
 8013062:	f000 b8d8 	b.w	8013216 <__retarget_lock_acquire_recursive>
 8013066:	bf00      	nop
 8013068:	2000caa9 	.word	0x2000caa9

0801306c <__sfp_lock_release>:
 801306c:	4801      	ldr	r0, [pc, #4]	; (8013074 <__sfp_lock_release+0x8>)
 801306e:	f000 b8d3 	b.w	8013218 <__retarget_lock_release_recursive>
 8013072:	bf00      	nop
 8013074:	2000caa9 	.word	0x2000caa9

08013078 <__sinit_lock_acquire>:
 8013078:	4801      	ldr	r0, [pc, #4]	; (8013080 <__sinit_lock_acquire+0x8>)
 801307a:	f000 b8cc 	b.w	8013216 <__retarget_lock_acquire_recursive>
 801307e:	bf00      	nop
 8013080:	2000caaa 	.word	0x2000caaa

08013084 <__sinit_lock_release>:
 8013084:	4801      	ldr	r0, [pc, #4]	; (801308c <__sinit_lock_release+0x8>)
 8013086:	f000 b8c7 	b.w	8013218 <__retarget_lock_release_recursive>
 801308a:	bf00      	nop
 801308c:	2000caaa 	.word	0x2000caaa

08013090 <__sinit>:
 8013090:	b510      	push	{r4, lr}
 8013092:	4604      	mov	r4, r0
 8013094:	f7ff fff0 	bl	8013078 <__sinit_lock_acquire>
 8013098:	69a3      	ldr	r3, [r4, #24]
 801309a:	b11b      	cbz	r3, 80130a4 <__sinit+0x14>
 801309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130a0:	f7ff bff0 	b.w	8013084 <__sinit_lock_release>
 80130a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80130a8:	6523      	str	r3, [r4, #80]	; 0x50
 80130aa:	4b13      	ldr	r3, [pc, #76]	; (80130f8 <__sinit+0x68>)
 80130ac:	4a13      	ldr	r2, [pc, #76]	; (80130fc <__sinit+0x6c>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80130b2:	42a3      	cmp	r3, r4
 80130b4:	bf04      	itt	eq
 80130b6:	2301      	moveq	r3, #1
 80130b8:	61a3      	streq	r3, [r4, #24]
 80130ba:	4620      	mov	r0, r4
 80130bc:	f000 f820 	bl	8013100 <__sfp>
 80130c0:	6060      	str	r0, [r4, #4]
 80130c2:	4620      	mov	r0, r4
 80130c4:	f000 f81c 	bl	8013100 <__sfp>
 80130c8:	60a0      	str	r0, [r4, #8]
 80130ca:	4620      	mov	r0, r4
 80130cc:	f000 f818 	bl	8013100 <__sfp>
 80130d0:	2200      	movs	r2, #0
 80130d2:	60e0      	str	r0, [r4, #12]
 80130d4:	2104      	movs	r1, #4
 80130d6:	6860      	ldr	r0, [r4, #4]
 80130d8:	f7ff ff82 	bl	8012fe0 <std>
 80130dc:	68a0      	ldr	r0, [r4, #8]
 80130de:	2201      	movs	r2, #1
 80130e0:	2109      	movs	r1, #9
 80130e2:	f7ff ff7d 	bl	8012fe0 <std>
 80130e6:	68e0      	ldr	r0, [r4, #12]
 80130e8:	2202      	movs	r2, #2
 80130ea:	2112      	movs	r1, #18
 80130ec:	f7ff ff78 	bl	8012fe0 <std>
 80130f0:	2301      	movs	r3, #1
 80130f2:	61a3      	str	r3, [r4, #24]
 80130f4:	e7d2      	b.n	801309c <__sinit+0xc>
 80130f6:	bf00      	nop
 80130f8:	08016f0c 	.word	0x08016f0c
 80130fc:	08013029 	.word	0x08013029

08013100 <__sfp>:
 8013100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013102:	4607      	mov	r7, r0
 8013104:	f7ff ffac 	bl	8013060 <__sfp_lock_acquire>
 8013108:	4b1e      	ldr	r3, [pc, #120]	; (8013184 <__sfp+0x84>)
 801310a:	681e      	ldr	r6, [r3, #0]
 801310c:	69b3      	ldr	r3, [r6, #24]
 801310e:	b913      	cbnz	r3, 8013116 <__sfp+0x16>
 8013110:	4630      	mov	r0, r6
 8013112:	f7ff ffbd 	bl	8013090 <__sinit>
 8013116:	3648      	adds	r6, #72	; 0x48
 8013118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801311c:	3b01      	subs	r3, #1
 801311e:	d503      	bpl.n	8013128 <__sfp+0x28>
 8013120:	6833      	ldr	r3, [r6, #0]
 8013122:	b30b      	cbz	r3, 8013168 <__sfp+0x68>
 8013124:	6836      	ldr	r6, [r6, #0]
 8013126:	e7f7      	b.n	8013118 <__sfp+0x18>
 8013128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801312c:	b9d5      	cbnz	r5, 8013164 <__sfp+0x64>
 801312e:	4b16      	ldr	r3, [pc, #88]	; (8013188 <__sfp+0x88>)
 8013130:	60e3      	str	r3, [r4, #12]
 8013132:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013136:	6665      	str	r5, [r4, #100]	; 0x64
 8013138:	f000 f86c 	bl	8013214 <__retarget_lock_init_recursive>
 801313c:	f7ff ff96 	bl	801306c <__sfp_lock_release>
 8013140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013148:	6025      	str	r5, [r4, #0]
 801314a:	61a5      	str	r5, [r4, #24]
 801314c:	2208      	movs	r2, #8
 801314e:	4629      	mov	r1, r5
 8013150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013154:	f000 f87f 	bl	8013256 <memset>
 8013158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801315c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013160:	4620      	mov	r0, r4
 8013162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013164:	3468      	adds	r4, #104	; 0x68
 8013166:	e7d9      	b.n	801311c <__sfp+0x1c>
 8013168:	2104      	movs	r1, #4
 801316a:	4638      	mov	r0, r7
 801316c:	f7ff ff62 	bl	8013034 <__sfmoreglue>
 8013170:	4604      	mov	r4, r0
 8013172:	6030      	str	r0, [r6, #0]
 8013174:	2800      	cmp	r0, #0
 8013176:	d1d5      	bne.n	8013124 <__sfp+0x24>
 8013178:	f7ff ff78 	bl	801306c <__sfp_lock_release>
 801317c:	230c      	movs	r3, #12
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	e7ee      	b.n	8013160 <__sfp+0x60>
 8013182:	bf00      	nop
 8013184:	08016f0c 	.word	0x08016f0c
 8013188:	ffff0001 	.word	0xffff0001

0801318c <_fwalk_reent>:
 801318c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013190:	4606      	mov	r6, r0
 8013192:	4688      	mov	r8, r1
 8013194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013198:	2700      	movs	r7, #0
 801319a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801319e:	f1b9 0901 	subs.w	r9, r9, #1
 80131a2:	d505      	bpl.n	80131b0 <_fwalk_reent+0x24>
 80131a4:	6824      	ldr	r4, [r4, #0]
 80131a6:	2c00      	cmp	r4, #0
 80131a8:	d1f7      	bne.n	801319a <_fwalk_reent+0xe>
 80131aa:	4638      	mov	r0, r7
 80131ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131b0:	89ab      	ldrh	r3, [r5, #12]
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d907      	bls.n	80131c6 <_fwalk_reent+0x3a>
 80131b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131ba:	3301      	adds	r3, #1
 80131bc:	d003      	beq.n	80131c6 <_fwalk_reent+0x3a>
 80131be:	4629      	mov	r1, r5
 80131c0:	4630      	mov	r0, r6
 80131c2:	47c0      	blx	r8
 80131c4:	4307      	orrs	r7, r0
 80131c6:	3568      	adds	r5, #104	; 0x68
 80131c8:	e7e9      	b.n	801319e <_fwalk_reent+0x12>
	...

080131cc <__libc_init_array>:
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	4d0d      	ldr	r5, [pc, #52]	; (8013204 <__libc_init_array+0x38>)
 80131d0:	4c0d      	ldr	r4, [pc, #52]	; (8013208 <__libc_init_array+0x3c>)
 80131d2:	1b64      	subs	r4, r4, r5
 80131d4:	10a4      	asrs	r4, r4, #2
 80131d6:	2600      	movs	r6, #0
 80131d8:	42a6      	cmp	r6, r4
 80131da:	d109      	bne.n	80131f0 <__libc_init_array+0x24>
 80131dc:	4d0b      	ldr	r5, [pc, #44]	; (801320c <__libc_init_array+0x40>)
 80131de:	4c0c      	ldr	r4, [pc, #48]	; (8013210 <__libc_init_array+0x44>)
 80131e0:	f001 f802 	bl	80141e8 <_init>
 80131e4:	1b64      	subs	r4, r4, r5
 80131e6:	10a4      	asrs	r4, r4, #2
 80131e8:	2600      	movs	r6, #0
 80131ea:	42a6      	cmp	r6, r4
 80131ec:	d105      	bne.n	80131fa <__libc_init_array+0x2e>
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
 80131f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131f4:	4798      	blx	r3
 80131f6:	3601      	adds	r6, #1
 80131f8:	e7ee      	b.n	80131d8 <__libc_init_array+0xc>
 80131fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80131fe:	4798      	blx	r3
 8013200:	3601      	adds	r6, #1
 8013202:	e7f2      	b.n	80131ea <__libc_init_array+0x1e>
 8013204:	08016ffc 	.word	0x08016ffc
 8013208:	08016ffc 	.word	0x08016ffc
 801320c:	08016ffc 	.word	0x08016ffc
 8013210:	08017000 	.word	0x08017000

08013214 <__retarget_lock_init_recursive>:
 8013214:	4770      	bx	lr

08013216 <__retarget_lock_acquire_recursive>:
 8013216:	4770      	bx	lr

08013218 <__retarget_lock_release_recursive>:
 8013218:	4770      	bx	lr

0801321a <memcmp>:
 801321a:	b510      	push	{r4, lr}
 801321c:	3901      	subs	r1, #1
 801321e:	4402      	add	r2, r0
 8013220:	4290      	cmp	r0, r2
 8013222:	d101      	bne.n	8013228 <memcmp+0xe>
 8013224:	2000      	movs	r0, #0
 8013226:	e005      	b.n	8013234 <memcmp+0x1a>
 8013228:	7803      	ldrb	r3, [r0, #0]
 801322a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801322e:	42a3      	cmp	r3, r4
 8013230:	d001      	beq.n	8013236 <memcmp+0x1c>
 8013232:	1b18      	subs	r0, r3, r4
 8013234:	bd10      	pop	{r4, pc}
 8013236:	3001      	adds	r0, #1
 8013238:	e7f2      	b.n	8013220 <memcmp+0x6>

0801323a <memcpy>:
 801323a:	440a      	add	r2, r1
 801323c:	4291      	cmp	r1, r2
 801323e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013242:	d100      	bne.n	8013246 <memcpy+0xc>
 8013244:	4770      	bx	lr
 8013246:	b510      	push	{r4, lr}
 8013248:	f811 4b01 	ldrb.w	r4, [r1], #1
 801324c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013250:	4291      	cmp	r1, r2
 8013252:	d1f9      	bne.n	8013248 <memcpy+0xe>
 8013254:	bd10      	pop	{r4, pc}

08013256 <memset>:
 8013256:	4402      	add	r2, r0
 8013258:	4603      	mov	r3, r0
 801325a:	4293      	cmp	r3, r2
 801325c:	d100      	bne.n	8013260 <memset+0xa>
 801325e:	4770      	bx	lr
 8013260:	f803 1b01 	strb.w	r1, [r3], #1
 8013264:	e7f9      	b.n	801325a <memset+0x4>
	...

08013268 <sbrk_aligned>:
 8013268:	b570      	push	{r4, r5, r6, lr}
 801326a:	4e0e      	ldr	r6, [pc, #56]	; (80132a4 <sbrk_aligned+0x3c>)
 801326c:	460c      	mov	r4, r1
 801326e:	6831      	ldr	r1, [r6, #0]
 8013270:	4605      	mov	r5, r0
 8013272:	b911      	cbnz	r1, 801327a <sbrk_aligned+0x12>
 8013274:	f000 f94c 	bl	8013510 <_sbrk_r>
 8013278:	6030      	str	r0, [r6, #0]
 801327a:	4621      	mov	r1, r4
 801327c:	4628      	mov	r0, r5
 801327e:	f000 f947 	bl	8013510 <_sbrk_r>
 8013282:	1c43      	adds	r3, r0, #1
 8013284:	d00a      	beq.n	801329c <sbrk_aligned+0x34>
 8013286:	1cc4      	adds	r4, r0, #3
 8013288:	f024 0403 	bic.w	r4, r4, #3
 801328c:	42a0      	cmp	r0, r4
 801328e:	d007      	beq.n	80132a0 <sbrk_aligned+0x38>
 8013290:	1a21      	subs	r1, r4, r0
 8013292:	4628      	mov	r0, r5
 8013294:	f000 f93c 	bl	8013510 <_sbrk_r>
 8013298:	3001      	adds	r0, #1
 801329a:	d101      	bne.n	80132a0 <sbrk_aligned+0x38>
 801329c:	f04f 34ff 	mov.w	r4, #4294967295
 80132a0:	4620      	mov	r0, r4
 80132a2:	bd70      	pop	{r4, r5, r6, pc}
 80132a4:	2000cab0 	.word	0x2000cab0

080132a8 <_malloc_r>:
 80132a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ac:	1ccd      	adds	r5, r1, #3
 80132ae:	f025 0503 	bic.w	r5, r5, #3
 80132b2:	3508      	adds	r5, #8
 80132b4:	2d0c      	cmp	r5, #12
 80132b6:	bf38      	it	cc
 80132b8:	250c      	movcc	r5, #12
 80132ba:	2d00      	cmp	r5, #0
 80132bc:	4607      	mov	r7, r0
 80132be:	db01      	blt.n	80132c4 <_malloc_r+0x1c>
 80132c0:	42a9      	cmp	r1, r5
 80132c2:	d905      	bls.n	80132d0 <_malloc_r+0x28>
 80132c4:	230c      	movs	r3, #12
 80132c6:	603b      	str	r3, [r7, #0]
 80132c8:	2600      	movs	r6, #0
 80132ca:	4630      	mov	r0, r6
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d0:	4e2e      	ldr	r6, [pc, #184]	; (801338c <_malloc_r+0xe4>)
 80132d2:	f000 fa9f 	bl	8013814 <__malloc_lock>
 80132d6:	6833      	ldr	r3, [r6, #0]
 80132d8:	461c      	mov	r4, r3
 80132da:	bb34      	cbnz	r4, 801332a <_malloc_r+0x82>
 80132dc:	4629      	mov	r1, r5
 80132de:	4638      	mov	r0, r7
 80132e0:	f7ff ffc2 	bl	8013268 <sbrk_aligned>
 80132e4:	1c43      	adds	r3, r0, #1
 80132e6:	4604      	mov	r4, r0
 80132e8:	d14d      	bne.n	8013386 <_malloc_r+0xde>
 80132ea:	6834      	ldr	r4, [r6, #0]
 80132ec:	4626      	mov	r6, r4
 80132ee:	2e00      	cmp	r6, #0
 80132f0:	d140      	bne.n	8013374 <_malloc_r+0xcc>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	4631      	mov	r1, r6
 80132f6:	4638      	mov	r0, r7
 80132f8:	eb04 0803 	add.w	r8, r4, r3
 80132fc:	f000 f908 	bl	8013510 <_sbrk_r>
 8013300:	4580      	cmp	r8, r0
 8013302:	d13a      	bne.n	801337a <_malloc_r+0xd2>
 8013304:	6821      	ldr	r1, [r4, #0]
 8013306:	3503      	adds	r5, #3
 8013308:	1a6d      	subs	r5, r5, r1
 801330a:	f025 0503 	bic.w	r5, r5, #3
 801330e:	3508      	adds	r5, #8
 8013310:	2d0c      	cmp	r5, #12
 8013312:	bf38      	it	cc
 8013314:	250c      	movcc	r5, #12
 8013316:	4629      	mov	r1, r5
 8013318:	4638      	mov	r0, r7
 801331a:	f7ff ffa5 	bl	8013268 <sbrk_aligned>
 801331e:	3001      	adds	r0, #1
 8013320:	d02b      	beq.n	801337a <_malloc_r+0xd2>
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	442b      	add	r3, r5
 8013326:	6023      	str	r3, [r4, #0]
 8013328:	e00e      	b.n	8013348 <_malloc_r+0xa0>
 801332a:	6822      	ldr	r2, [r4, #0]
 801332c:	1b52      	subs	r2, r2, r5
 801332e:	d41e      	bmi.n	801336e <_malloc_r+0xc6>
 8013330:	2a0b      	cmp	r2, #11
 8013332:	d916      	bls.n	8013362 <_malloc_r+0xba>
 8013334:	1961      	adds	r1, r4, r5
 8013336:	42a3      	cmp	r3, r4
 8013338:	6025      	str	r5, [r4, #0]
 801333a:	bf18      	it	ne
 801333c:	6059      	strne	r1, [r3, #4]
 801333e:	6863      	ldr	r3, [r4, #4]
 8013340:	bf08      	it	eq
 8013342:	6031      	streq	r1, [r6, #0]
 8013344:	5162      	str	r2, [r4, r5]
 8013346:	604b      	str	r3, [r1, #4]
 8013348:	4638      	mov	r0, r7
 801334a:	f104 060b 	add.w	r6, r4, #11
 801334e:	f000 fa67 	bl	8013820 <__malloc_unlock>
 8013352:	f026 0607 	bic.w	r6, r6, #7
 8013356:	1d23      	adds	r3, r4, #4
 8013358:	1af2      	subs	r2, r6, r3
 801335a:	d0b6      	beq.n	80132ca <_malloc_r+0x22>
 801335c:	1b9b      	subs	r3, r3, r6
 801335e:	50a3      	str	r3, [r4, r2]
 8013360:	e7b3      	b.n	80132ca <_malloc_r+0x22>
 8013362:	6862      	ldr	r2, [r4, #4]
 8013364:	42a3      	cmp	r3, r4
 8013366:	bf0c      	ite	eq
 8013368:	6032      	streq	r2, [r6, #0]
 801336a:	605a      	strne	r2, [r3, #4]
 801336c:	e7ec      	b.n	8013348 <_malloc_r+0xa0>
 801336e:	4623      	mov	r3, r4
 8013370:	6864      	ldr	r4, [r4, #4]
 8013372:	e7b2      	b.n	80132da <_malloc_r+0x32>
 8013374:	4634      	mov	r4, r6
 8013376:	6876      	ldr	r6, [r6, #4]
 8013378:	e7b9      	b.n	80132ee <_malloc_r+0x46>
 801337a:	230c      	movs	r3, #12
 801337c:	603b      	str	r3, [r7, #0]
 801337e:	4638      	mov	r0, r7
 8013380:	f000 fa4e 	bl	8013820 <__malloc_unlock>
 8013384:	e7a1      	b.n	80132ca <_malloc_r+0x22>
 8013386:	6025      	str	r5, [r4, #0]
 8013388:	e7de      	b.n	8013348 <_malloc_r+0xa0>
 801338a:	bf00      	nop
 801338c:	2000caac 	.word	0x2000caac

08013390 <iprintf>:
 8013390:	b40f      	push	{r0, r1, r2, r3}
 8013392:	4b0a      	ldr	r3, [pc, #40]	; (80133bc <iprintf+0x2c>)
 8013394:	b513      	push	{r0, r1, r4, lr}
 8013396:	681c      	ldr	r4, [r3, #0]
 8013398:	b124      	cbz	r4, 80133a4 <iprintf+0x14>
 801339a:	69a3      	ldr	r3, [r4, #24]
 801339c:	b913      	cbnz	r3, 80133a4 <iprintf+0x14>
 801339e:	4620      	mov	r0, r4
 80133a0:	f7ff fe76 	bl	8013090 <__sinit>
 80133a4:	ab05      	add	r3, sp, #20
 80133a6:	9a04      	ldr	r2, [sp, #16]
 80133a8:	68a1      	ldr	r1, [r4, #8]
 80133aa:	9301      	str	r3, [sp, #4]
 80133ac:	4620      	mov	r0, r4
 80133ae:	f000 fab3 	bl	8013918 <_vfiprintf_r>
 80133b2:	b002      	add	sp, #8
 80133b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133b8:	b004      	add	sp, #16
 80133ba:	4770      	bx	lr
 80133bc:	20000030 	.word	0x20000030

080133c0 <rand>:
 80133c0:	4b16      	ldr	r3, [pc, #88]	; (801341c <rand+0x5c>)
 80133c2:	b510      	push	{r4, lr}
 80133c4:	681c      	ldr	r4, [r3, #0]
 80133c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80133c8:	b9b3      	cbnz	r3, 80133f8 <rand+0x38>
 80133ca:	2018      	movs	r0, #24
 80133cc:	f000 fa1a 	bl	8013804 <malloc>
 80133d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80133d2:	b928      	cbnz	r0, 80133e0 <rand+0x20>
 80133d4:	4602      	mov	r2, r0
 80133d6:	4b12      	ldr	r3, [pc, #72]	; (8013420 <rand+0x60>)
 80133d8:	4812      	ldr	r0, [pc, #72]	; (8013424 <rand+0x64>)
 80133da:	214e      	movs	r1, #78	; 0x4e
 80133dc:	f000 f8fe 	bl	80135dc <__assert_func>
 80133e0:	4a11      	ldr	r2, [pc, #68]	; (8013428 <rand+0x68>)
 80133e2:	4b12      	ldr	r3, [pc, #72]	; (801342c <rand+0x6c>)
 80133e4:	e9c0 2300 	strd	r2, r3, [r0]
 80133e8:	4b11      	ldr	r3, [pc, #68]	; (8013430 <rand+0x70>)
 80133ea:	6083      	str	r3, [r0, #8]
 80133ec:	230b      	movs	r3, #11
 80133ee:	8183      	strh	r3, [r0, #12]
 80133f0:	2201      	movs	r2, #1
 80133f2:	2300      	movs	r3, #0
 80133f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80133f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80133fa:	4a0e      	ldr	r2, [pc, #56]	; (8013434 <rand+0x74>)
 80133fc:	6920      	ldr	r0, [r4, #16]
 80133fe:	6963      	ldr	r3, [r4, #20]
 8013400:	490d      	ldr	r1, [pc, #52]	; (8013438 <rand+0x78>)
 8013402:	4342      	muls	r2, r0
 8013404:	fb01 2203 	mla	r2, r1, r3, r2
 8013408:	fba0 0101 	umull	r0, r1, r0, r1
 801340c:	1c43      	adds	r3, r0, #1
 801340e:	eb42 0001 	adc.w	r0, r2, r1
 8013412:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013416:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801341a:	bd10      	pop	{r4, pc}
 801341c:	20000030 	.word	0x20000030
 8013420:	08016f10 	.word	0x08016f10
 8013424:	08016f27 	.word	0x08016f27
 8013428:	abcd330e 	.word	0xabcd330e
 801342c:	e66d1234 	.word	0xe66d1234
 8013430:	0005deec 	.word	0x0005deec
 8013434:	5851f42d 	.word	0x5851f42d
 8013438:	4c957f2d 	.word	0x4c957f2d

0801343c <cleanup_glue>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	6809      	ldr	r1, [r1, #0]
 8013442:	4605      	mov	r5, r0
 8013444:	b109      	cbz	r1, 801344a <cleanup_glue+0xe>
 8013446:	f7ff fff9 	bl	801343c <cleanup_glue>
 801344a:	4621      	mov	r1, r4
 801344c:	4628      	mov	r0, r5
 801344e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013452:	f000 b9eb 	b.w	801382c <_free_r>
	...

08013458 <_reclaim_reent>:
 8013458:	4b2c      	ldr	r3, [pc, #176]	; (801350c <_reclaim_reent+0xb4>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4283      	cmp	r3, r0
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	d051      	beq.n	8013508 <_reclaim_reent+0xb0>
 8013464:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013466:	b143      	cbz	r3, 801347a <_reclaim_reent+0x22>
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d14a      	bne.n	8013504 <_reclaim_reent+0xac>
 801346e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013470:	6819      	ldr	r1, [r3, #0]
 8013472:	b111      	cbz	r1, 801347a <_reclaim_reent+0x22>
 8013474:	4620      	mov	r0, r4
 8013476:	f000 f9d9 	bl	801382c <_free_r>
 801347a:	6961      	ldr	r1, [r4, #20]
 801347c:	b111      	cbz	r1, 8013484 <_reclaim_reent+0x2c>
 801347e:	4620      	mov	r0, r4
 8013480:	f000 f9d4 	bl	801382c <_free_r>
 8013484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013486:	b111      	cbz	r1, 801348e <_reclaim_reent+0x36>
 8013488:	4620      	mov	r0, r4
 801348a:	f000 f9cf 	bl	801382c <_free_r>
 801348e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013490:	b111      	cbz	r1, 8013498 <_reclaim_reent+0x40>
 8013492:	4620      	mov	r0, r4
 8013494:	f000 f9ca 	bl	801382c <_free_r>
 8013498:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801349a:	b111      	cbz	r1, 80134a2 <_reclaim_reent+0x4a>
 801349c:	4620      	mov	r0, r4
 801349e:	f000 f9c5 	bl	801382c <_free_r>
 80134a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80134a4:	b111      	cbz	r1, 80134ac <_reclaim_reent+0x54>
 80134a6:	4620      	mov	r0, r4
 80134a8:	f000 f9c0 	bl	801382c <_free_r>
 80134ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80134ae:	b111      	cbz	r1, 80134b6 <_reclaim_reent+0x5e>
 80134b0:	4620      	mov	r0, r4
 80134b2:	f000 f9bb 	bl	801382c <_free_r>
 80134b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80134b8:	b111      	cbz	r1, 80134c0 <_reclaim_reent+0x68>
 80134ba:	4620      	mov	r0, r4
 80134bc:	f000 f9b6 	bl	801382c <_free_r>
 80134c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134c2:	b111      	cbz	r1, 80134ca <_reclaim_reent+0x72>
 80134c4:	4620      	mov	r0, r4
 80134c6:	f000 f9b1 	bl	801382c <_free_r>
 80134ca:	69a3      	ldr	r3, [r4, #24]
 80134cc:	b1e3      	cbz	r3, 8013508 <_reclaim_reent+0xb0>
 80134ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80134d0:	4620      	mov	r0, r4
 80134d2:	4798      	blx	r3
 80134d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80134d6:	b1b9      	cbz	r1, 8013508 <_reclaim_reent+0xb0>
 80134d8:	4620      	mov	r0, r4
 80134da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134de:	f7ff bfad 	b.w	801343c <cleanup_glue>
 80134e2:	5949      	ldr	r1, [r1, r5]
 80134e4:	b941      	cbnz	r1, 80134f8 <_reclaim_reent+0xa0>
 80134e6:	3504      	adds	r5, #4
 80134e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ea:	2d80      	cmp	r5, #128	; 0x80
 80134ec:	68d9      	ldr	r1, [r3, #12]
 80134ee:	d1f8      	bne.n	80134e2 <_reclaim_reent+0x8a>
 80134f0:	4620      	mov	r0, r4
 80134f2:	f000 f99b 	bl	801382c <_free_r>
 80134f6:	e7ba      	b.n	801346e <_reclaim_reent+0x16>
 80134f8:	680e      	ldr	r6, [r1, #0]
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 f996 	bl	801382c <_free_r>
 8013500:	4631      	mov	r1, r6
 8013502:	e7ef      	b.n	80134e4 <_reclaim_reent+0x8c>
 8013504:	2500      	movs	r5, #0
 8013506:	e7ef      	b.n	80134e8 <_reclaim_reent+0x90>
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	bf00      	nop
 801350c:	20000030 	.word	0x20000030

08013510 <_sbrk_r>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	4d06      	ldr	r5, [pc, #24]	; (801352c <_sbrk_r+0x1c>)
 8013514:	2300      	movs	r3, #0
 8013516:	4604      	mov	r4, r0
 8013518:	4608      	mov	r0, r1
 801351a:	602b      	str	r3, [r5, #0]
 801351c:	f7ed fc8a 	bl	8000e34 <_sbrk>
 8013520:	1c43      	adds	r3, r0, #1
 8013522:	d102      	bne.n	801352a <_sbrk_r+0x1a>
 8013524:	682b      	ldr	r3, [r5, #0]
 8013526:	b103      	cbz	r3, 801352a <_sbrk_r+0x1a>
 8013528:	6023      	str	r3, [r4, #0]
 801352a:	bd38      	pop	{r3, r4, r5, pc}
 801352c:	2000cab4 	.word	0x2000cab4

08013530 <__sread>:
 8013530:	b510      	push	{r4, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013538:	f000 fcb2 	bl	8013ea0 <_read_r>
 801353c:	2800      	cmp	r0, #0
 801353e:	bfab      	itete	ge
 8013540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013542:	89a3      	ldrhlt	r3, [r4, #12]
 8013544:	181b      	addge	r3, r3, r0
 8013546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801354a:	bfac      	ite	ge
 801354c:	6563      	strge	r3, [r4, #84]	; 0x54
 801354e:	81a3      	strhlt	r3, [r4, #12]
 8013550:	bd10      	pop	{r4, pc}

08013552 <__swrite>:
 8013552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013556:	461f      	mov	r7, r3
 8013558:	898b      	ldrh	r3, [r1, #12]
 801355a:	05db      	lsls	r3, r3, #23
 801355c:	4605      	mov	r5, r0
 801355e:	460c      	mov	r4, r1
 8013560:	4616      	mov	r6, r2
 8013562:	d505      	bpl.n	8013570 <__swrite+0x1e>
 8013564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013568:	2302      	movs	r3, #2
 801356a:	2200      	movs	r2, #0
 801356c:	f000 f938 	bl	80137e0 <_lseek_r>
 8013570:	89a3      	ldrh	r3, [r4, #12]
 8013572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801357a:	81a3      	strh	r3, [r4, #12]
 801357c:	4632      	mov	r2, r6
 801357e:	463b      	mov	r3, r7
 8013580:	4628      	mov	r0, r5
 8013582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013586:	f000 b817 	b.w	80135b8 <_write_r>

0801358a <__sseek>:
 801358a:	b510      	push	{r4, lr}
 801358c:	460c      	mov	r4, r1
 801358e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013592:	f000 f925 	bl	80137e0 <_lseek_r>
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	bf15      	itete	ne
 801359c:	6560      	strne	r0, [r4, #84]	; 0x54
 801359e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135a6:	81a3      	strheq	r3, [r4, #12]
 80135a8:	bf18      	it	ne
 80135aa:	81a3      	strhne	r3, [r4, #12]
 80135ac:	bd10      	pop	{r4, pc}

080135ae <__sclose>:
 80135ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b2:	f000 b831 	b.w	8013618 <_close_r>
	...

080135b8 <_write_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4d07      	ldr	r5, [pc, #28]	; (80135d8 <_write_r+0x20>)
 80135bc:	4604      	mov	r4, r0
 80135be:	4608      	mov	r0, r1
 80135c0:	4611      	mov	r1, r2
 80135c2:	2200      	movs	r2, #0
 80135c4:	602a      	str	r2, [r5, #0]
 80135c6:	461a      	mov	r2, r3
 80135c8:	f7ed fbe3 	bl	8000d92 <_write>
 80135cc:	1c43      	adds	r3, r0, #1
 80135ce:	d102      	bne.n	80135d6 <_write_r+0x1e>
 80135d0:	682b      	ldr	r3, [r5, #0]
 80135d2:	b103      	cbz	r3, 80135d6 <_write_r+0x1e>
 80135d4:	6023      	str	r3, [r4, #0]
 80135d6:	bd38      	pop	{r3, r4, r5, pc}
 80135d8:	2000cab4 	.word	0x2000cab4

080135dc <__assert_func>:
 80135dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135de:	4614      	mov	r4, r2
 80135e0:	461a      	mov	r2, r3
 80135e2:	4b09      	ldr	r3, [pc, #36]	; (8013608 <__assert_func+0x2c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	4605      	mov	r5, r0
 80135e8:	68d8      	ldr	r0, [r3, #12]
 80135ea:	b14c      	cbz	r4, 8013600 <__assert_func+0x24>
 80135ec:	4b07      	ldr	r3, [pc, #28]	; (801360c <__assert_func+0x30>)
 80135ee:	9100      	str	r1, [sp, #0]
 80135f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135f4:	4906      	ldr	r1, [pc, #24]	; (8013610 <__assert_func+0x34>)
 80135f6:	462b      	mov	r3, r5
 80135f8:	f000 f8e0 	bl	80137bc <fiprintf>
 80135fc:	f000 fd22 	bl	8014044 <abort>
 8013600:	4b04      	ldr	r3, [pc, #16]	; (8013614 <__assert_func+0x38>)
 8013602:	461c      	mov	r4, r3
 8013604:	e7f3      	b.n	80135ee <__assert_func+0x12>
 8013606:	bf00      	nop
 8013608:	20000030 	.word	0x20000030
 801360c:	08016f82 	.word	0x08016f82
 8013610:	08016f8f 	.word	0x08016f8f
 8013614:	08016fbd 	.word	0x08016fbd

08013618 <_close_r>:
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	4d06      	ldr	r5, [pc, #24]	; (8013634 <_close_r+0x1c>)
 801361c:	2300      	movs	r3, #0
 801361e:	4604      	mov	r4, r0
 8013620:	4608      	mov	r0, r1
 8013622:	602b      	str	r3, [r5, #0]
 8013624:	f7ed fbd1 	bl	8000dca <_close>
 8013628:	1c43      	adds	r3, r0, #1
 801362a:	d102      	bne.n	8013632 <_close_r+0x1a>
 801362c:	682b      	ldr	r3, [r5, #0]
 801362e:	b103      	cbz	r3, 8013632 <_close_r+0x1a>
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	2000cab4 	.word	0x2000cab4

08013638 <__sflush_r>:
 8013638:	898a      	ldrh	r2, [r1, #12]
 801363a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801363e:	4605      	mov	r5, r0
 8013640:	0710      	lsls	r0, r2, #28
 8013642:	460c      	mov	r4, r1
 8013644:	d458      	bmi.n	80136f8 <__sflush_r+0xc0>
 8013646:	684b      	ldr	r3, [r1, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	dc05      	bgt.n	8013658 <__sflush_r+0x20>
 801364c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801364e:	2b00      	cmp	r3, #0
 8013650:	dc02      	bgt.n	8013658 <__sflush_r+0x20>
 8013652:	2000      	movs	r0, #0
 8013654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801365a:	2e00      	cmp	r6, #0
 801365c:	d0f9      	beq.n	8013652 <__sflush_r+0x1a>
 801365e:	2300      	movs	r3, #0
 8013660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013664:	682f      	ldr	r7, [r5, #0]
 8013666:	602b      	str	r3, [r5, #0]
 8013668:	d032      	beq.n	80136d0 <__sflush_r+0x98>
 801366a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801366c:	89a3      	ldrh	r3, [r4, #12]
 801366e:	075a      	lsls	r2, r3, #29
 8013670:	d505      	bpl.n	801367e <__sflush_r+0x46>
 8013672:	6863      	ldr	r3, [r4, #4]
 8013674:	1ac0      	subs	r0, r0, r3
 8013676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013678:	b10b      	cbz	r3, 801367e <__sflush_r+0x46>
 801367a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801367c:	1ac0      	subs	r0, r0, r3
 801367e:	2300      	movs	r3, #0
 8013680:	4602      	mov	r2, r0
 8013682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013684:	6a21      	ldr	r1, [r4, #32]
 8013686:	4628      	mov	r0, r5
 8013688:	47b0      	blx	r6
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	d106      	bne.n	801369e <__sflush_r+0x66>
 8013690:	6829      	ldr	r1, [r5, #0]
 8013692:	291d      	cmp	r1, #29
 8013694:	d82c      	bhi.n	80136f0 <__sflush_r+0xb8>
 8013696:	4a2a      	ldr	r2, [pc, #168]	; (8013740 <__sflush_r+0x108>)
 8013698:	40ca      	lsrs	r2, r1
 801369a:	07d6      	lsls	r6, r2, #31
 801369c:	d528      	bpl.n	80136f0 <__sflush_r+0xb8>
 801369e:	2200      	movs	r2, #0
 80136a0:	6062      	str	r2, [r4, #4]
 80136a2:	04d9      	lsls	r1, r3, #19
 80136a4:	6922      	ldr	r2, [r4, #16]
 80136a6:	6022      	str	r2, [r4, #0]
 80136a8:	d504      	bpl.n	80136b4 <__sflush_r+0x7c>
 80136aa:	1c42      	adds	r2, r0, #1
 80136ac:	d101      	bne.n	80136b2 <__sflush_r+0x7a>
 80136ae:	682b      	ldr	r3, [r5, #0]
 80136b0:	b903      	cbnz	r3, 80136b4 <__sflush_r+0x7c>
 80136b2:	6560      	str	r0, [r4, #84]	; 0x54
 80136b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136b6:	602f      	str	r7, [r5, #0]
 80136b8:	2900      	cmp	r1, #0
 80136ba:	d0ca      	beq.n	8013652 <__sflush_r+0x1a>
 80136bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136c0:	4299      	cmp	r1, r3
 80136c2:	d002      	beq.n	80136ca <__sflush_r+0x92>
 80136c4:	4628      	mov	r0, r5
 80136c6:	f000 f8b1 	bl	801382c <_free_r>
 80136ca:	2000      	movs	r0, #0
 80136cc:	6360      	str	r0, [r4, #52]	; 0x34
 80136ce:	e7c1      	b.n	8013654 <__sflush_r+0x1c>
 80136d0:	6a21      	ldr	r1, [r4, #32]
 80136d2:	2301      	movs	r3, #1
 80136d4:	4628      	mov	r0, r5
 80136d6:	47b0      	blx	r6
 80136d8:	1c41      	adds	r1, r0, #1
 80136da:	d1c7      	bne.n	801366c <__sflush_r+0x34>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d0c4      	beq.n	801366c <__sflush_r+0x34>
 80136e2:	2b1d      	cmp	r3, #29
 80136e4:	d001      	beq.n	80136ea <__sflush_r+0xb2>
 80136e6:	2b16      	cmp	r3, #22
 80136e8:	d101      	bne.n	80136ee <__sflush_r+0xb6>
 80136ea:	602f      	str	r7, [r5, #0]
 80136ec:	e7b1      	b.n	8013652 <__sflush_r+0x1a>
 80136ee:	89a3      	ldrh	r3, [r4, #12]
 80136f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136f4:	81a3      	strh	r3, [r4, #12]
 80136f6:	e7ad      	b.n	8013654 <__sflush_r+0x1c>
 80136f8:	690f      	ldr	r7, [r1, #16]
 80136fa:	2f00      	cmp	r7, #0
 80136fc:	d0a9      	beq.n	8013652 <__sflush_r+0x1a>
 80136fe:	0793      	lsls	r3, r2, #30
 8013700:	680e      	ldr	r6, [r1, #0]
 8013702:	bf08      	it	eq
 8013704:	694b      	ldreq	r3, [r1, #20]
 8013706:	600f      	str	r7, [r1, #0]
 8013708:	bf18      	it	ne
 801370a:	2300      	movne	r3, #0
 801370c:	eba6 0807 	sub.w	r8, r6, r7
 8013710:	608b      	str	r3, [r1, #8]
 8013712:	f1b8 0f00 	cmp.w	r8, #0
 8013716:	dd9c      	ble.n	8013652 <__sflush_r+0x1a>
 8013718:	6a21      	ldr	r1, [r4, #32]
 801371a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801371c:	4643      	mov	r3, r8
 801371e:	463a      	mov	r2, r7
 8013720:	4628      	mov	r0, r5
 8013722:	47b0      	blx	r6
 8013724:	2800      	cmp	r0, #0
 8013726:	dc06      	bgt.n	8013736 <__sflush_r+0xfe>
 8013728:	89a3      	ldrh	r3, [r4, #12]
 801372a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801372e:	81a3      	strh	r3, [r4, #12]
 8013730:	f04f 30ff 	mov.w	r0, #4294967295
 8013734:	e78e      	b.n	8013654 <__sflush_r+0x1c>
 8013736:	4407      	add	r7, r0
 8013738:	eba8 0800 	sub.w	r8, r8, r0
 801373c:	e7e9      	b.n	8013712 <__sflush_r+0xda>
 801373e:	bf00      	nop
 8013740:	20400001 	.word	0x20400001

08013744 <_fflush_r>:
 8013744:	b538      	push	{r3, r4, r5, lr}
 8013746:	690b      	ldr	r3, [r1, #16]
 8013748:	4605      	mov	r5, r0
 801374a:	460c      	mov	r4, r1
 801374c:	b913      	cbnz	r3, 8013754 <_fflush_r+0x10>
 801374e:	2500      	movs	r5, #0
 8013750:	4628      	mov	r0, r5
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	b118      	cbz	r0, 801375e <_fflush_r+0x1a>
 8013756:	6983      	ldr	r3, [r0, #24]
 8013758:	b90b      	cbnz	r3, 801375e <_fflush_r+0x1a>
 801375a:	f7ff fc99 	bl	8013090 <__sinit>
 801375e:	4b14      	ldr	r3, [pc, #80]	; (80137b0 <_fflush_r+0x6c>)
 8013760:	429c      	cmp	r4, r3
 8013762:	d11b      	bne.n	801379c <_fflush_r+0x58>
 8013764:	686c      	ldr	r4, [r5, #4]
 8013766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d0ef      	beq.n	801374e <_fflush_r+0xa>
 801376e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013770:	07d0      	lsls	r0, r2, #31
 8013772:	d404      	bmi.n	801377e <_fflush_r+0x3a>
 8013774:	0599      	lsls	r1, r3, #22
 8013776:	d402      	bmi.n	801377e <_fflush_r+0x3a>
 8013778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801377a:	f7ff fd4c 	bl	8013216 <__retarget_lock_acquire_recursive>
 801377e:	4628      	mov	r0, r5
 8013780:	4621      	mov	r1, r4
 8013782:	f7ff ff59 	bl	8013638 <__sflush_r>
 8013786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013788:	07da      	lsls	r2, r3, #31
 801378a:	4605      	mov	r5, r0
 801378c:	d4e0      	bmi.n	8013750 <_fflush_r+0xc>
 801378e:	89a3      	ldrh	r3, [r4, #12]
 8013790:	059b      	lsls	r3, r3, #22
 8013792:	d4dd      	bmi.n	8013750 <_fflush_r+0xc>
 8013794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013796:	f7ff fd3f 	bl	8013218 <__retarget_lock_release_recursive>
 801379a:	e7d9      	b.n	8013750 <_fflush_r+0xc>
 801379c:	4b05      	ldr	r3, [pc, #20]	; (80137b4 <_fflush_r+0x70>)
 801379e:	429c      	cmp	r4, r3
 80137a0:	d101      	bne.n	80137a6 <_fflush_r+0x62>
 80137a2:	68ac      	ldr	r4, [r5, #8]
 80137a4:	e7df      	b.n	8013766 <_fflush_r+0x22>
 80137a6:	4b04      	ldr	r3, [pc, #16]	; (80137b8 <_fflush_r+0x74>)
 80137a8:	429c      	cmp	r4, r3
 80137aa:	bf08      	it	eq
 80137ac:	68ec      	ldreq	r4, [r5, #12]
 80137ae:	e7da      	b.n	8013766 <_fflush_r+0x22>
 80137b0:	08016ecc 	.word	0x08016ecc
 80137b4:	08016eec 	.word	0x08016eec
 80137b8:	08016eac 	.word	0x08016eac

080137bc <fiprintf>:
 80137bc:	b40e      	push	{r1, r2, r3}
 80137be:	b503      	push	{r0, r1, lr}
 80137c0:	4601      	mov	r1, r0
 80137c2:	ab03      	add	r3, sp, #12
 80137c4:	4805      	ldr	r0, [pc, #20]	; (80137dc <fiprintf+0x20>)
 80137c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ca:	6800      	ldr	r0, [r0, #0]
 80137cc:	9301      	str	r3, [sp, #4]
 80137ce:	f000 f8a3 	bl	8013918 <_vfiprintf_r>
 80137d2:	b002      	add	sp, #8
 80137d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80137d8:	b003      	add	sp, #12
 80137da:	4770      	bx	lr
 80137dc:	20000030 	.word	0x20000030

080137e0 <_lseek_r>:
 80137e0:	b538      	push	{r3, r4, r5, lr}
 80137e2:	4d07      	ldr	r5, [pc, #28]	; (8013800 <_lseek_r+0x20>)
 80137e4:	4604      	mov	r4, r0
 80137e6:	4608      	mov	r0, r1
 80137e8:	4611      	mov	r1, r2
 80137ea:	2200      	movs	r2, #0
 80137ec:	602a      	str	r2, [r5, #0]
 80137ee:	461a      	mov	r2, r3
 80137f0:	f7ed fb12 	bl	8000e18 <_lseek>
 80137f4:	1c43      	adds	r3, r0, #1
 80137f6:	d102      	bne.n	80137fe <_lseek_r+0x1e>
 80137f8:	682b      	ldr	r3, [r5, #0]
 80137fa:	b103      	cbz	r3, 80137fe <_lseek_r+0x1e>
 80137fc:	6023      	str	r3, [r4, #0]
 80137fe:	bd38      	pop	{r3, r4, r5, pc}
 8013800:	2000cab4 	.word	0x2000cab4

08013804 <malloc>:
 8013804:	4b02      	ldr	r3, [pc, #8]	; (8013810 <malloc+0xc>)
 8013806:	4601      	mov	r1, r0
 8013808:	6818      	ldr	r0, [r3, #0]
 801380a:	f7ff bd4d 	b.w	80132a8 <_malloc_r>
 801380e:	bf00      	nop
 8013810:	20000030 	.word	0x20000030

08013814 <__malloc_lock>:
 8013814:	4801      	ldr	r0, [pc, #4]	; (801381c <__malloc_lock+0x8>)
 8013816:	f7ff bcfe 	b.w	8013216 <__retarget_lock_acquire_recursive>
 801381a:	bf00      	nop
 801381c:	2000caa8 	.word	0x2000caa8

08013820 <__malloc_unlock>:
 8013820:	4801      	ldr	r0, [pc, #4]	; (8013828 <__malloc_unlock+0x8>)
 8013822:	f7ff bcf9 	b.w	8013218 <__retarget_lock_release_recursive>
 8013826:	bf00      	nop
 8013828:	2000caa8 	.word	0x2000caa8

0801382c <_free_r>:
 801382c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801382e:	2900      	cmp	r1, #0
 8013830:	d044      	beq.n	80138bc <_free_r+0x90>
 8013832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013836:	9001      	str	r0, [sp, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	f1a1 0404 	sub.w	r4, r1, #4
 801383e:	bfb8      	it	lt
 8013840:	18e4      	addlt	r4, r4, r3
 8013842:	f7ff ffe7 	bl	8013814 <__malloc_lock>
 8013846:	4a1e      	ldr	r2, [pc, #120]	; (80138c0 <_free_r+0x94>)
 8013848:	9801      	ldr	r0, [sp, #4]
 801384a:	6813      	ldr	r3, [r2, #0]
 801384c:	b933      	cbnz	r3, 801385c <_free_r+0x30>
 801384e:	6063      	str	r3, [r4, #4]
 8013850:	6014      	str	r4, [r2, #0]
 8013852:	b003      	add	sp, #12
 8013854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013858:	f7ff bfe2 	b.w	8013820 <__malloc_unlock>
 801385c:	42a3      	cmp	r3, r4
 801385e:	d908      	bls.n	8013872 <_free_r+0x46>
 8013860:	6825      	ldr	r5, [r4, #0]
 8013862:	1961      	adds	r1, r4, r5
 8013864:	428b      	cmp	r3, r1
 8013866:	bf01      	itttt	eq
 8013868:	6819      	ldreq	r1, [r3, #0]
 801386a:	685b      	ldreq	r3, [r3, #4]
 801386c:	1949      	addeq	r1, r1, r5
 801386e:	6021      	streq	r1, [r4, #0]
 8013870:	e7ed      	b.n	801384e <_free_r+0x22>
 8013872:	461a      	mov	r2, r3
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	b10b      	cbz	r3, 801387c <_free_r+0x50>
 8013878:	42a3      	cmp	r3, r4
 801387a:	d9fa      	bls.n	8013872 <_free_r+0x46>
 801387c:	6811      	ldr	r1, [r2, #0]
 801387e:	1855      	adds	r5, r2, r1
 8013880:	42a5      	cmp	r5, r4
 8013882:	d10b      	bne.n	801389c <_free_r+0x70>
 8013884:	6824      	ldr	r4, [r4, #0]
 8013886:	4421      	add	r1, r4
 8013888:	1854      	adds	r4, r2, r1
 801388a:	42a3      	cmp	r3, r4
 801388c:	6011      	str	r1, [r2, #0]
 801388e:	d1e0      	bne.n	8013852 <_free_r+0x26>
 8013890:	681c      	ldr	r4, [r3, #0]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	6053      	str	r3, [r2, #4]
 8013896:	4421      	add	r1, r4
 8013898:	6011      	str	r1, [r2, #0]
 801389a:	e7da      	b.n	8013852 <_free_r+0x26>
 801389c:	d902      	bls.n	80138a4 <_free_r+0x78>
 801389e:	230c      	movs	r3, #12
 80138a0:	6003      	str	r3, [r0, #0]
 80138a2:	e7d6      	b.n	8013852 <_free_r+0x26>
 80138a4:	6825      	ldr	r5, [r4, #0]
 80138a6:	1961      	adds	r1, r4, r5
 80138a8:	428b      	cmp	r3, r1
 80138aa:	bf04      	itt	eq
 80138ac:	6819      	ldreq	r1, [r3, #0]
 80138ae:	685b      	ldreq	r3, [r3, #4]
 80138b0:	6063      	str	r3, [r4, #4]
 80138b2:	bf04      	itt	eq
 80138b4:	1949      	addeq	r1, r1, r5
 80138b6:	6021      	streq	r1, [r4, #0]
 80138b8:	6054      	str	r4, [r2, #4]
 80138ba:	e7ca      	b.n	8013852 <_free_r+0x26>
 80138bc:	b003      	add	sp, #12
 80138be:	bd30      	pop	{r4, r5, pc}
 80138c0:	2000caac 	.word	0x2000caac

080138c4 <__sfputc_r>:
 80138c4:	6893      	ldr	r3, [r2, #8]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	b410      	push	{r4}
 80138cc:	6093      	str	r3, [r2, #8]
 80138ce:	da08      	bge.n	80138e2 <__sfputc_r+0x1e>
 80138d0:	6994      	ldr	r4, [r2, #24]
 80138d2:	42a3      	cmp	r3, r4
 80138d4:	db01      	blt.n	80138da <__sfputc_r+0x16>
 80138d6:	290a      	cmp	r1, #10
 80138d8:	d103      	bne.n	80138e2 <__sfputc_r+0x1e>
 80138da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138de:	f000 baf1 	b.w	8013ec4 <__swbuf_r>
 80138e2:	6813      	ldr	r3, [r2, #0]
 80138e4:	1c58      	adds	r0, r3, #1
 80138e6:	6010      	str	r0, [r2, #0]
 80138e8:	7019      	strb	r1, [r3, #0]
 80138ea:	4608      	mov	r0, r1
 80138ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <__sfputs_r>:
 80138f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138f4:	4606      	mov	r6, r0
 80138f6:	460f      	mov	r7, r1
 80138f8:	4614      	mov	r4, r2
 80138fa:	18d5      	adds	r5, r2, r3
 80138fc:	42ac      	cmp	r4, r5
 80138fe:	d101      	bne.n	8013904 <__sfputs_r+0x12>
 8013900:	2000      	movs	r0, #0
 8013902:	e007      	b.n	8013914 <__sfputs_r+0x22>
 8013904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013908:	463a      	mov	r2, r7
 801390a:	4630      	mov	r0, r6
 801390c:	f7ff ffda 	bl	80138c4 <__sfputc_r>
 8013910:	1c43      	adds	r3, r0, #1
 8013912:	d1f3      	bne.n	80138fc <__sfputs_r+0xa>
 8013914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013918 <_vfiprintf_r>:
 8013918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801391c:	460d      	mov	r5, r1
 801391e:	b09d      	sub	sp, #116	; 0x74
 8013920:	4614      	mov	r4, r2
 8013922:	4698      	mov	r8, r3
 8013924:	4606      	mov	r6, r0
 8013926:	b118      	cbz	r0, 8013930 <_vfiprintf_r+0x18>
 8013928:	6983      	ldr	r3, [r0, #24]
 801392a:	b90b      	cbnz	r3, 8013930 <_vfiprintf_r+0x18>
 801392c:	f7ff fbb0 	bl	8013090 <__sinit>
 8013930:	4b89      	ldr	r3, [pc, #548]	; (8013b58 <_vfiprintf_r+0x240>)
 8013932:	429d      	cmp	r5, r3
 8013934:	d11b      	bne.n	801396e <_vfiprintf_r+0x56>
 8013936:	6875      	ldr	r5, [r6, #4]
 8013938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801393a:	07d9      	lsls	r1, r3, #31
 801393c:	d405      	bmi.n	801394a <_vfiprintf_r+0x32>
 801393e:	89ab      	ldrh	r3, [r5, #12]
 8013940:	059a      	lsls	r2, r3, #22
 8013942:	d402      	bmi.n	801394a <_vfiprintf_r+0x32>
 8013944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013946:	f7ff fc66 	bl	8013216 <__retarget_lock_acquire_recursive>
 801394a:	89ab      	ldrh	r3, [r5, #12]
 801394c:	071b      	lsls	r3, r3, #28
 801394e:	d501      	bpl.n	8013954 <_vfiprintf_r+0x3c>
 8013950:	692b      	ldr	r3, [r5, #16]
 8013952:	b9eb      	cbnz	r3, 8013990 <_vfiprintf_r+0x78>
 8013954:	4629      	mov	r1, r5
 8013956:	4630      	mov	r0, r6
 8013958:	f000 fb06 	bl	8013f68 <__swsetup_r>
 801395c:	b1c0      	cbz	r0, 8013990 <_vfiprintf_r+0x78>
 801395e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013960:	07dc      	lsls	r4, r3, #31
 8013962:	d50e      	bpl.n	8013982 <_vfiprintf_r+0x6a>
 8013964:	f04f 30ff 	mov.w	r0, #4294967295
 8013968:	b01d      	add	sp, #116	; 0x74
 801396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396e:	4b7b      	ldr	r3, [pc, #492]	; (8013b5c <_vfiprintf_r+0x244>)
 8013970:	429d      	cmp	r5, r3
 8013972:	d101      	bne.n	8013978 <_vfiprintf_r+0x60>
 8013974:	68b5      	ldr	r5, [r6, #8]
 8013976:	e7df      	b.n	8013938 <_vfiprintf_r+0x20>
 8013978:	4b79      	ldr	r3, [pc, #484]	; (8013b60 <_vfiprintf_r+0x248>)
 801397a:	429d      	cmp	r5, r3
 801397c:	bf08      	it	eq
 801397e:	68f5      	ldreq	r5, [r6, #12]
 8013980:	e7da      	b.n	8013938 <_vfiprintf_r+0x20>
 8013982:	89ab      	ldrh	r3, [r5, #12]
 8013984:	0598      	lsls	r0, r3, #22
 8013986:	d4ed      	bmi.n	8013964 <_vfiprintf_r+0x4c>
 8013988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801398a:	f7ff fc45 	bl	8013218 <__retarget_lock_release_recursive>
 801398e:	e7e9      	b.n	8013964 <_vfiprintf_r+0x4c>
 8013990:	2300      	movs	r3, #0
 8013992:	9309      	str	r3, [sp, #36]	; 0x24
 8013994:	2320      	movs	r3, #32
 8013996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801399a:	f8cd 800c 	str.w	r8, [sp, #12]
 801399e:	2330      	movs	r3, #48	; 0x30
 80139a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b64 <_vfiprintf_r+0x24c>
 80139a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139a8:	f04f 0901 	mov.w	r9, #1
 80139ac:	4623      	mov	r3, r4
 80139ae:	469a      	mov	sl, r3
 80139b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139b4:	b10a      	cbz	r2, 80139ba <_vfiprintf_r+0xa2>
 80139b6:	2a25      	cmp	r2, #37	; 0x25
 80139b8:	d1f9      	bne.n	80139ae <_vfiprintf_r+0x96>
 80139ba:	ebba 0b04 	subs.w	fp, sl, r4
 80139be:	d00b      	beq.n	80139d8 <_vfiprintf_r+0xc0>
 80139c0:	465b      	mov	r3, fp
 80139c2:	4622      	mov	r2, r4
 80139c4:	4629      	mov	r1, r5
 80139c6:	4630      	mov	r0, r6
 80139c8:	f7ff ff93 	bl	80138f2 <__sfputs_r>
 80139cc:	3001      	adds	r0, #1
 80139ce:	f000 80aa 	beq.w	8013b26 <_vfiprintf_r+0x20e>
 80139d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139d4:	445a      	add	r2, fp
 80139d6:	9209      	str	r2, [sp, #36]	; 0x24
 80139d8:	f89a 3000 	ldrb.w	r3, [sl]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f000 80a2 	beq.w	8013b26 <_vfiprintf_r+0x20e>
 80139e2:	2300      	movs	r3, #0
 80139e4:	f04f 32ff 	mov.w	r2, #4294967295
 80139e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ec:	f10a 0a01 	add.w	sl, sl, #1
 80139f0:	9304      	str	r3, [sp, #16]
 80139f2:	9307      	str	r3, [sp, #28]
 80139f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139f8:	931a      	str	r3, [sp, #104]	; 0x68
 80139fa:	4654      	mov	r4, sl
 80139fc:	2205      	movs	r2, #5
 80139fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a02:	4858      	ldr	r0, [pc, #352]	; (8013b64 <_vfiprintf_r+0x24c>)
 8013a04:	f7ec fbf4 	bl	80001f0 <memchr>
 8013a08:	9a04      	ldr	r2, [sp, #16]
 8013a0a:	b9d8      	cbnz	r0, 8013a44 <_vfiprintf_r+0x12c>
 8013a0c:	06d1      	lsls	r1, r2, #27
 8013a0e:	bf44      	itt	mi
 8013a10:	2320      	movmi	r3, #32
 8013a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a16:	0713      	lsls	r3, r2, #28
 8013a18:	bf44      	itt	mi
 8013a1a:	232b      	movmi	r3, #43	; 0x2b
 8013a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a20:	f89a 3000 	ldrb.w	r3, [sl]
 8013a24:	2b2a      	cmp	r3, #42	; 0x2a
 8013a26:	d015      	beq.n	8013a54 <_vfiprintf_r+0x13c>
 8013a28:	9a07      	ldr	r2, [sp, #28]
 8013a2a:	4654      	mov	r4, sl
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	f04f 0c0a 	mov.w	ip, #10
 8013a32:	4621      	mov	r1, r4
 8013a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a38:	3b30      	subs	r3, #48	; 0x30
 8013a3a:	2b09      	cmp	r3, #9
 8013a3c:	d94e      	bls.n	8013adc <_vfiprintf_r+0x1c4>
 8013a3e:	b1b0      	cbz	r0, 8013a6e <_vfiprintf_r+0x156>
 8013a40:	9207      	str	r2, [sp, #28]
 8013a42:	e014      	b.n	8013a6e <_vfiprintf_r+0x156>
 8013a44:	eba0 0308 	sub.w	r3, r0, r8
 8013a48:	fa09 f303 	lsl.w	r3, r9, r3
 8013a4c:	4313      	orrs	r3, r2
 8013a4e:	9304      	str	r3, [sp, #16]
 8013a50:	46a2      	mov	sl, r4
 8013a52:	e7d2      	b.n	80139fa <_vfiprintf_r+0xe2>
 8013a54:	9b03      	ldr	r3, [sp, #12]
 8013a56:	1d19      	adds	r1, r3, #4
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	9103      	str	r1, [sp, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	bfbb      	ittet	lt
 8013a60:	425b      	neglt	r3, r3
 8013a62:	f042 0202 	orrlt.w	r2, r2, #2
 8013a66:	9307      	strge	r3, [sp, #28]
 8013a68:	9307      	strlt	r3, [sp, #28]
 8013a6a:	bfb8      	it	lt
 8013a6c:	9204      	strlt	r2, [sp, #16]
 8013a6e:	7823      	ldrb	r3, [r4, #0]
 8013a70:	2b2e      	cmp	r3, #46	; 0x2e
 8013a72:	d10c      	bne.n	8013a8e <_vfiprintf_r+0x176>
 8013a74:	7863      	ldrb	r3, [r4, #1]
 8013a76:	2b2a      	cmp	r3, #42	; 0x2a
 8013a78:	d135      	bne.n	8013ae6 <_vfiprintf_r+0x1ce>
 8013a7a:	9b03      	ldr	r3, [sp, #12]
 8013a7c:	1d1a      	adds	r2, r3, #4
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	9203      	str	r2, [sp, #12]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	bfb8      	it	lt
 8013a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a8a:	3402      	adds	r4, #2
 8013a8c:	9305      	str	r3, [sp, #20]
 8013a8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b74 <_vfiprintf_r+0x25c>
 8013a92:	7821      	ldrb	r1, [r4, #0]
 8013a94:	2203      	movs	r2, #3
 8013a96:	4650      	mov	r0, sl
 8013a98:	f7ec fbaa 	bl	80001f0 <memchr>
 8013a9c:	b140      	cbz	r0, 8013ab0 <_vfiprintf_r+0x198>
 8013a9e:	2340      	movs	r3, #64	; 0x40
 8013aa0:	eba0 000a 	sub.w	r0, r0, sl
 8013aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8013aa8:	9b04      	ldr	r3, [sp, #16]
 8013aaa:	4303      	orrs	r3, r0
 8013aac:	3401      	adds	r4, #1
 8013aae:	9304      	str	r3, [sp, #16]
 8013ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab4:	482c      	ldr	r0, [pc, #176]	; (8013b68 <_vfiprintf_r+0x250>)
 8013ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013aba:	2206      	movs	r2, #6
 8013abc:	f7ec fb98 	bl	80001f0 <memchr>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d03f      	beq.n	8013b44 <_vfiprintf_r+0x22c>
 8013ac4:	4b29      	ldr	r3, [pc, #164]	; (8013b6c <_vfiprintf_r+0x254>)
 8013ac6:	bb1b      	cbnz	r3, 8013b10 <_vfiprintf_r+0x1f8>
 8013ac8:	9b03      	ldr	r3, [sp, #12]
 8013aca:	3307      	adds	r3, #7
 8013acc:	f023 0307 	bic.w	r3, r3, #7
 8013ad0:	3308      	adds	r3, #8
 8013ad2:	9303      	str	r3, [sp, #12]
 8013ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad6:	443b      	add	r3, r7
 8013ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8013ada:	e767      	b.n	80139ac <_vfiprintf_r+0x94>
 8013adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ae0:	460c      	mov	r4, r1
 8013ae2:	2001      	movs	r0, #1
 8013ae4:	e7a5      	b.n	8013a32 <_vfiprintf_r+0x11a>
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	3401      	adds	r4, #1
 8013aea:	9305      	str	r3, [sp, #20]
 8013aec:	4619      	mov	r1, r3
 8013aee:	f04f 0c0a 	mov.w	ip, #10
 8013af2:	4620      	mov	r0, r4
 8013af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013af8:	3a30      	subs	r2, #48	; 0x30
 8013afa:	2a09      	cmp	r2, #9
 8013afc:	d903      	bls.n	8013b06 <_vfiprintf_r+0x1ee>
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d0c5      	beq.n	8013a8e <_vfiprintf_r+0x176>
 8013b02:	9105      	str	r1, [sp, #20]
 8013b04:	e7c3      	b.n	8013a8e <_vfiprintf_r+0x176>
 8013b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e7f0      	b.n	8013af2 <_vfiprintf_r+0x1da>
 8013b10:	ab03      	add	r3, sp, #12
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	462a      	mov	r2, r5
 8013b16:	4b16      	ldr	r3, [pc, #88]	; (8013b70 <_vfiprintf_r+0x258>)
 8013b18:	a904      	add	r1, sp, #16
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f3af 8000 	nop.w
 8013b20:	4607      	mov	r7, r0
 8013b22:	1c78      	adds	r0, r7, #1
 8013b24:	d1d6      	bne.n	8013ad4 <_vfiprintf_r+0x1bc>
 8013b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b28:	07d9      	lsls	r1, r3, #31
 8013b2a:	d405      	bmi.n	8013b38 <_vfiprintf_r+0x220>
 8013b2c:	89ab      	ldrh	r3, [r5, #12]
 8013b2e:	059a      	lsls	r2, r3, #22
 8013b30:	d402      	bmi.n	8013b38 <_vfiprintf_r+0x220>
 8013b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b34:	f7ff fb70 	bl	8013218 <__retarget_lock_release_recursive>
 8013b38:	89ab      	ldrh	r3, [r5, #12]
 8013b3a:	065b      	lsls	r3, r3, #25
 8013b3c:	f53f af12 	bmi.w	8013964 <_vfiprintf_r+0x4c>
 8013b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b42:	e711      	b.n	8013968 <_vfiprintf_r+0x50>
 8013b44:	ab03      	add	r3, sp, #12
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	462a      	mov	r2, r5
 8013b4a:	4b09      	ldr	r3, [pc, #36]	; (8013b70 <_vfiprintf_r+0x258>)
 8013b4c:	a904      	add	r1, sp, #16
 8013b4e:	4630      	mov	r0, r6
 8013b50:	f000 f880 	bl	8013c54 <_printf_i>
 8013b54:	e7e4      	b.n	8013b20 <_vfiprintf_r+0x208>
 8013b56:	bf00      	nop
 8013b58:	08016ecc 	.word	0x08016ecc
 8013b5c:	08016eec 	.word	0x08016eec
 8013b60:	08016eac 	.word	0x08016eac
 8013b64:	08016fbe 	.word	0x08016fbe
 8013b68:	08016fc8 	.word	0x08016fc8
 8013b6c:	00000000 	.word	0x00000000
 8013b70:	080138f3 	.word	0x080138f3
 8013b74:	08016fc4 	.word	0x08016fc4

08013b78 <_printf_common>:
 8013b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b7c:	4616      	mov	r6, r2
 8013b7e:	4699      	mov	r9, r3
 8013b80:	688a      	ldr	r2, [r1, #8]
 8013b82:	690b      	ldr	r3, [r1, #16]
 8013b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	bfb8      	it	lt
 8013b8c:	4613      	movlt	r3, r2
 8013b8e:	6033      	str	r3, [r6, #0]
 8013b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b94:	4607      	mov	r7, r0
 8013b96:	460c      	mov	r4, r1
 8013b98:	b10a      	cbz	r2, 8013b9e <_printf_common+0x26>
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	6033      	str	r3, [r6, #0]
 8013b9e:	6823      	ldr	r3, [r4, #0]
 8013ba0:	0699      	lsls	r1, r3, #26
 8013ba2:	bf42      	ittt	mi
 8013ba4:	6833      	ldrmi	r3, [r6, #0]
 8013ba6:	3302      	addmi	r3, #2
 8013ba8:	6033      	strmi	r3, [r6, #0]
 8013baa:	6825      	ldr	r5, [r4, #0]
 8013bac:	f015 0506 	ands.w	r5, r5, #6
 8013bb0:	d106      	bne.n	8013bc0 <_printf_common+0x48>
 8013bb2:	f104 0a19 	add.w	sl, r4, #25
 8013bb6:	68e3      	ldr	r3, [r4, #12]
 8013bb8:	6832      	ldr	r2, [r6, #0]
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	42ab      	cmp	r3, r5
 8013bbe:	dc26      	bgt.n	8013c0e <_printf_common+0x96>
 8013bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013bc4:	1e13      	subs	r3, r2, #0
 8013bc6:	6822      	ldr	r2, [r4, #0]
 8013bc8:	bf18      	it	ne
 8013bca:	2301      	movne	r3, #1
 8013bcc:	0692      	lsls	r2, r2, #26
 8013bce:	d42b      	bmi.n	8013c28 <_printf_common+0xb0>
 8013bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bd4:	4649      	mov	r1, r9
 8013bd6:	4638      	mov	r0, r7
 8013bd8:	47c0      	blx	r8
 8013bda:	3001      	adds	r0, #1
 8013bdc:	d01e      	beq.n	8013c1c <_printf_common+0xa4>
 8013bde:	6823      	ldr	r3, [r4, #0]
 8013be0:	68e5      	ldr	r5, [r4, #12]
 8013be2:	6832      	ldr	r2, [r6, #0]
 8013be4:	f003 0306 	and.w	r3, r3, #6
 8013be8:	2b04      	cmp	r3, #4
 8013bea:	bf08      	it	eq
 8013bec:	1aad      	subeq	r5, r5, r2
 8013bee:	68a3      	ldr	r3, [r4, #8]
 8013bf0:	6922      	ldr	r2, [r4, #16]
 8013bf2:	bf0c      	ite	eq
 8013bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bf8:	2500      	movne	r5, #0
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	bfc4      	itt	gt
 8013bfe:	1a9b      	subgt	r3, r3, r2
 8013c00:	18ed      	addgt	r5, r5, r3
 8013c02:	2600      	movs	r6, #0
 8013c04:	341a      	adds	r4, #26
 8013c06:	42b5      	cmp	r5, r6
 8013c08:	d11a      	bne.n	8013c40 <_printf_common+0xc8>
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	e008      	b.n	8013c20 <_printf_common+0xa8>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	4652      	mov	r2, sl
 8013c12:	4649      	mov	r1, r9
 8013c14:	4638      	mov	r0, r7
 8013c16:	47c0      	blx	r8
 8013c18:	3001      	adds	r0, #1
 8013c1a:	d103      	bne.n	8013c24 <_printf_common+0xac>
 8013c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c24:	3501      	adds	r5, #1
 8013c26:	e7c6      	b.n	8013bb6 <_printf_common+0x3e>
 8013c28:	18e1      	adds	r1, r4, r3
 8013c2a:	1c5a      	adds	r2, r3, #1
 8013c2c:	2030      	movs	r0, #48	; 0x30
 8013c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c32:	4422      	add	r2, r4
 8013c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c3c:	3302      	adds	r3, #2
 8013c3e:	e7c7      	b.n	8013bd0 <_printf_common+0x58>
 8013c40:	2301      	movs	r3, #1
 8013c42:	4622      	mov	r2, r4
 8013c44:	4649      	mov	r1, r9
 8013c46:	4638      	mov	r0, r7
 8013c48:	47c0      	blx	r8
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	d0e6      	beq.n	8013c1c <_printf_common+0xa4>
 8013c4e:	3601      	adds	r6, #1
 8013c50:	e7d9      	b.n	8013c06 <_printf_common+0x8e>
	...

08013c54 <_printf_i>:
 8013c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c58:	7e0f      	ldrb	r7, [r1, #24]
 8013c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c5c:	2f78      	cmp	r7, #120	; 0x78
 8013c5e:	4691      	mov	r9, r2
 8013c60:	4680      	mov	r8, r0
 8013c62:	460c      	mov	r4, r1
 8013c64:	469a      	mov	sl, r3
 8013c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c6a:	d807      	bhi.n	8013c7c <_printf_i+0x28>
 8013c6c:	2f62      	cmp	r7, #98	; 0x62
 8013c6e:	d80a      	bhi.n	8013c86 <_printf_i+0x32>
 8013c70:	2f00      	cmp	r7, #0
 8013c72:	f000 80d8 	beq.w	8013e26 <_printf_i+0x1d2>
 8013c76:	2f58      	cmp	r7, #88	; 0x58
 8013c78:	f000 80a3 	beq.w	8013dc2 <_printf_i+0x16e>
 8013c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c84:	e03a      	b.n	8013cfc <_printf_i+0xa8>
 8013c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c8a:	2b15      	cmp	r3, #21
 8013c8c:	d8f6      	bhi.n	8013c7c <_printf_i+0x28>
 8013c8e:	a101      	add	r1, pc, #4	; (adr r1, 8013c94 <_printf_i+0x40>)
 8013c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c94:	08013ced 	.word	0x08013ced
 8013c98:	08013d01 	.word	0x08013d01
 8013c9c:	08013c7d 	.word	0x08013c7d
 8013ca0:	08013c7d 	.word	0x08013c7d
 8013ca4:	08013c7d 	.word	0x08013c7d
 8013ca8:	08013c7d 	.word	0x08013c7d
 8013cac:	08013d01 	.word	0x08013d01
 8013cb0:	08013c7d 	.word	0x08013c7d
 8013cb4:	08013c7d 	.word	0x08013c7d
 8013cb8:	08013c7d 	.word	0x08013c7d
 8013cbc:	08013c7d 	.word	0x08013c7d
 8013cc0:	08013e0d 	.word	0x08013e0d
 8013cc4:	08013d31 	.word	0x08013d31
 8013cc8:	08013def 	.word	0x08013def
 8013ccc:	08013c7d 	.word	0x08013c7d
 8013cd0:	08013c7d 	.word	0x08013c7d
 8013cd4:	08013e2f 	.word	0x08013e2f
 8013cd8:	08013c7d 	.word	0x08013c7d
 8013cdc:	08013d31 	.word	0x08013d31
 8013ce0:	08013c7d 	.word	0x08013c7d
 8013ce4:	08013c7d 	.word	0x08013c7d
 8013ce8:	08013df7 	.word	0x08013df7
 8013cec:	682b      	ldr	r3, [r5, #0]
 8013cee:	1d1a      	adds	r2, r3, #4
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	602a      	str	r2, [r5, #0]
 8013cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e0a3      	b.n	8013e48 <_printf_i+0x1f4>
 8013d00:	6820      	ldr	r0, [r4, #0]
 8013d02:	6829      	ldr	r1, [r5, #0]
 8013d04:	0606      	lsls	r6, r0, #24
 8013d06:	f101 0304 	add.w	r3, r1, #4
 8013d0a:	d50a      	bpl.n	8013d22 <_printf_i+0xce>
 8013d0c:	680e      	ldr	r6, [r1, #0]
 8013d0e:	602b      	str	r3, [r5, #0]
 8013d10:	2e00      	cmp	r6, #0
 8013d12:	da03      	bge.n	8013d1c <_printf_i+0xc8>
 8013d14:	232d      	movs	r3, #45	; 0x2d
 8013d16:	4276      	negs	r6, r6
 8013d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d1c:	485e      	ldr	r0, [pc, #376]	; (8013e98 <_printf_i+0x244>)
 8013d1e:	230a      	movs	r3, #10
 8013d20:	e019      	b.n	8013d56 <_printf_i+0x102>
 8013d22:	680e      	ldr	r6, [r1, #0]
 8013d24:	602b      	str	r3, [r5, #0]
 8013d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d2a:	bf18      	it	ne
 8013d2c:	b236      	sxthne	r6, r6
 8013d2e:	e7ef      	b.n	8013d10 <_printf_i+0xbc>
 8013d30:	682b      	ldr	r3, [r5, #0]
 8013d32:	6820      	ldr	r0, [r4, #0]
 8013d34:	1d19      	adds	r1, r3, #4
 8013d36:	6029      	str	r1, [r5, #0]
 8013d38:	0601      	lsls	r1, r0, #24
 8013d3a:	d501      	bpl.n	8013d40 <_printf_i+0xec>
 8013d3c:	681e      	ldr	r6, [r3, #0]
 8013d3e:	e002      	b.n	8013d46 <_printf_i+0xf2>
 8013d40:	0646      	lsls	r6, r0, #25
 8013d42:	d5fb      	bpl.n	8013d3c <_printf_i+0xe8>
 8013d44:	881e      	ldrh	r6, [r3, #0]
 8013d46:	4854      	ldr	r0, [pc, #336]	; (8013e98 <_printf_i+0x244>)
 8013d48:	2f6f      	cmp	r7, #111	; 0x6f
 8013d4a:	bf0c      	ite	eq
 8013d4c:	2308      	moveq	r3, #8
 8013d4e:	230a      	movne	r3, #10
 8013d50:	2100      	movs	r1, #0
 8013d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d56:	6865      	ldr	r5, [r4, #4]
 8013d58:	60a5      	str	r5, [r4, #8]
 8013d5a:	2d00      	cmp	r5, #0
 8013d5c:	bfa2      	ittt	ge
 8013d5e:	6821      	ldrge	r1, [r4, #0]
 8013d60:	f021 0104 	bicge.w	r1, r1, #4
 8013d64:	6021      	strge	r1, [r4, #0]
 8013d66:	b90e      	cbnz	r6, 8013d6c <_printf_i+0x118>
 8013d68:	2d00      	cmp	r5, #0
 8013d6a:	d04d      	beq.n	8013e08 <_printf_i+0x1b4>
 8013d6c:	4615      	mov	r5, r2
 8013d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d72:	fb03 6711 	mls	r7, r3, r1, r6
 8013d76:	5dc7      	ldrb	r7, [r0, r7]
 8013d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d7c:	4637      	mov	r7, r6
 8013d7e:	42bb      	cmp	r3, r7
 8013d80:	460e      	mov	r6, r1
 8013d82:	d9f4      	bls.n	8013d6e <_printf_i+0x11a>
 8013d84:	2b08      	cmp	r3, #8
 8013d86:	d10b      	bne.n	8013da0 <_printf_i+0x14c>
 8013d88:	6823      	ldr	r3, [r4, #0]
 8013d8a:	07de      	lsls	r6, r3, #31
 8013d8c:	d508      	bpl.n	8013da0 <_printf_i+0x14c>
 8013d8e:	6923      	ldr	r3, [r4, #16]
 8013d90:	6861      	ldr	r1, [r4, #4]
 8013d92:	4299      	cmp	r1, r3
 8013d94:	bfde      	ittt	le
 8013d96:	2330      	movle	r3, #48	; 0x30
 8013d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013da0:	1b52      	subs	r2, r2, r5
 8013da2:	6122      	str	r2, [r4, #16]
 8013da4:	f8cd a000 	str.w	sl, [sp]
 8013da8:	464b      	mov	r3, r9
 8013daa:	aa03      	add	r2, sp, #12
 8013dac:	4621      	mov	r1, r4
 8013dae:	4640      	mov	r0, r8
 8013db0:	f7ff fee2 	bl	8013b78 <_printf_common>
 8013db4:	3001      	adds	r0, #1
 8013db6:	d14c      	bne.n	8013e52 <_printf_i+0x1fe>
 8013db8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dbc:	b004      	add	sp, #16
 8013dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc2:	4835      	ldr	r0, [pc, #212]	; (8013e98 <_printf_i+0x244>)
 8013dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013dc8:	6829      	ldr	r1, [r5, #0]
 8013dca:	6823      	ldr	r3, [r4, #0]
 8013dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8013dd0:	6029      	str	r1, [r5, #0]
 8013dd2:	061d      	lsls	r5, r3, #24
 8013dd4:	d514      	bpl.n	8013e00 <_printf_i+0x1ac>
 8013dd6:	07df      	lsls	r7, r3, #31
 8013dd8:	bf44      	itt	mi
 8013dda:	f043 0320 	orrmi.w	r3, r3, #32
 8013dde:	6023      	strmi	r3, [r4, #0]
 8013de0:	b91e      	cbnz	r6, 8013dea <_printf_i+0x196>
 8013de2:	6823      	ldr	r3, [r4, #0]
 8013de4:	f023 0320 	bic.w	r3, r3, #32
 8013de8:	6023      	str	r3, [r4, #0]
 8013dea:	2310      	movs	r3, #16
 8013dec:	e7b0      	b.n	8013d50 <_printf_i+0xfc>
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	f043 0320 	orr.w	r3, r3, #32
 8013df4:	6023      	str	r3, [r4, #0]
 8013df6:	2378      	movs	r3, #120	; 0x78
 8013df8:	4828      	ldr	r0, [pc, #160]	; (8013e9c <_printf_i+0x248>)
 8013dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013dfe:	e7e3      	b.n	8013dc8 <_printf_i+0x174>
 8013e00:	0659      	lsls	r1, r3, #25
 8013e02:	bf48      	it	mi
 8013e04:	b2b6      	uxthmi	r6, r6
 8013e06:	e7e6      	b.n	8013dd6 <_printf_i+0x182>
 8013e08:	4615      	mov	r5, r2
 8013e0a:	e7bb      	b.n	8013d84 <_printf_i+0x130>
 8013e0c:	682b      	ldr	r3, [r5, #0]
 8013e0e:	6826      	ldr	r6, [r4, #0]
 8013e10:	6961      	ldr	r1, [r4, #20]
 8013e12:	1d18      	adds	r0, r3, #4
 8013e14:	6028      	str	r0, [r5, #0]
 8013e16:	0635      	lsls	r5, r6, #24
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	d501      	bpl.n	8013e20 <_printf_i+0x1cc>
 8013e1c:	6019      	str	r1, [r3, #0]
 8013e1e:	e002      	b.n	8013e26 <_printf_i+0x1d2>
 8013e20:	0670      	lsls	r0, r6, #25
 8013e22:	d5fb      	bpl.n	8013e1c <_printf_i+0x1c8>
 8013e24:	8019      	strh	r1, [r3, #0]
 8013e26:	2300      	movs	r3, #0
 8013e28:	6123      	str	r3, [r4, #16]
 8013e2a:	4615      	mov	r5, r2
 8013e2c:	e7ba      	b.n	8013da4 <_printf_i+0x150>
 8013e2e:	682b      	ldr	r3, [r5, #0]
 8013e30:	1d1a      	adds	r2, r3, #4
 8013e32:	602a      	str	r2, [r5, #0]
 8013e34:	681d      	ldr	r5, [r3, #0]
 8013e36:	6862      	ldr	r2, [r4, #4]
 8013e38:	2100      	movs	r1, #0
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f7ec f9d8 	bl	80001f0 <memchr>
 8013e40:	b108      	cbz	r0, 8013e46 <_printf_i+0x1f2>
 8013e42:	1b40      	subs	r0, r0, r5
 8013e44:	6060      	str	r0, [r4, #4]
 8013e46:	6863      	ldr	r3, [r4, #4]
 8013e48:	6123      	str	r3, [r4, #16]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e50:	e7a8      	b.n	8013da4 <_printf_i+0x150>
 8013e52:	6923      	ldr	r3, [r4, #16]
 8013e54:	462a      	mov	r2, r5
 8013e56:	4649      	mov	r1, r9
 8013e58:	4640      	mov	r0, r8
 8013e5a:	47d0      	blx	sl
 8013e5c:	3001      	adds	r0, #1
 8013e5e:	d0ab      	beq.n	8013db8 <_printf_i+0x164>
 8013e60:	6823      	ldr	r3, [r4, #0]
 8013e62:	079b      	lsls	r3, r3, #30
 8013e64:	d413      	bmi.n	8013e8e <_printf_i+0x23a>
 8013e66:	68e0      	ldr	r0, [r4, #12]
 8013e68:	9b03      	ldr	r3, [sp, #12]
 8013e6a:	4298      	cmp	r0, r3
 8013e6c:	bfb8      	it	lt
 8013e6e:	4618      	movlt	r0, r3
 8013e70:	e7a4      	b.n	8013dbc <_printf_i+0x168>
 8013e72:	2301      	movs	r3, #1
 8013e74:	4632      	mov	r2, r6
 8013e76:	4649      	mov	r1, r9
 8013e78:	4640      	mov	r0, r8
 8013e7a:	47d0      	blx	sl
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	d09b      	beq.n	8013db8 <_printf_i+0x164>
 8013e80:	3501      	adds	r5, #1
 8013e82:	68e3      	ldr	r3, [r4, #12]
 8013e84:	9903      	ldr	r1, [sp, #12]
 8013e86:	1a5b      	subs	r3, r3, r1
 8013e88:	42ab      	cmp	r3, r5
 8013e8a:	dcf2      	bgt.n	8013e72 <_printf_i+0x21e>
 8013e8c:	e7eb      	b.n	8013e66 <_printf_i+0x212>
 8013e8e:	2500      	movs	r5, #0
 8013e90:	f104 0619 	add.w	r6, r4, #25
 8013e94:	e7f5      	b.n	8013e82 <_printf_i+0x22e>
 8013e96:	bf00      	nop
 8013e98:	08016fcf 	.word	0x08016fcf
 8013e9c:	08016fe0 	.word	0x08016fe0

08013ea0 <_read_r>:
 8013ea0:	b538      	push	{r3, r4, r5, lr}
 8013ea2:	4d07      	ldr	r5, [pc, #28]	; (8013ec0 <_read_r+0x20>)
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	4608      	mov	r0, r1
 8013ea8:	4611      	mov	r1, r2
 8013eaa:	2200      	movs	r2, #0
 8013eac:	602a      	str	r2, [r5, #0]
 8013eae:	461a      	mov	r2, r3
 8013eb0:	f7ec ff52 	bl	8000d58 <_read>
 8013eb4:	1c43      	adds	r3, r0, #1
 8013eb6:	d102      	bne.n	8013ebe <_read_r+0x1e>
 8013eb8:	682b      	ldr	r3, [r5, #0]
 8013eba:	b103      	cbz	r3, 8013ebe <_read_r+0x1e>
 8013ebc:	6023      	str	r3, [r4, #0]
 8013ebe:	bd38      	pop	{r3, r4, r5, pc}
 8013ec0:	2000cab4 	.word	0x2000cab4

08013ec4 <__swbuf_r>:
 8013ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec6:	460e      	mov	r6, r1
 8013ec8:	4614      	mov	r4, r2
 8013eca:	4605      	mov	r5, r0
 8013ecc:	b118      	cbz	r0, 8013ed6 <__swbuf_r+0x12>
 8013ece:	6983      	ldr	r3, [r0, #24]
 8013ed0:	b90b      	cbnz	r3, 8013ed6 <__swbuf_r+0x12>
 8013ed2:	f7ff f8dd 	bl	8013090 <__sinit>
 8013ed6:	4b21      	ldr	r3, [pc, #132]	; (8013f5c <__swbuf_r+0x98>)
 8013ed8:	429c      	cmp	r4, r3
 8013eda:	d12b      	bne.n	8013f34 <__swbuf_r+0x70>
 8013edc:	686c      	ldr	r4, [r5, #4]
 8013ede:	69a3      	ldr	r3, [r4, #24]
 8013ee0:	60a3      	str	r3, [r4, #8]
 8013ee2:	89a3      	ldrh	r3, [r4, #12]
 8013ee4:	071a      	lsls	r2, r3, #28
 8013ee6:	d52f      	bpl.n	8013f48 <__swbuf_r+0x84>
 8013ee8:	6923      	ldr	r3, [r4, #16]
 8013eea:	b36b      	cbz	r3, 8013f48 <__swbuf_r+0x84>
 8013eec:	6923      	ldr	r3, [r4, #16]
 8013eee:	6820      	ldr	r0, [r4, #0]
 8013ef0:	1ac0      	subs	r0, r0, r3
 8013ef2:	6963      	ldr	r3, [r4, #20]
 8013ef4:	b2f6      	uxtb	r6, r6
 8013ef6:	4283      	cmp	r3, r0
 8013ef8:	4637      	mov	r7, r6
 8013efa:	dc04      	bgt.n	8013f06 <__swbuf_r+0x42>
 8013efc:	4621      	mov	r1, r4
 8013efe:	4628      	mov	r0, r5
 8013f00:	f7ff fc20 	bl	8013744 <_fflush_r>
 8013f04:	bb30      	cbnz	r0, 8013f54 <__swbuf_r+0x90>
 8013f06:	68a3      	ldr	r3, [r4, #8]
 8013f08:	3b01      	subs	r3, #1
 8013f0a:	60a3      	str	r3, [r4, #8]
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	1c5a      	adds	r2, r3, #1
 8013f10:	6022      	str	r2, [r4, #0]
 8013f12:	701e      	strb	r6, [r3, #0]
 8013f14:	6963      	ldr	r3, [r4, #20]
 8013f16:	3001      	adds	r0, #1
 8013f18:	4283      	cmp	r3, r0
 8013f1a:	d004      	beq.n	8013f26 <__swbuf_r+0x62>
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	07db      	lsls	r3, r3, #31
 8013f20:	d506      	bpl.n	8013f30 <__swbuf_r+0x6c>
 8013f22:	2e0a      	cmp	r6, #10
 8013f24:	d104      	bne.n	8013f30 <__swbuf_r+0x6c>
 8013f26:	4621      	mov	r1, r4
 8013f28:	4628      	mov	r0, r5
 8013f2a:	f7ff fc0b 	bl	8013744 <_fflush_r>
 8013f2e:	b988      	cbnz	r0, 8013f54 <__swbuf_r+0x90>
 8013f30:	4638      	mov	r0, r7
 8013f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f34:	4b0a      	ldr	r3, [pc, #40]	; (8013f60 <__swbuf_r+0x9c>)
 8013f36:	429c      	cmp	r4, r3
 8013f38:	d101      	bne.n	8013f3e <__swbuf_r+0x7a>
 8013f3a:	68ac      	ldr	r4, [r5, #8]
 8013f3c:	e7cf      	b.n	8013ede <__swbuf_r+0x1a>
 8013f3e:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <__swbuf_r+0xa0>)
 8013f40:	429c      	cmp	r4, r3
 8013f42:	bf08      	it	eq
 8013f44:	68ec      	ldreq	r4, [r5, #12]
 8013f46:	e7ca      	b.n	8013ede <__swbuf_r+0x1a>
 8013f48:	4621      	mov	r1, r4
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f000 f80c 	bl	8013f68 <__swsetup_r>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d0cb      	beq.n	8013eec <__swbuf_r+0x28>
 8013f54:	f04f 37ff 	mov.w	r7, #4294967295
 8013f58:	e7ea      	b.n	8013f30 <__swbuf_r+0x6c>
 8013f5a:	bf00      	nop
 8013f5c:	08016ecc 	.word	0x08016ecc
 8013f60:	08016eec 	.word	0x08016eec
 8013f64:	08016eac 	.word	0x08016eac

08013f68 <__swsetup_r>:
 8013f68:	4b32      	ldr	r3, [pc, #200]	; (8014034 <__swsetup_r+0xcc>)
 8013f6a:	b570      	push	{r4, r5, r6, lr}
 8013f6c:	681d      	ldr	r5, [r3, #0]
 8013f6e:	4606      	mov	r6, r0
 8013f70:	460c      	mov	r4, r1
 8013f72:	b125      	cbz	r5, 8013f7e <__swsetup_r+0x16>
 8013f74:	69ab      	ldr	r3, [r5, #24]
 8013f76:	b913      	cbnz	r3, 8013f7e <__swsetup_r+0x16>
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f7ff f889 	bl	8013090 <__sinit>
 8013f7e:	4b2e      	ldr	r3, [pc, #184]	; (8014038 <__swsetup_r+0xd0>)
 8013f80:	429c      	cmp	r4, r3
 8013f82:	d10f      	bne.n	8013fa4 <__swsetup_r+0x3c>
 8013f84:	686c      	ldr	r4, [r5, #4]
 8013f86:	89a3      	ldrh	r3, [r4, #12]
 8013f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f8c:	0719      	lsls	r1, r3, #28
 8013f8e:	d42c      	bmi.n	8013fea <__swsetup_r+0x82>
 8013f90:	06dd      	lsls	r5, r3, #27
 8013f92:	d411      	bmi.n	8013fb8 <__swsetup_r+0x50>
 8013f94:	2309      	movs	r3, #9
 8013f96:	6033      	str	r3, [r6, #0]
 8013f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f9c:	81a3      	strh	r3, [r4, #12]
 8013f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa2:	e03e      	b.n	8014022 <__swsetup_r+0xba>
 8013fa4:	4b25      	ldr	r3, [pc, #148]	; (801403c <__swsetup_r+0xd4>)
 8013fa6:	429c      	cmp	r4, r3
 8013fa8:	d101      	bne.n	8013fae <__swsetup_r+0x46>
 8013faa:	68ac      	ldr	r4, [r5, #8]
 8013fac:	e7eb      	b.n	8013f86 <__swsetup_r+0x1e>
 8013fae:	4b24      	ldr	r3, [pc, #144]	; (8014040 <__swsetup_r+0xd8>)
 8013fb0:	429c      	cmp	r4, r3
 8013fb2:	bf08      	it	eq
 8013fb4:	68ec      	ldreq	r4, [r5, #12]
 8013fb6:	e7e6      	b.n	8013f86 <__swsetup_r+0x1e>
 8013fb8:	0758      	lsls	r0, r3, #29
 8013fba:	d512      	bpl.n	8013fe2 <__swsetup_r+0x7a>
 8013fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fbe:	b141      	cbz	r1, 8013fd2 <__swsetup_r+0x6a>
 8013fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fc4:	4299      	cmp	r1, r3
 8013fc6:	d002      	beq.n	8013fce <__swsetup_r+0x66>
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7ff fc2f 	bl	801382c <_free_r>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8013fd2:	89a3      	ldrh	r3, [r4, #12]
 8013fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013fd8:	81a3      	strh	r3, [r4, #12]
 8013fda:	2300      	movs	r3, #0
 8013fdc:	6063      	str	r3, [r4, #4]
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	89a3      	ldrh	r3, [r4, #12]
 8013fe4:	f043 0308 	orr.w	r3, r3, #8
 8013fe8:	81a3      	strh	r3, [r4, #12]
 8013fea:	6923      	ldr	r3, [r4, #16]
 8013fec:	b94b      	cbnz	r3, 8014002 <__swsetup_r+0x9a>
 8013fee:	89a3      	ldrh	r3, [r4, #12]
 8013ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ff8:	d003      	beq.n	8014002 <__swsetup_r+0x9a>
 8013ffa:	4621      	mov	r1, r4
 8013ffc:	4630      	mov	r0, r6
 8013ffe:	f000 f84d 	bl	801409c <__smakebuf_r>
 8014002:	89a0      	ldrh	r0, [r4, #12]
 8014004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014008:	f010 0301 	ands.w	r3, r0, #1
 801400c:	d00a      	beq.n	8014024 <__swsetup_r+0xbc>
 801400e:	2300      	movs	r3, #0
 8014010:	60a3      	str	r3, [r4, #8]
 8014012:	6963      	ldr	r3, [r4, #20]
 8014014:	425b      	negs	r3, r3
 8014016:	61a3      	str	r3, [r4, #24]
 8014018:	6923      	ldr	r3, [r4, #16]
 801401a:	b943      	cbnz	r3, 801402e <__swsetup_r+0xc6>
 801401c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014020:	d1ba      	bne.n	8013f98 <__swsetup_r+0x30>
 8014022:	bd70      	pop	{r4, r5, r6, pc}
 8014024:	0781      	lsls	r1, r0, #30
 8014026:	bf58      	it	pl
 8014028:	6963      	ldrpl	r3, [r4, #20]
 801402a:	60a3      	str	r3, [r4, #8]
 801402c:	e7f4      	b.n	8014018 <__swsetup_r+0xb0>
 801402e:	2000      	movs	r0, #0
 8014030:	e7f7      	b.n	8014022 <__swsetup_r+0xba>
 8014032:	bf00      	nop
 8014034:	20000030 	.word	0x20000030
 8014038:	08016ecc 	.word	0x08016ecc
 801403c:	08016eec 	.word	0x08016eec
 8014040:	08016eac 	.word	0x08016eac

08014044 <abort>:
 8014044:	b508      	push	{r3, lr}
 8014046:	2006      	movs	r0, #6
 8014048:	f000 f890 	bl	801416c <raise>
 801404c:	2001      	movs	r0, #1
 801404e:	f7ec fe79 	bl	8000d44 <_exit>

08014052 <__swhatbuf_r>:
 8014052:	b570      	push	{r4, r5, r6, lr}
 8014054:	460e      	mov	r6, r1
 8014056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801405a:	2900      	cmp	r1, #0
 801405c:	b096      	sub	sp, #88	; 0x58
 801405e:	4614      	mov	r4, r2
 8014060:	461d      	mov	r5, r3
 8014062:	da08      	bge.n	8014076 <__swhatbuf_r+0x24>
 8014064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014068:	2200      	movs	r2, #0
 801406a:	602a      	str	r2, [r5, #0]
 801406c:	061a      	lsls	r2, r3, #24
 801406e:	d410      	bmi.n	8014092 <__swhatbuf_r+0x40>
 8014070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014074:	e00e      	b.n	8014094 <__swhatbuf_r+0x42>
 8014076:	466a      	mov	r2, sp
 8014078:	f000 f894 	bl	80141a4 <_fstat_r>
 801407c:	2800      	cmp	r0, #0
 801407e:	dbf1      	blt.n	8014064 <__swhatbuf_r+0x12>
 8014080:	9a01      	ldr	r2, [sp, #4]
 8014082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801408a:	425a      	negs	r2, r3
 801408c:	415a      	adcs	r2, r3
 801408e:	602a      	str	r2, [r5, #0]
 8014090:	e7ee      	b.n	8014070 <__swhatbuf_r+0x1e>
 8014092:	2340      	movs	r3, #64	; 0x40
 8014094:	2000      	movs	r0, #0
 8014096:	6023      	str	r3, [r4, #0]
 8014098:	b016      	add	sp, #88	; 0x58
 801409a:	bd70      	pop	{r4, r5, r6, pc}

0801409c <__smakebuf_r>:
 801409c:	898b      	ldrh	r3, [r1, #12]
 801409e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80140a0:	079d      	lsls	r5, r3, #30
 80140a2:	4606      	mov	r6, r0
 80140a4:	460c      	mov	r4, r1
 80140a6:	d507      	bpl.n	80140b8 <__smakebuf_r+0x1c>
 80140a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80140ac:	6023      	str	r3, [r4, #0]
 80140ae:	6123      	str	r3, [r4, #16]
 80140b0:	2301      	movs	r3, #1
 80140b2:	6163      	str	r3, [r4, #20]
 80140b4:	b002      	add	sp, #8
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	ab01      	add	r3, sp, #4
 80140ba:	466a      	mov	r2, sp
 80140bc:	f7ff ffc9 	bl	8014052 <__swhatbuf_r>
 80140c0:	9900      	ldr	r1, [sp, #0]
 80140c2:	4605      	mov	r5, r0
 80140c4:	4630      	mov	r0, r6
 80140c6:	f7ff f8ef 	bl	80132a8 <_malloc_r>
 80140ca:	b948      	cbnz	r0, 80140e0 <__smakebuf_r+0x44>
 80140cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140d0:	059a      	lsls	r2, r3, #22
 80140d2:	d4ef      	bmi.n	80140b4 <__smakebuf_r+0x18>
 80140d4:	f023 0303 	bic.w	r3, r3, #3
 80140d8:	f043 0302 	orr.w	r3, r3, #2
 80140dc:	81a3      	strh	r3, [r4, #12]
 80140de:	e7e3      	b.n	80140a8 <__smakebuf_r+0xc>
 80140e0:	4b0d      	ldr	r3, [pc, #52]	; (8014118 <__smakebuf_r+0x7c>)
 80140e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80140e4:	89a3      	ldrh	r3, [r4, #12]
 80140e6:	6020      	str	r0, [r4, #0]
 80140e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140ec:	81a3      	strh	r3, [r4, #12]
 80140ee:	9b00      	ldr	r3, [sp, #0]
 80140f0:	6163      	str	r3, [r4, #20]
 80140f2:	9b01      	ldr	r3, [sp, #4]
 80140f4:	6120      	str	r0, [r4, #16]
 80140f6:	b15b      	cbz	r3, 8014110 <__smakebuf_r+0x74>
 80140f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140fc:	4630      	mov	r0, r6
 80140fe:	f000 f863 	bl	80141c8 <_isatty_r>
 8014102:	b128      	cbz	r0, 8014110 <__smakebuf_r+0x74>
 8014104:	89a3      	ldrh	r3, [r4, #12]
 8014106:	f023 0303 	bic.w	r3, r3, #3
 801410a:	f043 0301 	orr.w	r3, r3, #1
 801410e:	81a3      	strh	r3, [r4, #12]
 8014110:	89a0      	ldrh	r0, [r4, #12]
 8014112:	4305      	orrs	r5, r0
 8014114:	81a5      	strh	r5, [r4, #12]
 8014116:	e7cd      	b.n	80140b4 <__smakebuf_r+0x18>
 8014118:	08013029 	.word	0x08013029

0801411c <_raise_r>:
 801411c:	291f      	cmp	r1, #31
 801411e:	b538      	push	{r3, r4, r5, lr}
 8014120:	4604      	mov	r4, r0
 8014122:	460d      	mov	r5, r1
 8014124:	d904      	bls.n	8014130 <_raise_r+0x14>
 8014126:	2316      	movs	r3, #22
 8014128:	6003      	str	r3, [r0, #0]
 801412a:	f04f 30ff 	mov.w	r0, #4294967295
 801412e:	bd38      	pop	{r3, r4, r5, pc}
 8014130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014132:	b112      	cbz	r2, 801413a <_raise_r+0x1e>
 8014134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014138:	b94b      	cbnz	r3, 801414e <_raise_r+0x32>
 801413a:	4620      	mov	r0, r4
 801413c:	f000 f830 	bl	80141a0 <_getpid_r>
 8014140:	462a      	mov	r2, r5
 8014142:	4601      	mov	r1, r0
 8014144:	4620      	mov	r0, r4
 8014146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801414a:	f000 b817 	b.w	801417c <_kill_r>
 801414e:	2b01      	cmp	r3, #1
 8014150:	d00a      	beq.n	8014168 <_raise_r+0x4c>
 8014152:	1c59      	adds	r1, r3, #1
 8014154:	d103      	bne.n	801415e <_raise_r+0x42>
 8014156:	2316      	movs	r3, #22
 8014158:	6003      	str	r3, [r0, #0]
 801415a:	2001      	movs	r0, #1
 801415c:	e7e7      	b.n	801412e <_raise_r+0x12>
 801415e:	2400      	movs	r4, #0
 8014160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014164:	4628      	mov	r0, r5
 8014166:	4798      	blx	r3
 8014168:	2000      	movs	r0, #0
 801416a:	e7e0      	b.n	801412e <_raise_r+0x12>

0801416c <raise>:
 801416c:	4b02      	ldr	r3, [pc, #8]	; (8014178 <raise+0xc>)
 801416e:	4601      	mov	r1, r0
 8014170:	6818      	ldr	r0, [r3, #0]
 8014172:	f7ff bfd3 	b.w	801411c <_raise_r>
 8014176:	bf00      	nop
 8014178:	20000030 	.word	0x20000030

0801417c <_kill_r>:
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	4d07      	ldr	r5, [pc, #28]	; (801419c <_kill_r+0x20>)
 8014180:	2300      	movs	r3, #0
 8014182:	4604      	mov	r4, r0
 8014184:	4608      	mov	r0, r1
 8014186:	4611      	mov	r1, r2
 8014188:	602b      	str	r3, [r5, #0]
 801418a:	f7ec fdc9 	bl	8000d20 <_kill>
 801418e:	1c43      	adds	r3, r0, #1
 8014190:	d102      	bne.n	8014198 <_kill_r+0x1c>
 8014192:	682b      	ldr	r3, [r5, #0]
 8014194:	b103      	cbz	r3, 8014198 <_kill_r+0x1c>
 8014196:	6023      	str	r3, [r4, #0]
 8014198:	bd38      	pop	{r3, r4, r5, pc}
 801419a:	bf00      	nop
 801419c:	2000cab4 	.word	0x2000cab4

080141a0 <_getpid_r>:
 80141a0:	f7ec bdb6 	b.w	8000d10 <_getpid>

080141a4 <_fstat_r>:
 80141a4:	b538      	push	{r3, r4, r5, lr}
 80141a6:	4d07      	ldr	r5, [pc, #28]	; (80141c4 <_fstat_r+0x20>)
 80141a8:	2300      	movs	r3, #0
 80141aa:	4604      	mov	r4, r0
 80141ac:	4608      	mov	r0, r1
 80141ae:	4611      	mov	r1, r2
 80141b0:	602b      	str	r3, [r5, #0]
 80141b2:	f7ec fe16 	bl	8000de2 <_fstat>
 80141b6:	1c43      	adds	r3, r0, #1
 80141b8:	d102      	bne.n	80141c0 <_fstat_r+0x1c>
 80141ba:	682b      	ldr	r3, [r5, #0]
 80141bc:	b103      	cbz	r3, 80141c0 <_fstat_r+0x1c>
 80141be:	6023      	str	r3, [r4, #0]
 80141c0:	bd38      	pop	{r3, r4, r5, pc}
 80141c2:	bf00      	nop
 80141c4:	2000cab4 	.word	0x2000cab4

080141c8 <_isatty_r>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4d06      	ldr	r5, [pc, #24]	; (80141e4 <_isatty_r+0x1c>)
 80141cc:	2300      	movs	r3, #0
 80141ce:	4604      	mov	r4, r0
 80141d0:	4608      	mov	r0, r1
 80141d2:	602b      	str	r3, [r5, #0]
 80141d4:	f7ec fe15 	bl	8000e02 <_isatty>
 80141d8:	1c43      	adds	r3, r0, #1
 80141da:	d102      	bne.n	80141e2 <_isatty_r+0x1a>
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	b103      	cbz	r3, 80141e2 <_isatty_r+0x1a>
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	2000cab4 	.word	0x2000cab4

080141e8 <_init>:
 80141e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ea:	bf00      	nop
 80141ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ee:	bc08      	pop	{r3}
 80141f0:	469e      	mov	lr, r3
 80141f2:	4770      	bx	lr

080141f4 <_fini>:
 80141f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f6:	bf00      	nop
 80141f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141fa:	bc08      	pop	{r3}
 80141fc:	469e      	mov	lr, r3
 80141fe:	4770      	bx	lr
